DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00002217;   % 224:  	la 	tp, ExceptionHandling	# carrega em tp o endereço base das rotinas do sistema ECALL %
00000001 : a9820213;   % 224:  %
00000002 : 00521073;   % 225:  	csrw 	tp, utvec 		# seta utvec para o endereço tp %
00000003 : 0000e073;   % 226:  	csrsi 	ustatus, 1 		# seta o bit de habilitação de interrupção em ustatus (reg 0)																																																				 %
00000004 : c0102df3;   % 716:     		csrr s11, time			# tempo "inicial" m sica  %
00000005 : 0fc25297;   % 717:     		la t0, TEMPO_PARA_COMECAR_A_CAIR# endereco do tempo "inicial" cooldown %
00000006 : dec28293;   % 717:  %
00000007 : 01b2a023;   % 718:     		sw s11, 0(t0)			# salvando o tempo no endereco %
00000008 : 0fc25c97;   % 719:     		la s9, NOTAS			# endereco das notas  %
00000009 : a94c8c93;   % 719:  %
0000000a : 004c8c93;   % 720:     		addi s9, s9, 4			# pulando as primeiras nota %
0000000b : 00000393;   % 721:     		li t2, 0			# duracao da nota inicial %
0000000c : c0102d73;   % 725:     		csrr s10, time			# s10 = tempo atual %
0000000d : 0fc25297;   % 726:     		la t0, TEMPO_ATUAL		# endereco do TEMPO_ATUAL %
0000000e : dc828293;   % 726:  %
0000000f : 01a2a023;   % 727:     		sw s10, 0(t0)			# salvando no endereco %
00000010 : 41bd0d33;   % 728:     		sub s10, s10, s11		# tempo inicial - tempo atual %
00000011 : 00000317;   % 729:     		call MUSIC			# chamada de funcao de musica %
00000012 : 184300e7;   % 729:  %
00000013 : 00001317;   % 730:     		call KEY2.1			# chamada de funcao de movimento		 %
00000014 : 83c300e7;   % 730:  %
00000015 : 00144413;   % 731:    		xori s0, s0, 1          	# Inverte o valor do frame atual (somente o registrador) %
00000016 : 008006b3;   % 732:     		mv a3, s0			# troca de frame %
00000017 : 0fc25297;   % 733:     		la t0, POS_MAPA			# endereco da posicao do mapa %
00000018 : d8428293;   % 733:  %
00000019 : 00000317;   % 734:     		call PRINT_MATRIZ_2		# chamda de renderiza  o %
0000001a : 1dc300e7;   % 734:  %
0000001b : 00000317;   % 735:     		call TIRO_RASTRO %
0000001c : 708300e7;   % 735:  %
0000001d : 0fc25297;   % 736:     		la t0, BOSS_MORTO %
0000001e : dde28293;   % 736:  %
0000001f : 00028283;   % 737:     		lb t0, 0(t0) %
00000020 : 00028663;   % 738:     		beq t0, zero, BOSS_VIVO %
00000021 : 00001317;   % 739:     		call INIMIGOS %
00000022 : 3e8300e7;   % 739:  %
00000023 : 0fc25297;   % 742: 		la t0, FRASE1 %
00000024 : d4028293;   % 742:  %
00000025 : 00500533;   % 743:     		mv a0, t0 %
00000026 : 06800893;   % 744: 		li a7,104			 %
00000027 : 00000593;   % 745: 		li a1,0 %
00000028 : 00100613;   % 746: 		li a2,1 %
00000029 : 03800693;   % 747: 		li a3,0x0038 %
0000002a : 00800733;   % 748: 		mv a4, s0			 %
0000002b : 00000073;   % 749: 		ecall %
0000002c : 0fc25297;   % 751: 		la t0, FRASE2 %
0000002d : d2228293;   % 751:  %
0000002e : 00500533;   % 752:     		mv a0, t0 %
0000002f : 06800893;   % 753: 		li a7,104			 %
00000030 : 04b00593;   % 754: 		li a1,75 %
00000031 : 00100613;   % 755: 		li a2,1 %
00000032 : 03800693;   % 756: 		li a3,0x0038 %
00000033 : 00800733;   % 757: 		mv a4, s0			 %
00000034 : 00000073;   % 758: 		ecall %
00000035 : 0fc25297;   % 760: 		la t0, VIDA %
00000036 : d7928293;   % 760:  %
00000037 : 00028283;   % 761: 		lb t0, 0(t0) %
00000038 : 00500533;   % 762:     		mv a0, t0 %
00000039 : 06500893;   % 763: 		li a7,101			 %
0000003a : 02800593;   % 764: 		li a1,40 %
0000003b : 00100613;   % 765: 		li a2,1 %
0000003c : 03800693;   % 766: 		li a3,0x0038 %
0000003d : 00800733;   % 767: 		mv a4, s0			 %
0000003e : 00000073;   % 768: 		ecall %
0000003f : 0fc25297;   % 770: 		la t0, ARMA %
00000040 : d8628293;   % 770:  %
00000041 : 00029283;   % 771: 		lh t0, 0(t0) %
00000042 : 00500533;   % 772:     		mv a0, t0 %
00000043 : 06500893;   % 773: 		li a7,101			 %
00000044 : 07b00593;   % 774: 		li a1,123 %
00000045 : 00100613;   % 775: 		li a2,1 %
00000046 : 03800693;   % 776: 		li a3,0x0038 %
00000047 : 00800733;   % 777: 		mv a4, s0			 %
00000048 : 00000073;   % 778: 		ecall %
00000049 : 0fc25297;   % 780: 		la t0, MAPA %
0000004a : cbe28293;   % 780:  %
0000004b : 00028283;   % 781: 		lb t0, 0(t0) %
0000004c : 00200313;   % 782: 		li t1, 2 %
0000004d : 02628463;   % 783: 		beq t0, t1, PRINT_BOSS_VIDA %
0000004e : ff2002b7;   % 784: 		li t0, 0xFF200604       	# Carrega em t0 o endere o de troca de frame %
0000004f : 60428293;   % 784:  %
00000050 : 0082a023;   % 785:     		sw s0, 0(t0)            	# Mostra o sprite pronto para o usu rio %
00000051 : 0fc25297;   % 786:     		la t0, MAPA %
00000052 : c9e28293;   % 786:  %
00000053 : 00028283;   % 787: 		lb t0, 0(t0) %
00000054 : 00300313;   % 788: 		li t1, 3 %
00000055 : 04628063;   % 789: 		beq t0, t1, FIM_DO_JOGO %
00000056 : ed9ff06f;   % 790:     		j GAME_LOOP %
00000057 : 0fc25297;   % 792: 		la t0, VIDA_BOSS %
00000058 : cf228293;   % 792:  %
00000059 : 00029283;   % 793: 		lh t0, 0(t0) %
0000005a : 00500533;   % 794:     		mv a0, t0 %
0000005b : 06500893;   % 795: 		li a7,101			 %
0000005c : 0c800593;   % 796: 		li a1,200 %
0000005d : 00000613;   % 797: 		li a2,0 %
0000005e : 03800693;   % 798: 		li a3,0x0038 %
0000005f : 00800733;   % 799: 		mv a4, s0			 %
00000060 : 00000073;   % 800: 		ecall %
00000061 : ff2002b7;   % 803:     		li t0, 0xFF200604       	# Carrega em t0 o endere o de troca de frame %
00000062 : 60428293;   % 803:  %
00000063 : 0082a023;   % 804:     		sw s0, 0(t0)            	# Mostra o sprite pronto para o usu rio %
00000064 : ea1ff06f;   % 806:     		j GAME_LOOP			# volta ao Loop	 %
00000065 : 00000317;   % 809:     		call KEY2.1   %
00000066 : 6f4300e7;   % 809:  %
00000067 : 0fc10517;   % 810: 		la a0, GATO %
00000068 : e6450513;   % 810:  %
00000069 : 000005b3;   % 811: 		mv a1, zero %
0000006a : 00000633;   % 812: 		mv a2, zero %
0000006b : 008006b3;   % 813: 		mv a3, s0 %
0000006c : 3dc000ef;   % 814: 		jal PRINT %
0000006d : 00144413;   % 815: 		xori s0, s0, 1          	# Inverte o valor do frame atual (somente o registrador) %
0000006e : ff2002b7;   % 816: 		li t0, 0xFF200604       	# Carrega em t0 o endere o de troca de frame %
0000006f : 60428293;   % 816:  %
00000070 : 0082a023;   % 817:     		sw s0, 0(t0)            	# Mostra o sprite pronto para o usu rio %
00000071 : fd1ff06f;   % 818:     		j FIM_DO_JOGO	 %
00000072 : ffec9383;   % 821: 		lh t2, -2(s9)			# duracao da nota anterior %
00000073 : 007d5463;   % 822: 		bge s10, t2, NEXT_NOTE		# caso o tempo for maior que a duracao da nota anterior va para proxima nota %
00000074 : 00008067;   % 823: 		ret				# retorna %
00000075 : 000c9503;   % 826: 		lh a0, 0(s9)            	# Carrega a nota atual em a0 %
00000076 : 002c9583;   % 827:     		lh a1, 2(s9)			# Duracao da nota %
00000077 : 00000613;   % 828:     		li a2, 0                	# Define o instrumento %
00000078 : 03200693;   % 829:     		li a3, 50              		# Define o volume %
00000079 : 01f00893;   % 830:     		li a7, 31               	# Define a syscall para tocar a nota %
0000007a : 00000073;   % 831:     		ecall                   	# Toca a nota %
0000007b : 004c8c93;   % 832:    		addi s9, s9, 4          	# Avanca para a proxima nota (cada entrada e 4 bytes) %
0000007c : c0102df3;   % 833:     		csrr s11, time          	# Le o tempo atual do registrador de tempo %
0000007d : 0fc25297;   % 834:     		la t0, CONTADOR			# endereco do contador %
0000007e : 8be28293;   % 834:  %
0000007f : 00029303;   % 835:     		lh t1, 0(t0)			# carrega o contador  %
00000080 : 00130313;   % 836:     		addi t1, t1, 1			# adiciona 1 ao contador %
00000081 : 00629023;   % 837:     		sh t1, 0(t0)			# salva no endereco o contador atualizado %
00000082 : 00029283;   % 838:     		lh t0, 0(t0)			# carrega o contador %
00000083 : 0fc25317;   % 839:     		la t1, NUMERO_NOTAS		# endereco do total de notas da musica %
00000084 : 8a430313;   % 839:  %
00000085 : 00031303;   % 840:     		lh t1, 0(t1)			# carrega o numero total de notas %
00000086 : 0062d463;   % 841:     		bge t0, t1, END_MUSIC		# if t0 == t1, END_MUSIC %
00000087 : 00008067;   % 842:     		ret                     	# Retorna para o chamador %
00000088 : 0fc25c97;   % 845:     		la s9, NOTAS			# reinicia as notas  %
00000089 : 894c8c93;   % 845:  %
0000008a : 0fc25297;   % 846:     		la t0, CONTADOR			# endereco do contador %
0000008b : 88a28293;   % 846:  %
0000008c : 00029023;   % 847:     		sh zero, 0(t0)			# zera o contador %
0000008d : 00000393;   % 848:     		li t2, 0			# duracao da nota inicial %
0000008e : c0102df3;   % 849:     		csrr s11, time			# atualiza o tempo "inicial" %
0000008f : 00008067;   % 850: 		ret				# Retorna  %
00000090 : 0fc25297;   % 853: 		la t0, RA_print_matriz		 %
00000091 : b9c28293;   % 853:  %
00000092 : 0012a023;   % 854: 		sw ra, 0(t0) %
00000093 : 0fc25297;   % 855: 		la t0, POS_MAPA			#posicao do mapa %
00000094 : b9428293;   % 855:  %
00000095 : 00029303;   % 856: 		lh t1, 0(t0)			#valor da posicao do mapa %
00000096 : 0fc23497;   % 857: 		la s1, mapa_teste_153		#carrega o endereco do background %
00000097 : 9b048493;   % 857:  %
00000098 : 01400913;   % 858: 		li s2, 20			#(QUANTIDADE DE BLOCOS NA HORIZONTAL QUE SER O RENDERIZADOS) %
00000099 : 00190913;   % 859: 		addi s2, s2, 1 %
0000009a : 0044a983;   % 860: 		lw s3, 4(s1)			#(QUANTIDADE DE BLOCOS NA VERTICAL QUE SER O RENDERIZADOS) %
0000009b : 00848493;   % 861: 		addi s1, s1, 8			#pula a largura e a altura %
0000009c : 006484b3;   % 862: 		add s1, s1, t1			#NOVA POSICAO DO MAPA %
0000009d : 00100a93;   % 863: 		li s5, 1			#s5 = 1 %
0000009e : 00100b13;   % 864: 		li s6, 1			#s6 = 1 %
0000009f : 000005b3;   % 865: 		mv a1, zero			#a1 = 0 %
000000a0 : 00000633;   % 866: 		mv a2, zero			#a2 = 0 %
000000a1 : 004000ef;   % 867: 		jal PULAR_COLUNA %
000000a2 : 012a8463;   % 869: PULAR_COLUNA:	beq s5, s2, PULAR_LINHA 	#s5 = s2 ? caso sim pule para caso_1 %
000000a3 : 01c000ef;   % 870: 		jal CASE1			#caso n o pule para iteracoes %
000000a4 : 08548493;   % 872: PULAR_LINHA:	addi s1, s1, 133		#PULA OS BLOCOS QUE N O DEVEM SER IMPRESSOS, OU SEJA, PULA A LINHA %
000000a5 : 2f3b0463;   % 873: 		beq s6, s3, END			#s6 = s3 ? caso sim pule para end %
000000a6 : 001b0b13;   % 874: 		addi s6, s6, 1			#s6 += 1 %
000000a7 : 00100a93;   % 875: 		li s5, 1			#s5 = 1 %
000000a8 : 00f60613;   % 876: 		addi a2, a2, 15			#a2 += 39 %
000000a9 : 0040006f;   % 877: 		j CASE1 %
000000aa : 00048a03;   % 879: CASE1:		lb s4, 0(s1)			#guarda os bytes de background em s4 %
000000ab : 00000293;   % 880: 		li t0, 0			#t0 = 0 %
000000ac : 025a1063;   % 881: 		bne s4, t0, CASE2		#se s7 != s4 %
000000ad : 0fc23517;   % 882: 		la a0, mini_black		#carrega em a0 o endereco de black %
000000ae : 56c50513;   % 882:  %
000000af : 2d0000ef;   % 883: 		jal PRINT			#pula pro PRINT %
000000b0 : 01058593;   % 884: 		addi a1, a1, 16			#a1 += 40	 %
000000b1 : 00148493;   % 885: 		addi s1, s1, 1			#s1 += 1 %
000000b2 : 001a8a93;   % 886: 		addi s5, s5, 1			#s5 += 1 %
000000b3 : fbdff06f;   % 887: 		j PULAR_COLUNA	 %
000000b4 : 00100293;   % 889: CASE2:		li t0, 1			#t0 = 1 %
000000b5 : 025a1063;   % 890: 		bne s4, t0, CASE3		#se s7 != s4 %
000000b6 : 0fc23517;   % 891: 		la a0, quadrado_2_255		#a0 = endereco da tile gray %
000000b7 : 23050513;   % 891:  %
000000b8 : 2ac000ef;   % 892: 		jal PRINT		 %
000000b9 : 01058593;   % 893: 		addi a1, a1, 16			#a1 += 40	 %
000000ba : 00148493;   % 894: 		addi s1, s1, 1			#s1 += 1 %
000000bb : 001a8a93;   % 895: 		addi s5, s5, 1			#s5 += 1 %
000000bc : f99ff06f;   % 896: 		j PULAR_COLUNA %
000000bd : 00600293;   % 899: 		li t0, 6			#t0 = 2 %
000000be : 045a1463;   % 900: 		bne s4, t0, CASE4		#if s4 == t0, CASE4 %
000000bf : 00100293;   % 901: 		li t0, 1			#t0 = 1 %
000000c0 : 005472b3;   % 902: 		and t0, s0, t0			#t0 = t0 and s7 %
000000c1 : 02028063;   % 903: 		beq t0, zero, CASE3_2		#if a3 == t0, CASE3_2 %
000000c2 : 0fc24517;   % 904: 		la a0, boneco_parado_baixo_54	#carrega endereco da tile red  %
000000c3 : a4050513;   % 904:  %
000000c4 : 27c000ef;   % 905: 		jal PRINT			 %
000000c5 : 01058593;   % 906: 		addi a1, a1, 16			#a1 += 40	 %
000000c6 : 00148493;   % 907: 		addi s1, s1, 1			#s1 += 1 %
000000c7 : 001a8a93;   % 908: 		addi s5, s5, 1			#s5 += 1 %
000000c8 : f69ff06f;   % 909: 		j PULAR_COLUNA %
000000c9 : 0fc24517;   % 911: 		la a0, boneco_move_baixo	#carrega endereco da tile amarela %
000000ca : b2c50513;   % 911:  %
000000cb : 260000ef;   % 912: 		jal PRINT %
000000cc : 01058593;   % 913: 		addi a1, a1, 16			#a1 += 40 %
000000cd : 00148493;   % 914: 		addi s1, s1, 1			#s1 += 1 %
000000ce : 001a8a93;   % 915: 		addi s5, s5, 1			#s5 += 1 %
000000cf : f4dff06f;   % 916: 		j PULAR_COLUNA %
000000d0 : 00500293;   % 919: 		li t0, 5			#t0 = 2 %
000000d1 : 025a1063;   % 920: 		bne s4, t0, CASE5		#if s4 == t0, CASE4 %
000000d2 : 0fc24517;   % 921: 		la a0, boneco_parado_cima_55	#carrega endereco da tile red  %
000000d3 : 8f850513;   % 921:  %
000000d4 : 23c000ef;   % 922: 		jal PRINT			 %
000000d5 : 01058593;   % 923: 		addi a1, a1, 16			#a1 += 40	 %
000000d6 : 00148493;   % 924: 		addi s1, s1, 1			#s1 += 1 %
000000d7 : 001a8a93;   % 925: 		addi s5, s5, 1			#s5 += 1 %
000000d8 : f29ff06f;   % 926: 		j PULAR_COLUNA %
000000d9 : 00700293;   % 929: 		li t0, 7			#t0 = 2 %
000000da : 065a1663;   % 930: 		bne s4, t0, CASE6		#if s4 == t0, CASE4 %
000000db : 00100293;   % 931: 		li t0, 1			#t0 = 1 %
000000dc : 005472b3;   % 932: 		and t0, s0, t0			#t0 = t0 and s7 %
000000dd : 02028063;   % 933: 		beq t0, zero, CASE5_1		#if a3 == t0, CASE3_2 %
000000de : 0fc23517;   % 934: 		la a0, bolinha_1		#carrega endereco da tile red  %
000000df : 5b050513;   % 934:  %
000000e0 : 20c000ef;   % 935: 		jal PRINT			 %
000000e1 : 01058593;   % 936: 		addi a1, a1, 16			#a1 += 40	 %
000000e2 : 00148493;   % 937: 		addi s1, s1, 1			#s1 += 1 %
000000e3 : 001a8a93;   % 938: 		addi s5, s5, 1			#s5 += 1 %
000000e4 : ef9ff06f;   % 939: 		j PULAR_COLUNA %
000000e5 : 00200313;   % 942: 		li t1, 2 %
000000e6 : 026b8063;   % 943: 		beq s7, t1, CASE5_2		#if a3 == t0, CASE3_2 %
000000e7 : 0fc23517;   % 944: 		la a0, bolinha_2		#carrega endereco da tile red  %
000000e8 : 69450513;   % 944:  %
000000e9 : 1e8000ef;   % 945: 		jal PRINT			 %
000000ea : 01058593;   % 946: 		addi a1, a1, 16			#a1 += 40	 %
000000eb : 00148493;   % 947: 		addi s1, s1, 1			#s1 += 1 %
000000ec : 001a8a93;   % 948: 		addi s5, s5, 1			#s5 += 1 %
000000ed : ed5ff06f;   % 949: 		j PULAR_COLUNA %
000000ee : 0fc23517;   % 952: 		la a0, bolinha_3		#carrega endereco da tile red  %
000000ef : 78050513;   % 952:  %
000000f0 : 1cc000ef;   % 953: 		jal PRINT			 %
000000f1 : 01058593;   % 954: 		addi a1, a1, 16			#a1 += 40	 %
000000f2 : 00148493;   % 955: 		addi s1, s1, 1			#s1 += 1 %
000000f3 : 001a8a93;   % 956: 		addi s5, s5, 1			#s5 += 1 %
000000f4 : eb9ff06f;   % 957: 		j PULAR_COLUNA %
000000f5 : 00300293;   % 960: 		li t0, 3			#t0 = 2 %
000000f6 : 025a1063;   % 961: 		bne s4, t0, CASE7		#if s4 == t0, CASE4 %
000000f7 : 0fc24517;   % 962: 		la a0, fogo_31 			#carrega endereco da tile red  %
000000f8 : 0a450513;   % 962:  %
000000f9 : 1a8000ef;   % 963: 		jal PRINT			 %
000000fa : 01058593;   % 964: 		addi a1, a1, 16			#a1 += 40	 %
000000fb : 00148493;   % 965: 		addi s1, s1, 1			#s1 += 1 %
000000fc : 001a8a93;   % 966: 		addi s5, s5, 1			#s5 += 1 %
000000fd : e95ff06f;   % 967: 		j PULAR_COLUNA %
000000fe : 00800293;   % 970: 		li t0, 8			#t0 = 2 %
000000ff : 025a1063;   % 971: 		bne s4, t0, CASE8		#if s4 == t0, CASE4 %
00000100 : 0fc24517;   % 972: 		la a0, fireball_1 		#carrega endereco da tile red  %
00000101 : f7850513;   % 972:  %
00000102 : 184000ef;   % 973: 		jal PRINT			 %
00000103 : 01058593;   % 974: 		addi a1, a1, 16			#a1 += 40	 %
00000104 : 00148493;   % 975: 		addi s1, s1, 1			#s1 += 1 %
00000105 : 001a8a93;   % 976: 		addi s5, s5, 1			#s5 += 1 %
00000106 : e71ff06f;   % 977: 		j PULAR_COLUNA %
00000107 : 00d00293;   % 980: 		li t0, 13			#t0 = 2 %
00000108 : 025a1063;   % 981: 		bne s4, t0, CASE9		#if s4 == t0, CASE4 %
00000109 : 0fc24517;   % 982: 		la a0, boneco_cima_voltando_13 	#carrega endereco da tile red  %
0000010a : c3c50513;   % 982:  %
0000010b : 160000ef;   % 983: 		jal PRINT			 %
0000010c : 01058593;   % 984: 		addi a1, a1, 16			#a1 += 40	 %
0000010d : 00148493;   % 985: 		addi s1, s1, 1			#s1 += 1 %
0000010e : 001a8a93;   % 986: 		addi s5, s5, 1			#s5 += 1 %
0000010f : e4dff06f;   % 987: 		j PULAR_COLUNA	 %
00000110 : 00e00293;   % 990: 		li t0, 14			#t0 = 2 %
00000111 : 025a1063;   % 991: 		bne s4, t0, CASE10		#if s4 == t0, CASE4 %
00000112 : 0fc24517;   % 992: 		la a0, boneco_baixo_voltando_14 #carrega endereco da tile red  %
00000113 : d2050513;   % 992:  %
00000114 : 13c000ef;   % 993: 		jal PRINT			 %
00000115 : 01058593;   % 994: 		addi a1, a1, 16			#a1 += 40	 %
00000116 : 00148493;   % 995: 		addi s1, s1, 1			#s1 += 1 %
00000117 : 001a8a93;   % 996: 		addi s5, s5, 1			#s5 += 1 %
00000118 : e29ff06f;   % 997: 		j PULAR_COLUNA %
00000119 : 06400293;   % 1000: 		li t0, 100			#t0 = 2 %
0000011a : 025a1063;   % 1001: 		bne s4, t0, CASE11		#if s4 == t0, CASE4 %
0000011b : 0fc24517;   % 1002: 		la a0, mini_blue 		#carrega endereco da tile red  %
0000011c : 11c50513;   % 1002:  %
0000011d : 118000ef;   % 1003: 		jal PRINT			 %
0000011e : 01058593;   % 1004: 		addi a1, a1, 16			#a1 += 40	 %
0000011f : 00148493;   % 1005: 		addi s1, s1, 1			#s1 += 1 %
00000120 : 001a8a93;   % 1006: 		addi s5, s5, 1			#s5 += 1 %
00000121 : e05ff06f;   % 1007: 		j PULAR_COLUNA	 %
00000122 : 01b00293;   % 1010: 		li t0, 27			#t0 = 2 %
00000123 : 025a1063;   % 1011: 		bne s4, t0, CASE12		#if s4 == t0, CASE4 %
00000124 : 0fc23517;   % 1012: 		la a0, bala 			#carrega endereco da tile red  %
00000125 : 28850513;   % 1012:  %
00000126 : 0f4000ef;   % 1013: 		jal PRINT			 %
00000127 : 01058593;   % 1014: 		addi a1, a1, 16			#a1 += 40	 %
00000128 : 00148493;   % 1015: 		addi s1, s1, 1			#s1 += 1 %
00000129 : 001a8a93;   % 1016: 		addi s5, s5, 1			#s5 += 1 %
0000012a : de1ff06f;   % 1017: 		j PULAR_COLUNA	 %
0000012b : 01400293;   % 1020: 		li t0, 20			#t0 = 2 %
0000012c : 025a1063;   % 1021: 		bne s4, t0, CASE13		#if s4 == t0, CASE4 %
0000012d : 0fc24517;   % 1022: 		la a0, laser 			#carrega endereco da tile red  %
0000012e : 1dc50513;   % 1022:  %
0000012f : 0d0000ef;   % 1023: 		jal PRINT			 %
00000130 : 01058593;   % 1024: 		addi a1, a1, 16			#a1 += 40	 %
00000131 : 00148493;   % 1025: 		addi s1, s1, 1			#s1 += 1 %
00000132 : 001a8a93;   % 1026: 		addi s5, s5, 1			#s5 += 1 %
00000133 : dbdff06f;   % 1027: 		j PULAR_COLUNA %
00000134 : 03c00293;   % 1030: 		li t0, 60			#t0 = 2 %
00000135 : 025a1063;   % 1031: 		bne s4, t0, CASE14		#if s4 == t0, CASE4 %
00000136 : 0fc23517;   % 1032: 		la a0, mini_yellow 		#carrega endereco da tile red  %
00000137 : 13850513;   % 1032:  %
00000138 : 0ac000ef;   % 1033: 		jal PRINT			 %
00000139 : 01058593;   % 1034: 		addi a1, a1, 16			#a1 += 40	 %
0000013a : 00148493;   % 1035: 		addi s1, s1, 1			#s1 += 1 %
0000013b : 001a8a93;   % 1036: 		addi s5, s5, 1			#s5 += 1 %
0000013c : d99ff06f;   % 1037: 		j PULAR_COLUNA %
0000013d : 03d00293;   % 1040: 		li t0, 61			#t0 = 2 %
0000013e : 025a1063;   % 1041: 		bne s4, t0, CASE15		#if s4 == t0, CASE4 %
0000013f : 0fc24517;   % 1042: 		la a0, mini_red 		#carrega endereco da tile red  %
00000140 : 29c50513;   % 1042:  %
00000141 : 088000ef;   % 1043: 		jal PRINT			 %
00000142 : 01058593;   % 1044: 		addi a1, a1, 16			#a1 += 40	 %
00000143 : 00148493;   % 1045: 		addi s1, s1, 1			#s1 += 1 %
00000144 : 001a8a93;   % 1046: 		addi s5, s5, 1			#s5 += 1 %
00000145 : d75ff06f;   % 1047: 		j PULAR_COLUNA %
00000146 : 02c00293;   % 1050: 		li t0, 44			#t0 = 2 %
00000147 : 025a1063;   % 1051: 		bne s4, t0, CASE16		#if s4 == t0, CASE4 %
00000148 : 0fc24517;   % 1052: 		la a0, item_energy 		#carrega endereco da tile red  %
00000149 : 38050513;   % 1052:  %
0000014a : 064000ef;   % 1053: 		jal PRINT			 %
0000014b : 01058593;   % 1054: 		addi a1, a1, 16			#a1 += 40	 %
0000014c : 00148493;   % 1055: 		addi s1, s1, 1			#s1 += 1 %
0000014d : 001a8a93;   % 1056: 		addi s5, s5, 1			#s5 += 1 %
0000014e : d51ff06f;   % 1057: 		j PULAR_COLUNA %
0000014f : 01c00293;   % 1060: 		li t0, 28			#t0 = 2 %
00000150 : 025a1063;   % 1061: 		bne s4, t0, CASE17		#if s4 == t0, CASE4 %
00000151 : 0fc24517;   % 1062: 		la a0, feixeazul 		#carrega endereco da tile red  %
00000152 : 46450513;   % 1062:  %
00000153 : 040000ef;   % 1063: 		jal PRINT			 %
00000154 : 01058593;   % 1064: 		addi a1, a1, 16			#a1 += 40	 %
00000155 : 00148493;   % 1065: 		addi s1, s1, 1			#s1 += 1 %
00000156 : 001a8a93;   % 1066: 		addi s5, s5, 1			#s5 += 1 %
00000157 : d2dff06f;   % 1067: 		j PULAR_COLUNA					 %
00000158 : 0fc24517;   % 1070: 		la a0, cogumelo_tamanho_7	#carrega endereco da tile azul %
00000159 : d1050513;   % 1070:  %
0000015a : 024000ef;   % 1071: 		jal PRINT			 %
0000015b : 01058593;   % 1072: 		addi a1, a1, 16			#a1 += 40 %
0000015c : 00148493;   % 1073: 		addi s1, s1, 1			#s1 += 1 %
0000015d : 001a8a93;   % 1074: 		addi s5, s5, 1			#s5 += 1 %
0000015e : d11ff06f;   % 1075: 		j PULAR_COLUNA %
0000015f : 0fc25297;   % 1078: 		la t0, RA_print_matriz		#carrega endereco do return adress da funcao_print_matriz %
00000160 : 86028293;   % 1078:  %
00000161 : 0002a083;   % 1079: 		lw ra, 0(t0)			#carrega o ra %
00000162 : 00008067;   % 1080: 		ret %
00000163 : 000012b7;   % 1082: PRINT:		li t0,0xFF0			# carrega 0xFF0 em t0 %
00000164 : ff028293;   % 1082:  %
00000165 : 00d282b3;   % 1083: 		add t0,t0,a3			# adiciona o frame ao FF0 (se o frame for 1 vira FF1, se for 0 fica FF0) %
00000166 : 01429293;   % 1084: 		slli t0,t0,20			# shift de 20 bits pra esquerda (0xFF0 vira 0xFF000000, 0xFF1 vira 0xFF100000) %
00000167 : 00b282b3;   % 1086: 		add t0,t0,a1			# adiciona x ao t0 %
00000168 : 14000313;   % 1088: 		li t1,320			# t1 = 320 %
00000169 : 02c30333;   % 1089: 		mul t1,t1,a2			# t1 = 320 * y %
0000016a : 006282b3;   % 1090: 		add t0,t0,t1			# adiciona t1 ao t0 %
0000016b : 00850313;   % 1092: 		addi t1,a0,8			# t1 = a0 + 8 %
0000016c : 000003b3;   % 1094: 		mv t2,zero			# zera t2 %
0000016d : 00000e33;   % 1095: 		mv t3,zero			# zera t3 %
0000016e : 00052e83;   % 1097: 		lw t4,0(a0)			# carrega a largura em t4 %
0000016f : 00452f03;   % 1098: 		lw t5,4(a0)			# carrega a altura em t5 %
00000170 : 00032f83;   % 1100: PRINT_LINHA:	lw t6,0(t1)			# carrega em t6 uma word (4 pixeis) da imagem %
00000171 : 01f2a023;   % 1101: 		sw t6,0(t0)			# imprime no bitmap a word (4 pixeis) da imagem %
00000172 : 00428293;   % 1103: 		addi t0,t0,4			# incrementa endereco do bitmap %
00000173 : 00430313;   % 1104: 		addi t1,t1,4			# incrementa endereco da imagem %
00000174 : 004e0e13;   % 1106: 		addi t3,t3,4			# incrementa contador de coluna %
00000175 : ffde46e3;   % 1107: 		blt t3,t4,PRINT_LINHA		# se contador da coluna < largura, continue imprimindo %
00000176 : 14028293;   % 1109: 		addi t0,t0,320			# t0 += 320 %
00000177 : 41d282b3;   % 1110: 		sub t0,t0,t4			# t0 -= largura da imagem %
00000178 : 00000e33;   % 1113: 		mv t3,zero			# zera t3 (contador de coluna) %
00000179 : 00138393;   % 1114: 		addi t2,t2,1			# incrementa contador de linha %
0000017a : fde3cce3;   % 1115: 		bgt t5,t2,PRINT_LINHA		# se altura > contador de linha, continue imprimindo %
0000017b : 000002b3;   % 1117: 		mv t0, zero %
0000017c : 00000333;   % 1118: 		mv t1, zero %
0000017d : 000003b3;   % 1119: 		mv t2, zero %
0000017e : 00000e33;   % 1120: 		mv t3, zero %
0000017f : 00000eb3;   % 1121: 		mv t4, zero %
00000180 : 00000f33;   % 1122: 		mv t5, zero %
00000181 : 00008067;   % 1123: 		ret				# retorna %
00000182 : 02800513;   % 1126: 		li a0, 40            	# Carrega a nota atual em a0 %
00000183 : 06400593;   % 1127:     		li a1, 100			# Duracao da nota %
00000184 : 00000613;   % 1128:     		li a2, 0                	# Define o instrumento %
00000185 : 0c800693;   % 1129:     		li a3, 200              		# Define o volume %
00000186 : 01f00893;   % 1130:     		li a7, 31               	# Define a syscall para tocar a nota %
00000187 : 00000073;   % 1131:     		ecall                   	# Toca a nota %
00000188 : 0fc25297;   % 1132: 		la t0, SHOOT %
00000189 : 82828293;   % 1132:  %
0000018a : 00028303;   % 1133: 		lb t1, 0(t0) %
0000018b : 00100393;   % 1134: 		li t2, 1 %
0000018c : 1e730663;   % 1135: 		beq t1, t2, FIM_ATIRAR %
0000018d : 00100313;   % 1136: 		li t1, 1 %
0000018e : 00628023;   % 1137: 		sb t1, 0(t0) %
0000018f : 0fc25297;   % 1138: 		la t0, PEQUENO_GRANDE %
00000190 : 80e28293;   % 1138:  %
00000191 : 00028283;   % 1139: 		lb t0, 0(t0) %
00000192 : 1c028a63;   % 1140: 		beq t0, zero, FIM_ATIRAR %
00000193 : 0fc24297;   % 1141: 		la t0, ESQUERDA_DIREITA %
00000194 : 7ac28293;   % 1141:  %
00000195 : 00028283;   % 1142: 		lb t0, 0(t0) %
00000196 : 0a028463;   % 1143: 		beq t0, zero, ATIRAR_ESQUERDA %
00000197 : 0fc22297;   % 1145: 		la t0, mapa_teste_153		#endereco do mini_background %
00000198 : 5ac28293;   % 1145:  %
00000199 : 00828293;   % 1146: 		addi t0, t0, 8			#pula a largura e a altura %
0000019a : 0fc24397;   % 1147: 		la t2, CHAR_POS_UP		#endereco de CHAR_POS %
0000019b : 78838393;   % 1147:  %
0000019c : 09900e13;   % 1148: 		li t3, 153			#carrega 4 em t3 %
0000019d : 00039e83;   % 1149: 		lh t4, 0(t2)			#carrega o y em t4 %
0000019e : 03ce8eb3;   % 1150: 		mul t4, t4, t3			#em qual linha o CHAR est  %
0000019f : 00239e03;   % 1151: 		lh t3, 2(t2)			#carrega o x em t3 %
000001a0 : 01ce8eb3;   % 1152: 		add t4, t4, t3			#em qual coluna o CHAR est  %
000001a1 : 01d282b3;   % 1154: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
000001a2 : 00128293;   % 1155: 		addi t0, t0, 1			#novo endereco do CHAR_POS na matriz %
000001a3 : 0fc24317;   % 1156: 		la t1, TIRO_POS %
000001a4 : 78030313;   % 1156:  %
000001a5 : 00532023;   % 1157: 		sw t0, 0(t1) %
000001a6 : 06300f13;   % 1159: 		li t5 99 %
000001a7 : 00028303;   % 1160: 		lb t1, 0(t0) %
000001a8 : 006f2533;   % 1161: 		slt a0, t5, t1 %
000001a9 : 0fc24597;   % 1162: 		la a1, MAPA %
000001aa : 73e58593;   % 1162:  %
000001ab : 00058603;   % 1163: 		lb a2, 0(a1) %
000001ac : 00c50633;   % 1164: 		add a2, a0, a2 %
000001ad : 00c58023;   % 1165: 		sb a2, 0(a1) %
000001ae : 00100f13;   % 1166: 		li t5, 1 %
000001af : 00028e03;   % 1167: 		lb t3, 0(t0) %
000001b0 : 15ee0e63;   % 1168: 		beq t3, t5, FIM_ATIRAR		#v  para GAME_LOOP %
000001b1 : 03c00f13;   % 1169: 		li t5, 60 %
000001b2 : 17ee0663;   % 1170: 		beq t3, t5, TIRO_BOSS %
000001b3 : 03d00f13;   % 1171: 		li t5, 61 %
000001b4 : 17ee0263;   % 1172: 		beq t3, t5, TIRO_BOSS %
000001b5 : 0fc24f17;   % 1173: 		la t5, ARMA %
000001b6 : 7aef0f13;   % 1173:  %
000001b7 : 004f1f03;   % 1174: 		lh t5, 4(t5) %
000001b8 : 01e28023;   % 1175: 		sb t5, 0(t0) %
000001b9 : 001b8b93;   % 1176: 		addi s7, s7, 1 %
000001ba : 0fc24f17;   % 1177: 		la t5, ARMA %
000001bb : 79af0f13;   % 1177:  %
000001bc : 000f1f03;   % 1178: 		lh t5, 0(t5) %
000001bd : 13eb8463;   % 1179: 		beq s7, t5, FIM_ATIRAR %
000001be : 00128293;   % 1180: 		addi t0, t0, 1 %
000001bf : f9dff06f;   % 1181: 		j LOOP %
000001c0 : 0fc22297;   % 1185: 		la t0, mapa_teste_153		#endereco do mini_background %
000001c1 : 50828293;   % 1185:  %
000001c2 : 00828293;   % 1186: 		addi t0, t0, 8			#pula a largura e a altura %
000001c3 : 0fc24397;   % 1187: 		la t2, CHAR_POS_UP		#endereco de CHAR_POS %
000001c4 : 6e438393;   % 1187:  %
000001c5 : 09900e13;   % 1188: 		li t3, 153			#carrega 4 em t3 %
000001c6 : 00039e83;   % 1189: 		lh t4, 0(t2)			#carrega o y em t4 %
000001c7 : 03ce8eb3;   % 1190: 		mul t4, t4, t3			#em qual linha o CHAR est  %
000001c8 : 00239e03;   % 1191: 		lh t3, 2(t2)			#carrega o x em t3 %
000001c9 : 01ce8eb3;   % 1192: 		add t4, t4, t3			#em qual coluna o CHAR est  %
000001ca : 01d282b3;   % 1193: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
000001cb : fff28293;   % 1194: 		addi t0, t0, -1			#novo endereco do CHAR_POS na matriz %
000001cc : 0fc24317;   % 1195: 		la t1, TIRO_POS %
000001cd : 6dc30313;   % 1195:  %
000001ce : 00532023;   % 1196: 		sw t0, 0(t1) %
000001cf : 00100f13;   % 1199: 		li t5, 1 %
000001d0 : 00028e03;   % 1200: 		lb t3, 0(t0) %
000001d1 : 0dee0c63;   % 1201: 		beq t3, t5, FIM_ATIRAR		#v  para GAME_LOOP %
000001d2 : 0fc24f17;   % 1202: 		la t5, ARMA %
000001d3 : 73af0f13;   % 1202:  %
000001d4 : 004f1f03;   % 1203: 		lh t5, 4(t5) %
000001d5 : 01e28023;   % 1204: 		sb t5, 0(t0) %
000001d6 : 001b8b93;   % 1205: 		addi s7, s7, 1 %
000001d7 : 0fc24f17;   % 1206: 		la t5, ARMA %
000001d8 : 726f0f13;   % 1206:  %
000001d9 : 000f1f03;   % 1207: 		lh t5, 0(t5) %
000001da : 0beb8a63;   % 1208: 		beq s7, t5, FIM_ATIRAR %
000001db : fff28293;   % 1209: 		addi t0, t0, -1 %
000001dc : fcdff06f;   % 1210: 		j LOOP2 %
000001dd : 0fc24297;   % 1213: 		la t0, TEMPO_ATUAL		#carrega o endereco do TEMPO_ATUAL %
000001de : 68828293;   % 1213:  %
000001df : 0002a283;   % 1214: 		lw t0, 0(t0)			#carrega o TEMPO_ATUAL %
000001e0 : 0fc24317;   % 1215: 		la t1, TIRO_RASTRO_COOLDOWN	#carrega o endereco do TEMPO_PARA_COMECAR_A_CAIR %
000001e1 : 68830313;   % 1215:  %
000001e2 : 00032303;   % 1216: 		lw t1, 0(t1)			#carrega o TEMPO_PARA_COMECAR_A_CAIR %
000001e3 : 406282b3;   % 1217: 		sub t0, t0, t1			#t0 = t0 - t1 %
000001e4 : 2bc00313;   % 1218: 		li t1, 700			#500 milesimos %
000001e5 : 0e535663;   % 1219: 		bge t1, t0, FIM_TIRO_RASTRO_2	#if t1 >= t0, FIM %
000001e6 : 0fc24297;   % 1220: 		la t0, SHOOT %
000001e7 : 6b028293;   % 1220:  %
000001e8 : 00028283;   % 1221: 		lb t0, 0(t0) %
000001e9 : 0c028463;   % 1222: 		beq t0, zero, FIM_TIRO_RASTRO %
000001ea : 0fc24297;   % 1223: 		la t0, TIRO_RASTRO_COOLDOWN %
000001eb : 66028293;   % 1223:  %
000001ec : c0102373;   % 1224: 		csrr t1, time %
000001ed : 0062a023;   % 1225: 		sw t1, 0(t0) %
000001ee : 0fc24297;   % 1226: 		la t0, TIRO_POS %
000001ef : 65428293;   % 1226:  %
000001f0 : 0002a283;   % 1227: 		lw t0, 0(t0) %
000001f1 : 00028303;   % 1228: 		lb t1, 0(t0) %
000001f2 : 00100393;   % 1230: 		li t2, 1 %
000001f3 : 00028303;   % 1231: 		lb t1, 0(t0) %
000001f4 : 08730e63;   % 1232: 		beq t1, t2, FIM_TIRO_RASTRO %
000001f5 : 03c00393;   % 1233: 		li t2, 60 %
000001f6 : 08730a63;   % 1234: 		beq t1, t2, FIM_TIRO_RASTRO %
000001f7 : 0fc24397;   % 1235: 		la t2, ARMA %
000001f8 : 6a638393;   % 1235:  %
000001f9 : 00239383;   % 1236: 		lh t2, 2(t2) %
000001fa : 087b8263;   % 1237: 		beq s7, t2, FIM_TIRO_RASTRO %
000001fb : 00000313;   % 1238: 		li t1, 0 %
000001fc : 00628023;   % 1239: 		sb t1,0(t0) %
000001fd : 0fc24f17;   % 1240: 		la t5, ESQUERDA_DIREITA %
000001fe : 604f0f13;   % 1240:  %
000001ff : 000f0f03;   % 1241: 		lb t5, 0(t5) %
00000200 : 000f0863;   % 1242: 		beq t5, zero, TIRO_RASTRO_ESQUERDA %
00000201 : 00128293;   % 1243: 		addi t0, t0, 1 %
00000202 : 001b8b93;   % 1244: 		addi s7, s7, 1 %
00000203 : fbdff06f;   % 1245: 		j LOOP3 %
00000204 : fff28293;   % 1247: 		addi t0, t0, -1 %
00000205 : 001b8b93;   % 1248: 		addi s7, s7, 1 %
00000206 : fb1ff06f;   % 1249: 		j LOOP3 %
00000207 : 0fc24297;   % 1252: 		la t0, TIRO_RASTRO_COOLDOWN %
00000208 : 5ec28293;   % 1252:  %
00000209 : c0102373;   % 1253: 		csrr t1, time %
0000020a : 0062a023;   % 1254: 		sw t1, 0(t0) %
0000020b : 00000bb3;   % 1255: 		mv s7, zero %
0000020c : 00008067;   % 1256: 		ret %
0000020d : 0fc24297;   % 1259: 		la t0, TIRO_RASTRO_COOLDOWN %
0000020e : 5d428293;   % 1259:  %
0000020f : c0102373;   % 1260: 		csrr t1, time %
00000210 : 0062a023;   % 1261: 		sw t1, 0(t0) %
00000211 : 00000bb3;   % 1262: 		mv s7, zero %
00000212 : 0fc24297;   % 1263: 		la t0, VIDA_BOSS %
00000213 : 60628293;   % 1263:  %
00000214 : 00029303;   % 1264: 		lh t1, 0(t0) %
00000215 : 0fc24f17;   % 1265: 		la t5, ARMA %
00000216 : 62ef0f13;   % 1265:  %
00000217 : 002f1f03;   % 1266: 		lh t5, 2(t5) %
00000218 : 01e30333;   % 1267: 		add t1, t1, t5 %
00000219 : 00629023;   % 1268: 		sh t1, 0(t0) %
0000021a : 00008067;   % 1269: 		ret %
0000021b : 0fc24297;   % 1272: 		la t0, SHOOT %
0000021c : 5dc28293;   % 1272:  %
0000021d : 00028023;   % 1273: 		sb zero, 0(t0) %
0000021e : 00000bb3;   % 1274: 		mv s7, zero %
0000021f : 00008067;   % 1275: 		ret %
00000220 : 00000bb3;   % 1277: 		mv s7, zero %
00000221 : 00008067;   % 1278: 		ret %
00000222 : ff200337;   % 1281: KEY2.1:		li t1,0xFF200000		# carrega o endereco de controle do KDMMIO %
00000223 : 00030313;   % 1281:  %
00000224 : 00032283;   % 1282: 		lw t0,0(t1)			# Le bit de Controle Teclado %
00000225 : 0012f293;   % 1283: 		andi t0,t0,0x0001		# mascara o bit menos significativo %
00000226 : 02028663;   % 1284:    		beq t0,zero,GRAVIDADE   	# Se nao ha tecla pressionada entao vai para FIM %
00000227 : 00432383;   % 1285:   		lw t2,4(t1)  			# le o valor da tecla tecla %
00000228 : 07700293;   % 1287: 		li t0,'w' %
00000229 : 08538e63;   % 1288: 		beq t2,t0,CIMA			# se tecla pressionada for 'w', va CHAR_CIMA %
0000022a : 06100293;   % 1290: 		li t0,'a' %
0000022b : 36538863;   % 1291: 		beq t2,t0,ESQUERDA		# se tecla pressionada for 'a', va CHAR_CIMA %
0000022c : 07300293;   % 1293: 		li t0,'s' %
0000022d : 1e538a63;   % 1294: 		beq t2,t0,BAIXO			# se tecla pressionada for 's', va CHAR_CIMA %
0000022e : 06400293;   % 1296: 		li t0,'d' %
0000022f : 4c538263;   % 1297: 		beq t2,t0,DIREITA		# se tecla pressionada for 'd', va CHAR_CIMA %
00000230 : 64c0006f;   % 1298: 		j METADE %
00000231 : 0fc24297;   % 1301: 		la t0, TEMPO_ATUAL		#carrega o endereco do TEMPO_ATUAL %
00000232 : 53828293;   % 1301:  %
00000233 : 0002a283;   % 1302: 		lw t0, 0(t0)			#carrega o TEMPO_ATUAL %
00000234 : 0fc24317;   % 1303: 		la t1, TEMPO_PARA_COMECAR_A_CAIR		#carrega o endereco do TEMPO_PARA_COMECAR_A_CAIR %
00000235 : 53030313;   % 1303:  %
00000236 : 00032303;   % 1304: 		lw t1, 0(t1)			#carrega o TEMPO_PARA_COMECAR_A_CAIR %
00000237 : 406282b3;   % 1305: 		sub t0, t0, t1			#t0 = t0 - t1 %
00000238 : 1f400313;   % 1306: 		li t1, 500			#500 milesimos %
00000239 : 36535ee3;   % 1307: 		bge t1, t0, FIM			#if t1 >= t0, FIM %
0000023a : 0fc24297;   % 1308: 		la t0, TEMPO_ATUAL %
0000023b : 51428293;   % 1308:  %
0000023c : 0002a283;   % 1309: 		lw t0, 0(t0) %
0000023d : 0fc24317;   % 1310: 		la t1, GRAVIDADE_COOLDOWN %
0000023e : 51030313;   % 1310:  %
0000023f : 00032303;   % 1311: 		lw t1, 0(t1) %
00000240 : 406282b3;   % 1312: 		sub t0, t0, t1 %
00000241 : 06400313;   % 1313: 		li t1, 100 %
00000242 : 34535ce3;   % 1314: 		bge t1, t0, FIM %
00000243 : c01022f3;   % 1315: 		csrr t0, time %
00000244 : 0fc24317;   % 1316: 		la t1, GRAVIDADE_COOLDOWN %
00000245 : 4f430313;   % 1316:  %
00000246 : 00532023;   % 1317: 		sw t0, 0(t1) %
00000247 : 0fc24297;   % 1318: 		la t0, VOANDO			#carrega o endereco do de voando em t0 %
00000248 : 53028293;   % 1318:  %
00000249 : 00028283;   % 1319: 		lb t0, 0(t0)			#carrega em t0 se esta voando ou nao %
0000024a : 32028ce3;   % 1320: 		beq t0, zero, FIM		#se nao estiver voando, FIM %
0000024b : 0fc24297;   % 1321: 		la t0, PEQUENO_GRANDE		#carrega o endereco do PEQUENO_GRANDE %
0000024c : 51e28293;   % 1321:  %
0000024d : 00028283;   % 1322: 		lb t0, 0(t0)			#carrega em t0 se esta pequeno ou grande %
0000024e : 06028ce3;   % 1323: 		beq t0, zero, BAIXO_s		#se esta pequeno va para BAIXO_B %
0000024f : 16c0006f;   % 1324: 		j BAIXO				#se esta grande %
00000250 : 0fc24297;   % 1327: 		la t0, W_LIMIT			#carrega o endereco do limitador do quanto pode subir %
00000251 : 50b28293;   % 1327:  %
00000252 : 00028283;   % 1328: 		lb t0, 0(t0)			#carrega em t0 o quanto subiu %
00000253 : 00400313;   % 1329: 		li t1, 4			#t1 = 2 %
00000254 : 306288e3;   % 1330: 		beq t0, t1, FIM			#if t0 == t1, FIM, ou seja, n o pode mais subir %
00000255 : 0fc24297;   % 1331: 		la t0, PEQUENO_GRANDE		#carrega o endereco de pequeno_grande %
00000256 : 4f628293;   % 1331:  %
00000257 : 00028283;   % 1332: 		lb t0, 0(t0)			#carrega em t0 se esta pequeno ou grande %
00000258 : 76028e63;   % 1333: 		beq t0, zero, CIMA_w		#if t0 == 0, esta pequeno %
00000259 : 0fc22297;   % 1335: 		la t0, mapa_teste_153		#endereco do mini_background %
0000025a : 2a428293;   % 1335:  %
0000025b : 00828293;   % 1336: 		addi t0, t0, 8			#pula a largura e a altura %
0000025c : 0fc24397;   % 1337: 		la t2, CHAR_POS_UP		#endereco de CHAR_POS_UP %
0000025d : 48038393;   % 1337:  %
0000025e : 09900e13;   % 1338: 		li t3, 153			#carrega 8 em t3 %
0000025f : 00039e83;   % 1339: 		lh t4, 0(t2)			#carrega o y em t4 %
00000260 : 03ce8eb3;   % 1340: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000261 : 00239e03;   % 1341: 		lh t3, 2(t2)			#carrega o x em t3 %
00000262 : 01ce8eb3;   % 1342: 		add t4, t4, t3			#em qual coluna o CHAR esta %
00000263 : 01d282b3;   % 1343: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
00000264 : f6728293;   % 1346: 		addi t0, t0, -153		#novo endereco do CHAR_POS na matriz %
00000265 : 00028e03;   % 1347: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
00000266 : 09928293;   % 1348: 		addi t0, t0, 153 %
00000267 : 00800f13;   % 1349: 		li t5, 8 %
00000268 : 25ee0663;   % 1350: 		beq t3, t5, METADE_MORTE %
00000269 : 00100f13;   % 1351: 		li t5, 1 %
0000026a : e9ee0463;   % 1352: 		beq t3, t5, GAME_LOOP		#v  para GAME_LOOP %
0000026b : fec10113;   % 1354: 		addi sp, sp, -20		#alocando pilha %
0000026c : 00512023;   % 1355: 		sw t0, 0(sp) %
0000026d : 00612223;   % 1356: 		sw t1, 4(sp) %
0000026e : 00712423;   % 1357: 		sw t2, 8(sp) %
0000026f : 01c12623;   % 1358: 		sw t3, 12(sp) %
00000270 : 01d12823;   % 1359: 		sw t4, 16(sp) %
00000271 : 0fc22297;   % 1362: 		la t0, mapa_teste_153		#endereco do mini_background %
00000272 : 24428293;   % 1362:  %
00000273 : 00828293;   % 1363: 		addi t0, t0, 8			#pula a largura e a altura %
00000274 : 0fc24397;   % 1364: 		la t2, CHAR_POS_DOWN		#endereco de CHAR_POS_UP %
00000275 : 42438393;   % 1364:  %
00000276 : 09900e13;   % 1365: 		li t3, 153			#carrega 8 em t3 %
00000277 : 00039e83;   % 1366: 		lh t4, 0(t2)			#carrega o y em t4 %
00000278 : 03ce8eb3;   % 1367: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000279 : 00239e03;   % 1368: 		lh t3, 2(t2)			#carrega o x em t3 %
0000027a : 01ce8eb3;   % 1369: 		add t4, t4, t3			#em qual coluna o CHAR est  %
0000027b : 01d282b3;   % 1372: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
0000027c : f6728293;   % 1373: 		addi t0, t0, -153		#novo endereco do CHAR_POS na matriz %
0000027d : 00028e03;   % 1374: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
0000027e : 09928293;   % 1375: 		addi t0, t0, 153 %
0000027f : 00800f13;   % 1376: 		li t5, 8 %
00000280 : 1fee0663;   % 1377: 		beq t3, t5, METADE_MORTE %
00000281 : 00100f13;   % 1378: 		li t5, 1 %
00000282 : e3ee0463;   % 1379: 		beq t3, t5, GAME_LOOP		#v  para GAME_LOOP %
00000283 : 00000e13;   % 1381: 		li t3, 0			#carrega 0 em t3 %
00000284 : 01c28023;   % 1382: 		sb t3, 0(t0)			#colocando 0 no endereco %
00000285 : ffc10113;   % 1383: 		addi sp, sp, -4 %
00000286 : 00112023;   % 1384: 		sw ra, 0(sp) %
00000287 : 00000317;   % 1385: 		call TESTA_ESQUERDA_DIREITA %
00000288 : 1d4300e7;   % 1385:  %
00000289 : 00012083;   % 1386: 		lw ra, 0(sp) %
0000028a : 00410113;   % 1387: 		addi sp, sp, 4 %
0000028b : f6728293;   % 1388: 		addi t0, t0, -153		#novo endereco do CHAR_POS na matriz %
0000028c : 01c28023;   % 1389: 		sb t3, 0(t0)			#colocando 2 no endereco %
0000028d : 00039e03;   % 1390: 		lh t3, 0(t2)			#carrega o y em t3 %
0000028e : fffe0e13;   % 1391: 		addi t3, t3, -1			#decrementa um em t3 %
0000028f : 01c39023;   % 1392: 		sh t3, 0(t2)			#novo CHAR_POS %
00000290 : 00012283;   % 1393: 		lw t0, 0(sp) %
00000291 : 00412303;   % 1394: 		lw t1, 4(sp) %
00000292 : 00812383;   % 1395: 		lw t2, 8(sp) %
00000293 : 00c12e03;   % 1396: 		lw t3, 12(sp) %
00000294 : 01012e83;   % 1397: 		lw t4, 16(sp) %
00000295 : 01410113;   % 1398: 		addi sp, sp, 20 %
00000296 : 01f00e33;   % 1399: 		mv t3, t6 %
00000297 : f6728293;   % 1400: 		addi t0, t0, -153		#novo endereco do CHAR_POS na matriz %
00000298 : 01c28023;   % 1401: 		sb t3, 0(t0)			#colocando 2 no endereco %
00000299 : 00039e03;   % 1402: 		lh t3, 0(t2)			#carrega o y em t3 %
0000029a : fffe0e13;   % 1403: 		addi t3, t3, -1			#decrementa um em t3 %
0000029b : 01c39023;   % 1404: 		sh t3, 0(t2)			#novo CHAR_POS %
0000029c : 0fc24297;   % 1405: 		la t0, VOANDO %
0000029d : 3dc28293;   % 1405:  %
0000029e : 00100313;   % 1406: 		li t1, 1 %
0000029f : 00628023;   % 1407: 		sb t1, 0(t0) %
000002a0 : c01022f3;   % 1408: 		csrr t0, time %
000002a1 : 0fc24317;   % 1409: 		la t1, TEMPO_PARA_COMECAR_A_CAIR %
000002a2 : 37c30313;   % 1409:  %
000002a3 : 00532023;   % 1410: 		sw t0, 0(t1) %
000002a4 : 0fc24297;   % 1411: 		la t0, W_LIMIT %
000002a5 : 3bb28293;   % 1411:  %
000002a6 : 00028303;   % 1412: 		lb t1, 0(t0) %
000002a7 : 00130313;   % 1413: 		addi t1, t1, 1 %
000002a8 : 00628023;   % 1414: 		sb t1, 0(t0) %
000002a9 : 1bd0006f;   % 1415: 		j FIM %
000002aa : 0fc24297;   % 1418: 		la t0, PEQUENO_GRANDE %
000002ab : 3a228293;   % 1418:  %
000002ac : 00028283;   % 1419: 		lb t0, 0(t0) %
000002ad : 12028a63;   % 1420: 		beq t0, zero, BAIXO_s_2 %
000002ae : 0fc22297;   % 1422: 		la t0, mapa_teste_153	#endereco do mini_background %
000002af : 15028293;   % 1422:  %
000002b0 : 00828293;   % 1423: 		addi t0, t0, 8		#pula a largura e a altura %
000002b1 : 0fc24397;   % 1424: 		la t2, CHAR_POS_UP	#endereco de CHAR_POS %
000002b2 : 32c38393;   % 1424:  %
000002b3 : 09900e13;   % 1425: 		li t3, 153		#carrega 8 em t3 %
000002b4 : 00039e83;   % 1426: 		lh t4, 0(t2)		#carrega o y em t4 %
000002b5 : 03ce8eb3;   % 1427: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000002b6 : 00239e03;   % 1428: 		lh t3, 2(t2)		#carrega o x em t3 %
000002b7 : 01ce8eb3;   % 1429: 		add t4, t4, t3		#em qual coluna o CHAR est  %
000002b8 : 01d282b3;   % 1432: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
000002b9 : 09928293;   % 1433: 		addi t0, t0, 153	#novo endereco do CHAR_POS na matriz %
000002ba : 00028e03;   % 1434: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
000002bb : f6728293;   % 1435: 		addi t0, t0, -153 %
000002bc : 00800f13;   % 1436: 		li t5, 8 %
000002bd : 0fee0c63;   % 1437: 		beq t3, t5, METADE_MORTE %
000002be : 00100f13;   % 1438: 		li t5, 1 %
000002bf : 0fee0463;   % 1440: 		beq t3, t5, RESET_COOLDOWN_2	#v  para GAME_LOOP %
000002c0 : fe810113;   % 1441: 		addi sp, sp, -24 %
000002c1 : 00112023;   % 1442: 		sw ra, 0(sp) %
000002c2 : 00512223;   % 1443: 		sw t0, 4(sp) %
000002c3 : 00612423;   % 1444: 		sw t1, 8(sp) %
000002c4 : 00712623;   % 1445: 		sw t2, 12(sp) %
000002c5 : 01c12823;   % 1446: 		sw t3, 16(sp) %
000002c6 : 01d12a23;   % 1447: 		sw t4, 20(sp) %
000002c7 : 0fc22297;   % 1450: 		la t0, mapa_teste_153		#endereco do mini_background %
000002c8 : 0ec28293;   % 1450:  %
000002c9 : 00828293;   % 1451: 		addi t0, t0, 8			#pula a largura e a altura %
000002ca : 0fc24397;   % 1452: 		la t2, CHAR_POS_DOWN		#endereco de CHAR_POS %
000002cb : 2cc38393;   % 1452:  %
000002cc : 09900e13;   % 1453: 		li t3, 153			#carrega 8 em t3 %
000002cd : 00039e83;   % 1454: 		lh t4, 0(t2)			#carrega o y em t4 %
000002ce : 03ce8eb3;   % 1455: 		mul t4, t4, t3			#em qual linha o CHAR est  %
000002cf : 00239e03;   % 1456: 		lh t3, 2(t2)			#carrega o x em t3 %
000002d0 : 01ce8eb3;   % 1457: 		add t4, t4, t3			#em qual coluna o CHAR est  %
000002d1 : 01d282b3;   % 1460: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
000002d2 : 09928293;   % 1461: 		addi t0, t0, 153		#novo endereco do CHAR_POS na matriz %
000002d3 : 00028e03;   % 1462: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
000002d4 : 00300f13;   % 1463: 		li t5, 3 			#t5 = 3 %
000002d5 : f6728293;   % 1464: 		addi t0, t0, -153 %
000002d6 : 09ee0a63;   % 1465: 		beq t3, t5, METADE_MORTE %
000002d7 : 00800f13;   % 1466: 		li t5, 8 %
000002d8 : 09ee0663;   % 1467: 		beq t3, t5, METADE_MORTE %
000002d9 : 00100f13;   % 1468: 		li t5, 1 %
000002da : 07ee0e63;   % 1469: 		beq t3, t5, RESET_COOLDOWN_2	#v  para GAME_LOO %
000002db : 09d000ef;   % 1470: 		jal ITEM_1 %
000002dc : 00000e13;   % 1472: 		li t3, 0		#carrega 0 em t3 %
000002dd : 01c28023;   % 1473: 		sb t3, 0(t0)		#colocando 0 no endereco %
000002de : ffc10113;   % 1474: 		addi sp, sp, -4 %
000002df : 00112023;   % 1475: 		sw ra, 0(sp) %
000002e0 : 00000317;   % 1476: 		call TESTA_ESQUERDA_DIREITA %
000002e1 : 070300e7;   % 1476:  %
000002e2 : 00012083;   % 1477: 		lw ra, 0(sp) %
000002e3 : 00410113;   % 1478: 		addi sp, sp, 4 %
000002e4 : 09928293;   % 1479: 		addi t0, t0, 153		#novo endereco do CHAR_POS na matriz %
000002e5 : 01c28023;   % 1480: 		sb t3, 0(t0)			#colocando 2 no endereco %
000002e6 : 00039e03;   % 1481: 		lh t3, 0(t2)			#carrega o y em t3 %
000002e7 : 001e0e13;   % 1482: 		addi t3, t3, 1			#decrementa um em t3 %
000002e8 : 01c39023;   % 1483: 		sh t3, 0(t2)			#novo CHAR_POS %
000002e9 : 00012083;   % 1484: 		lw ra, 0(sp) %
000002ea : 00412283;   % 1485: 		lw t0, 4(sp) %
000002eb : 00812303;   % 1486: 		lw t1, 8(sp) %
000002ec : 00c12383;   % 1487: 		lw t2, 12(sp) %
000002ed : 01012e03;   % 1488: 		lw t3, 16(sp) %
000002ee : 01412e83;   % 1489: 		lw t4, 20(sp) %
000002ef : 01810113;   % 1490: 		addi sp, sp, 24 %
000002f0 : 00000e13;   % 1491: 		li t3, 0			#carrega 0 em t3 %
000002f1 : 01c28023;   % 1492: 		sb t3, 0(t0)			#colocando 0 no endereco %
000002f2 : 01f00e33;   % 1493: 		mv t3, t6 %
000002f3 : 09928293;   % 1494: 		addi t0, t0, 153		#novo endereco do CHAR_POS na matriz %
000002f4 : 01c28023;   % 1495: 		sb t3, 0(t0)			#colocando 2 no endereco %
000002f5 : 00039e03;   % 1496: 		lh t3, 0(t2)			#carrega o y em t3 %
000002f6 : 001e0e13;   % 1497: 		addi t3, t3, 1			#decrementa um em t3 %
000002f7 : 01c39023;   % 1498: 		sh t3, 0(t2)			#novo CHAR_POS %
000002f8 : 0810006f;   % 1499: 		j FIM %
000002f9 : 0090006f;   % 1501: 		j RESET_COOLDOWN %
000002fa : 5c80006f;   % 1503: 		j BAIXO_s %
000002fb : 28d0006f;   % 1505: 		j MORTE	 %
000002fc : 0fc24f97;   % 1507: 		la t6, ESQUERDA_DIREITA %
000002fd : 208f8f93;   % 1507:  %
000002fe : 000f8f83;   % 1508: 		lb t6, 0(t6) %
000002ff : 01f00463;   % 1509: 		beq zero, t6, TA_PRA_ESQUERDA %
00000300 : 0100006f;   % 1510: 		j TA_PRA_DIREITA %
00000301 : 00e00e13;   % 1513: 		li t3, 14 %
00000302 : 00d00f93;   % 1514: 		li t6, 13 %
00000303 : 00008067;   % 1515: 		ret %
00000304 : 00600e13;   % 1518: 		li t3, 6 %
00000305 : 00500f93;   % 1519: 		li t6, 5 %
00000306 : 00008067;   % 1520: 		ret %
00000307 : 0fc24297;   % 1522: 		la t0, ESQUERDA_DIREITA %
00000308 : 1dc28293;   % 1522:  %
00000309 : 00028023;   % 1523: 		sb zero, 0(t0) %
0000030a : 0fc24297;   % 1524: 		la t0, PEQUENO_GRANDE %
0000030b : 22228293;   % 1524:  %
0000030c : 00028283;   % 1525: 		lb t0, 0(t0) %
0000030d : 60028863;   % 1526: 		beq t0, zero, ESQUERDA_a %
0000030e : 0fc22297;   % 1528: 		la t0, mapa_teste_153		#endereco do mini_background %
0000030f : fd028293;   % 1528:  %
00000310 : 00828293;   % 1529: 		addi t0, t0, 8			#pula a largura e a altura %
00000311 : 0fc24397;   % 1530: 		la t2, CHAR_POS_UP		#endereco de CHAR_POS %
00000312 : 1ac38393;   % 1530:  %
00000313 : 09900e13;   % 1531: 		li t3, 153			#carrega 4 em t3 %
00000314 : 00039e83;   % 1532: 		lh t4, 0(t2)			#carrega o y em t4 %
00000315 : 03ce8eb3;   % 1533: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000316 : 00239e03;   % 1534: 		lh t3, 2(t2)			#carrega o x em t3 %
00000317 : 01ce8eb3;   % 1535: 		add t4, t4, t3			#em qual coluna o CHAR est  %
00000318 : 01d282b3;   % 1538: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
00000319 : fff28293;   % 1539: 		addi t0, t0, -1			#novo endereco do CHAR_POS na matriz %
0000031a : 00028e03;   % 1540: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
0000031b : 00800f13;   % 1541: 		li t5, 8 %
0000031c : 21ee04e3;   % 1542: 		beq t3, t5, MORTE %
0000031d : 01400f13;   % 1543: 		li t5, 20 %
0000031e : 21ee00e3;   % 1544: 		beq t3, t5, MORTE %
0000031f : 00100f13;   % 1545: 		li t5, 1 %
00000320 : 00128293;   % 1546: 		addi t0, t0, 1 %
00000321 : bbee0663;   % 1548: 		beq t3, t5, GAME_LOOP		#v  para GAME_LOOP %
00000322 : fe810113;   % 1549: 		addi sp, sp, -24 %
00000323 : 00112023;   % 1550: 		sw ra, 0(sp) %
00000324 : 00512223;   % 1551: 		sw t0, 4(sp) %
00000325 : 00612423;   % 1552: 		sw t1, 8(sp) %
00000326 : 00712623;   % 1553: 		sw t2, 12(sp) %
00000327 : 01c12823;   % 1554: 		sw t3, 16(sp) %
00000328 : 01d12a23;   % 1555: 		sw t4, 20(sp) %
00000329 : 0fc22297;   % 1558: 		la t0, mapa_teste_153		#endereco do mini_background %
0000032a : f6428293;   % 1558:  %
0000032b : 00828293;   % 1559: 		addi t0, t0, 8			#pula a largura e a altura %
0000032c : 0fc24397;   % 1560: 		la t2, CHAR_POS_DOWN		#endereco de CHAR_POS %
0000032d : 14438393;   % 1560:  %
0000032e : 09900e13;   % 1561: 		li t3, 153			#carrega 4 em t3 %
0000032f : 00039e83;   % 1562: 		lh t4, 0(t2)			#carrega o y em t4 %
00000330 : 03ce8eb3;   % 1563: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000331 : 00239e03;   % 1564: 		lh t3, 2(t2)			#carrega o x em t3 %
00000332 : 01ce8eb3;   % 1565: 		add t4, t4, t3			#em qual coluna o CHAR est  %
00000333 : 01d282b3;   % 1568: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
00000334 : fff28293;   % 1569: 		addi t0, t0, -1			#novo endereco do CHAR_POS na matriz %
00000335 : 00028e03;   % 1570: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
00000336 : 00800f13;   % 1571: 		li t5, 8 %
00000337 : 19ee0ee3;   % 1572: 		beq t3, t5, MORTE %
00000338 : 00100f13;   % 1573: 		li t5, 1 %
00000339 : 00128293;   % 1574: 		addi t0, t0, 1 %
0000033a : b5ee0463;   % 1575: 		beq t3, t5, GAME_LOOP		#v  para GAME_LOOP %
0000033b : 00300f13;   % 1576: 		li t5, 3 %
0000033c : 718000ef;   % 1577: 		jal ITEM_1	 %
0000033d : 00000e13;   % 1579: 		li t3, 0			#carrega 0 em t3 %
0000033e : 01c28023;   % 1580: 		sb t3, 0(t0)			#colocando 0 no endereco %
0000033f : 00e00e13;   % 1581: 		li t3, 14			#carrega 2 em t3 %
00000340 : fff28293;   % 1582: 		addi t0, t0, -1			#novo endereco do CHAR_POS na matriz %
00000341 : 01c28023;   % 1583: 		sb t3, 0(t0)			#colocando 2 no endereco %
00000342 : 00239e03;   % 1584: 		lh t3, 2(t2)			#carrega o x em t3 %
00000343 : fffe0e13;   % 1585: 		addi t3, t3, -1			#decrementa um em t3 %
00000344 : 01c39123;   % 1586: 		sh t3, 2(t2)			#novo CHAR_POS %
00000345 : 00012083;   % 1587: 		lw ra, 0(sp) %
00000346 : 00412283;   % 1588: 		lw t0, 4(sp) %
00000347 : 00812303;   % 1589: 		lw t1, 8(sp) %
00000348 : 00c12383;   % 1590: 		lw t2, 12(sp) %
00000349 : 01012e03;   % 1591: 		lw t3, 16(sp) %
0000034a : 01412e83;   % 1592: 		lw t4, 20(sp) %
0000034b : 01810113;   % 1593: 		addi sp, sp, 24 %
0000034c : 00000e13;   % 1594: 		li t3, 0			#carrega 0 em t3 %
0000034d : 01c28023;   % 1595: 		sb t3, 0(t0)			#colocando 0 no endereco %
0000034e : 00d00e13;   % 1596: 		li t3, 13			#carrega 2 em t3 %
0000034f : fff28293;   % 1597: 		addi t0, t0, -1			#novo endereco do CHAR_POS na matriz %
00000350 : 01c28023;   % 1598: 		sb t3, 0(t0)			#colocando 2 no endereco %
00000351 : 00239e03;   % 1599: 		lh t3, 2(t2)			#carrega o x em t3 %
00000352 : fffe0e13;   % 1600: 		addi t3, t3, -1			#decrementa um em t3 %
00000353 : 01c39123;   % 1601: 		sh t3, 2(t2)			#novo CHAR_POS %
00000354 : 0fc24297;   % 1602: 		la t0, VOANDO %
00000355 : 0fc28293;   % 1602:  %
00000356 : 00100313;   % 1603: 		li t1, 1 %
00000357 : 00628023;   % 1604: 		sb t1, 0(t0) %
00000358 : 0fc24297;   % 1605: 		la t0, POS_MAPA			#endereco da posicao do mapa %
00000359 : 08028293;   % 1605:  %
0000035a : 00029303;   % 1606: 		lh t1, 0(t0)			#valor do endereco %
0000035b : 00000393;   % 1607: 		li t2, 0			#t2 = 0 %
0000035c : 6e730863;   % 1608: 		beq t1, t2, FIM			#se t1 == t2   porque esta na borda e o mapa nao pode ir mais pra esquerda %
0000035d : fff30313;   % 1609: 		addi t1, t1, -1			#caso contrario %
0000035e : 00629023;   % 1610: 		sh t1, 0(t0)			#salvando no endereco da posicao do mapa %
0000035f : 6e40006f;   % 1611: 		j FIM %
00000360 : 0fc24297;   % 1614: 		la t0, ESQUERDA_DIREITA %
00000361 : 07828293;   % 1614:  %
00000362 : 00100313;   % 1615: 		li t1, 1 %
00000363 : 00628023;   % 1616: 		sb t1, 0(t0) %
00000364 : 0fc24297;   % 1617: 		la t0, PEQUENO_GRANDE %
00000365 : 0ba28293;   % 1617:  %
00000366 : 00028283;   % 1618: 		lb t0, 0(t0) %
00000367 : 56028463;   % 1619: 		beq t0, zero, DIREITA_d %
00000368 : 0fc22297;   % 1621: 		la t0, mapa_teste_153		#endereco do mini_background %
00000369 : e6828293;   % 1621:  %
0000036a : 00828293;   % 1622: 		addi t0, t0, 8			#pula a largura e a altura %
0000036b : 0fc24397;   % 1623: 		la t2, CHAR_POS_UP		#endereco de CHAR_POS %
0000036c : 04438393;   % 1623:  %
0000036d : 09900e13;   % 1624: 		li t3, 153			#carrega 4 em t3 %
0000036e : 00039e83;   % 1625: 		lh t4, 0(t2)			#carrega o y em t4 %
0000036f : 03ce8eb3;   % 1626: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000370 : 00239e03;   % 1627: 		lh t3, 2(t2)			#carrega o x em t3 %
00000371 : 01ce8eb3;   % 1628: 		add t4, t4, t3			#em qual coluna o CHAR est  %
00000372 : 01d282b3;   % 1630: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
00000373 : 00128293;   % 1631: 		addi t0, t0, 1			#novo endereco do CHAR_POS na matriz %
00000374 : 00028e03;   % 1632: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
00000375 : 00800f13;   % 1633: 		li t5, 8 %
00000376 : 0bee00e3;   % 1634: 		beq t3, t5, MORTE %
00000377 : 01400f13;   % 1635: 		li t5, 20 %
00000378 : 09ee0ce3;   % 1636: 		beq t3, t5, MORTE %
00000379 : 00100f13;   % 1637: 		li t5, 1 %
0000037a : fff28293;   % 1638: 		addi t0, t0, -1 %
0000037b : 15ee0863;   % 1640: 		beq t3, t5, METADE_GAME_LOOP		#v  para GAME_LOOP %
0000037c : 03c00f13;   % 1641: 		li t5, 60 %
0000037d : 15ee0463;   % 1642: 		beq t3, t5, METADE_GAME_LOOP %
0000037e : 03d00f13;   % 1643: 		li t5, 61 %
0000037f : 15ee0063;   % 1644: 		beq t3, t5, METADE_GAME_LOOP %
00000380 : fe810113;   % 1645: 		addi sp, sp, -24 %
00000381 : 00112023;   % 1646: 		sw ra, 0(sp) %
00000382 : 00512223;   % 1647: 		sw t0, 4(sp) %
00000383 : 00612423;   % 1648: 		sw t1, 8(sp) %
00000384 : 00712623;   % 1649: 		sw t2, 12(sp) %
00000385 : 01c12823;   % 1650: 		sw t3, 16(sp) %
00000386 : 01d12a23;   % 1651: 		sw t4, 20(sp) %
00000387 : 0fc22297;   % 1654: 		la t0, mapa_teste_153		#endereco do mini_background %
00000388 : dec28293;   % 1654:  %
00000389 : 00828293;   % 1655: 		addi t0, t0, 8			#pula a largura e a altura %
0000038a : 0fc24397;   % 1656: 		la t2, CHAR_POS_DOWN		#endereco de CHAR_POS %
0000038b : fcc38393;   % 1656:  %
0000038c : 09900e13;   % 1657: 		li t3, 153			#carrega 4 em t3 %
0000038d : 00039e83;   % 1658: 		lh t4, 0(t2)			#carrega o y em t4 %
0000038e : 03ce8eb3;   % 1659: 		mul t4, t4, t3			#em qual linha o CHAR est  %
0000038f : 00239e03;   % 1660: 		lh t3, 2(t2)		#carrega o x em t3 %
00000390 : 01ce8eb3;   % 1661: 		add t4, t4, t3		#em qual coluna o CHAR est  %
00000391 : 01d282b3;   % 1663: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
00000392 : 00128293;   % 1664: 		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz %
00000393 : 00028e03;   % 1665: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
00000394 : 00800f13;   % 1666: 		li t5, 8 %
00000395 : 03ee02e3;   % 1667: 		beq t3, t5, MORTE %
00000396 : 00100f13;   % 1668: 		li t5, 1 %
00000397 : fff28293;   % 1669: 		addi t0, t0, -1 %
00000398 : 0dee0e63;   % 1670: 		beq t3, t5, METADE_GAME_LOOP	#v  para GAME_LOOP %
00000399 : 00300f13;   % 1671: 		li t5, 3 %
0000039a : 5a0000ef;   % 1672: 		jal ITEM_1 %
0000039b : 00900f13;   % 1673: 		li t5, 9 %
0000039c : 0dee0663;   % 1674: 		beq t3, t5, METADE_GAME_LOOP %
0000039d : 00000e13;   % 1675: 		li t3, 0		#carrega 0 em t3 %
0000039e : 01c28023;   % 1676: 		sb t3, 0(t0)		#colocando 0 no endereco %
0000039f : 00600e13;   % 1677: 		li t3, 6		#carrega 2 em t3 %
000003a0 : 00128293;   % 1678: 		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz %
000003a1 : 01c28023;   % 1679: 		sb t3, 0(t0)		#colocando 2 no endereco %
000003a2 : 00239e03;   % 1680: 		lh t3, 2(t2)		#carrega o x em t3 %
000003a3 : 001e0e13;   % 1681: 		addi t3, t3, 1		#decrementa um em t3 %
000003a4 : 01c39123;   % 1682: 		sh t3, 2(t2)		#novo CHAR_POS %
000003a5 : 00012083;   % 1683: 		lw ra, 0(sp) %
000003a6 : 00412283;   % 1684: 		lw t0, 4(sp) %
000003a7 : 00812303;   % 1685: 		lw t1, 8(sp) %
000003a8 : 00c12383;   % 1686: 		lw t2, 12(sp) %
000003a9 : 01012e03;   % 1687: 		lw t3, 16(sp) %
000003aa : 01412e83;   % 1688: 		lw t4, 20(sp) %
000003ab : 01810113;   % 1689: 		addi sp, sp, 24 %
000003ac : 00000e13;   % 1690: 		li t3, 0		#carrega 0 em t3 %
000003ad : 01c28023;   % 1691: 		sb t3, 0(t0)		#colocando 0 no endereco %
000003ae : 00500e13;   % 1692: 		li t3, 5		#carrega 2 em t3 %
000003af : 00128293;   % 1693: 		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz %
000003b0 : 01c28023;   % 1694: 		sb t3, 0(t0)		#colocando 2 no endereco %
000003b1 : 00239e03;   % 1695: 		lh t3, 2(t2)		#carrega o x em t3 %
000003b2 : 001e0e13;   % 1696: 		addi t3, t3, 1		#decrementa um em t3 %
000003b3 : 01c39123;   % 1697: 		sh t3, 2(t2)		#novo CHAR_POS %
000003b4 : 0fc24297;   % 1698: 		la t0, VOANDO %
000003b5 : f7c28293;   % 1698:  %
000003b6 : 00100313;   % 1699: 		li t1, 1 %
000003b7 : 00628023;   % 1700: 		sb t1, 0(t0) %
000003b8 : 0fc24297;   % 1701: 		la t0, POS_MAPA		#endereco da posicao do mapa %
000003b9 : f0028293;   % 1701:  %
000003ba : 00029303;   % 1702: 		lh t1, 0(t0)		#valor do endereco %
000003bb : 01430313;   % 1703: 		addi t1, t1, 20		# %
000003bc : 09900393;   % 1704: 		li t2, 153		#t2 = 0 %
000003bd : 56730663;   % 1705: 		beq t1, t2, FIM		#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda %
000003be : fec30313;   % 1706: 		addi t1, t1, -20	 %
000003bf : 00130313;   % 1707: 		addi t1, t1, 1		#caso contr rio %
000003c0 : 00629023;   % 1708: 		sh t1, 0(t0)		#salvando no endereco da posicao do mapa %
000003c1 : 55c0006f;   % 1709: 		j FIM %
000003c2 : 3fc0006f;   % 1711: 		j DIREITA_d %
000003c3 : 06f00293;   % 1713: 		li t0,'o'		 %
000003c4 : 02538863;   % 1714: 		beq t2, t0,MOV_ESQ		# se tecla pressionada for 'o', va MOV_ESQ %
000003c5 : 07000293;   % 1716: 		li t0,'p' %
000003c6 : 04538463;   % 1717: 		beq t2,t0,MOV_DIR		# se tecla pressionada for 'p', va MOV_DIR %
000003c7 : 06700293;   % 1719: 		li t0, 'g'			# se tecla pressionada for 'G', va GROW %
000003c8 : 06538463;   % 1720: 		beq t2, t0, GROW %
000003c9 : 06800293;   % 1722: 		li t0, 'h'			# se tecla pressionada for 'h', va HALF %
000003ca : 12538463;   % 1723: 		beq t2, t0, HALF %
000003cb : 06b00293;   % 1725: 		li t0, 'k' %
000003cc : ec538c63;   % 1726: 		beq t2, t0, ATIRAR %
000003cd : 07500293;   % 1728: 		li t0,'u'			# se tecla pressionada for 'u' va EXIT %
000003ce : 52538663;   % 1729: 		beq t2,t0,EXIT %
000003cf : 8f4ff06f;   % 1732: 		j GAME_LOOP %
000003d0 : 0fc24297;   % 1734: 		la t0, POS_MAPA		#endereco da posicao do mapa %
000003d1 : ea028293;   % 1734:  %
000003d2 : 00029303;   % 1735: 		lh t1, 0(t0)		#valor do endereco %
000003d3 : 000003b3;   % 1736: 		mv t2, zero %
000003d4 : fe7306e3;   % 1737: 		beq t1, t2, METADE_GAME_LOOP	#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda %
000003d5 : fff30313;   % 1738: 		addi t1, t1, -1		#caso contrario %
000003d6 : 00629023;   % 1739: 		sh t1, 0(t0)		#salvando no endereco da posicao do mapa %
000003d7 : 5040006f;   % 1740: 		j FIM %
000003d8 : 0fc24297;   % 1742: MOV_DIR:	la t0, POS_MAPA		#endereco da posicao do mapa %
000003d9 : e8028293;   % 1742:  %
000003da : 00029303;   % 1743: 		lh t1, 0(t0)		#valor do endereco %
000003db : 01430313;   % 1744: 		addi t1, t1, 20		# %
000003dc : 09900393;   % 1745: 		li t2, 153		#t2 = 0 %
000003dd : fc7304e3;   % 1746: 		beq t1, t2, METADE_GAME_LOOP	#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda %
000003de : fec30313;   % 1747: 		addi t1, t1, -20	 %
000003df : 00130313;   % 1748: 		addi t1, t1, 1		#caso contr rio %
000003e0 : 00629023;   % 1749: 		sh t1, 0(t0)		#salvando no endereco da posicao do mapa %
000003e1 : 4dc0006f;   % 1750: 		j FIM %
000003e2 : 0fc22297;   % 1752: 		la t0, mapa_teste_153	#endereco do mini_background %
000003e3 : c8028293;   % 1752:  %
000003e4 : 00828293;   % 1753: 		addi t0, t0, 8		#pula a largura e a altura %
000003e5 : 0fc24397;   % 1754: 		la t2, CHAR_POS_UP	#endereco de CHAR_POS_UP %
000003e6 : e5c38393;   % 1754:  %
000003e7 : 09900e13;   % 1755: 		li t3, 153		#carrega 8 em t3 %
000003e8 : 00039e83;   % 1756: 		lh t4, 0(t2)		#carrega o y em t4 %
000003e9 : 03ce8eb3;   % 1757: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000003ea : 00239e03;   % 1758: 		lh t3, 2(t2)		#carrega o x em t3 %
000003eb : 01ce8eb3;   % 1759: 		add t4, t4, t3		#em qual coluna o CHAR est  %
000003ec : 01d282b3;   % 1762: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
000003ed : f6728293;   % 1763: 		addi t0, t0, -153	#novo endereco do CHAR_POS na matriz %
000003ee : 00028e03;   % 1764: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
000003ef : 00100f13;   % 1765: 		li t5, 1 		#t5 = 1 %
000003f0 : 09928293;   % 1766: 		addi t0, t0, 153 %
000003f1 : 49ee0e63;   % 1767: 		beq t3, t5, FIM		#v  para GAME_LOOP %
000003f2 : 0fc24297;   % 1769: 		la t0, PEQUENO_GRANDE %
000003f3 : e8228293;   % 1769:  %
000003f4 : 00028283;   % 1770: 		lb t0, 0(t0) %
000003f5 : 00100313;   % 1771: 		li t1, 1 %
000003f6 : 48628463;   % 1772: 		beq t0, t1, FIM %
000003f7 : 0fc24297;   % 1773: 		la t0, PEQUENO_GRANDE %
000003f8 : e6e28293;   % 1773:  %
000003f9 : 00100313;   % 1774: 		li t1, 1 %
000003fa : 00628023;   % 1775: 		sb t1, 0(t0) %
000003fb : 0fc22297;   % 1777: 		la t0, mapa_teste_153	#endereco do mini_background %
000003fc : c1c28293;   % 1777:  %
000003fd : 00828293;   % 1778: 		addi t0, t0, 8		#pula a largura e a altura %
000003fe : 0fc24397;   % 1779: 		la t2, CHAR_POS_UP	#endereco de CHAR_POS_UP %
000003ff : df838393;   % 1779:  %
00000400 : 09900e13;   % 1780: 		li t3, 153		#carrega 8 em t3 %
00000401 : 00039e83;   % 1781: 		lh t4, 0(t2)		#carrega o y em t4 %
00000402 : 03ce8eb3;   % 1782: 		mul t4, t4, t3		#em qual linha o CHAR est  %
00000403 : 00239e03;   % 1783: 		lh t3, 2(t2)		#carrega o x em t3 %
00000404 : 01ce8eb3;   % 1784: 		add t4, t4, t3		#em qual coluna o CHAR est  %
00000405 : 01d282b3;   % 1787: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
00000406 : f6728293;   % 1788: 		addi t0, t0, -153	#novo endereco do CHAR_POS na matriz %
00000407 : 00028e03;   % 1789: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
00000408 : 00100f13;   % 1790: 		li t5, 1 		#t5 = 1 %
00000409 : 09928293;   % 1791: 		addi t0, t0, 153 %
0000040a : f1ee0ae3;   % 1792: 		beq t3, t5, METADE_GAME_LOOP	#v  para GAME_LOOP %
0000040b : 00600e13;   % 1793: 		li t3, 6		#carrega 2 em t3 %
0000040c : 01c28023;   % 1794: 		sb t3, 0(t0)		#colocando 2 no endereco %
0000040d : 00500e13;   % 1795: 		li t3, 5 %
0000040e : f6728293;   % 1796: 		addi t0, t0, -153	#novo endereco do CHAR_POS na matriz %
0000040f : 01c28023;   % 1797: 		sb t3, 0(t0)		#colocando 2 no endereco %
00000410 : 00039e03;   % 1798: 		lh t3, 0(t2)		#carrega o y em t3 %
00000411 : fffe0e13;   % 1799: 		addi t3, t3, -1		#decrementa um em t3 %
00000412 : 01c39023;   % 1800: 		sh t3,0(t2) %
00000413 : 4140006f;   % 1801: 		j FIM %
00000414 : 0fc24297;   % 1804: 		la t0, PEQUENO_GRANDE	#carrega o endereco de PEQUENO_GRANDE %
00000415 : dfa28293;   % 1804:  %
00000416 : 00028283;   % 1805: 		lb t0, 0(t0)		#carrega em t0 o valor de PEQUENO_GRANDE %
00000417 : 40028263;   % 1806: 		beq t0, zero, FIM	#se t0 == 0, ou seja, ja esta pequeno, FIM %
00000418 : 0fc24297;   % 1807: 		la t0, ITEM_1_BYTE	#carrega o endereco de ITEM_1_BYTE %
00000419 : de928293;   % 1807:  %
0000041a : 00028283;   % 1808: 		lb t0, 0(t0)		#carrega em t0 se j  possui o item %
0000041b : 3e028a63;   % 1809: 		beq t0, zero, FIM	#se t0 == 0, ou seja, nao tem item, FIM %
0000041c : 0fc24297;   % 1810: 		la t0, PEQUENO_GRANDE	#carrega o endereco de PEQUENO_GRANDE %
0000041d : dda28293;   % 1810:  %
0000041e : 00028023;   % 1811: 		sb zero, 0(t0)		#PEQUENO_GRANDE == 0, personagem fica pequeno %
0000041f : 0fc22297;   % 1814: 		la t0, mapa_teste_153	#endereco do mini_background %
00000420 : b8c28293;   % 1814:  %
00000421 : 00828293;   % 1815: 		addi t0, t0, 8		#pula a largura e a altura %
00000422 : 0fc24397;   % 1816: 		la t2, CHAR_POS_UP	#endereco de CHAR_POS %
00000423 : d6838393;   % 1816:  %
00000424 : 09900e13;   % 1817: 		li t3, 153		#carrega 8 em t3 %
00000425 : 00039e83;   % 1818: 		lh t4, 0(t2)		#carrega o y em t4 %
00000426 : 03ce8eb3;   % 1819: 		mul t4, t4, t3		#em qual linha o CHAR est  %
00000427 : 00239e03;   % 1820: 		lh t3, 2(t2)		#carrega o x em t3 %
00000428 : 01ce8eb3;   % 1821: 		add t4, t4, t3		#em qual coluna o CHAR est  %
00000429 : 01d282b3;   % 1824: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
0000042a : 09928293;   % 1825: 		addi t0, t0, 153	#novo endereco do CHAR_POS na matriz %
0000042b : 00028e03;   % 1826: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
0000042c : 00100f13;   % 1827: 		li t5, 1 		#t5 = 1 %
0000042d : f6728293;   % 1828: 		addi t0, t0, -153 %
0000042e : 00000e13;   % 1829: 		li t3, 0		#carrega 0 em t3 %
0000042f : 01c28023;   % 1830: 		sb t3, 0(t0)		#colocando 0 no endereco %
00000430 : 00700e13;   % 1831: 		li t3, 7		#carrega 2 em t3 %
00000431 : 09928293;   % 1832: 		addi t0, t0, 153	#novo endereco do CHAR_POS na matriz %
00000432 : 01c28023;   % 1833: 		sb t3, 0(t0)		#colocando 2 no endereco %
00000433 : 00039e03;   % 1834: 		lh t3, 0(t2)		#carrega o y em t3 %
00000434 : 001e0e13;   % 1835: 		addi t3, t3, 1		#decrementa um em t3 %
00000435 : 01c39023;   % 1836: 		sh t3, 0(t2)		#novo CHAR_POS %
00000436 : 3880006f;   % 1837: 		j FIM %
00000437 : 0fc24297;   % 1840: 		la t0, W_LIMIT %
00000438 : d6f28293;   % 1840:  %
00000439 : 00028283;   % 1841: 		lb t0, 0(t0) %
0000043a : 00200313;   % 1842: 		li t1, 2 %
0000043b : 36628a63;   % 1843: 		beq t0, t1, FIM %
0000043c : 0fc24297;   % 1844: 		la t0, PEQUENO_GRANDE %
0000043d : d5a28293;   % 1844:  %
0000043e : 00028283;   % 1845: 		lb t0, 0(t0) %
0000043f : 00100313;   % 1846: 		li t1, 1 %
00000440 : 36628063;   % 1847: 		beq t0, t1, FIM %
00000441 : 0fc22297;   % 1849: 		la t0, mapa_teste_153	#endereco do mini_background %
00000442 : b0428293;   % 1849:  %
00000443 : 00828293;   % 1850: 		addi t0, t0, 8		#pula a largura e a altura %
00000444 : 0fc24397;   % 1851: 		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS %
00000445 : ce438393;   % 1851:  %
00000446 : 09900e13;   % 1852: 		li t3, 153		#carrega 16 em t3 %
00000447 : 00039e83;   % 1853: 		lh t4, 0(t2)		#carrega o y em t4 %
00000448 : 03ce8eb3;   % 1854: 		mul t4, t4, t3		#em qual linha o CHAR est  %
00000449 : 00239e03;   % 1855: 		lh t3, 2(t2)		#carrega o x em t3 %
0000044a : 01ce8eb3;   % 1856: 		add t4, t4, t3		#em qual coluna o CHAR est  %
0000044b : 01d282b3;   % 1859: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
0000044c : f6728293;   % 1860: 		addi t0, t0, -153	#novo endereco do CHAR_POS na matriz %
0000044d : 00028e03;   % 1861: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
0000044e : 00800f13;   % 1862: 		li t5, 8 %
0000044f : 53ee0e63;   % 1863: 		beq t3, t5, MORTE %
00000450 : 00100f13;   % 1864: 		li t5, 1 %
00000451 : 09928293;   % 1865: 		addi t0, t0, 153	#voltando pro endereco antigo(vai servir para cobrir o "rastro") %
00000452 : dfee0ae3;   % 1866: 		beq t3, t5, METADE_GAME_LOOP	#v  para GAME_LOOP %
00000453 : 00000e13;   % 1867: 		li t3, 0		#carrega 0 em t3 %
00000454 : 01c28023;   % 1868: 		sb t3, 0(t0)		#colocando 0 no endereco %
00000455 : 00700e13;   % 1869: 		li t3, 7		#carrega 2 em t3 %
00000456 : f6728293;   % 1870: 		addi t0, t0, -153	#novo endereco do CHAR_POS na matriz %
00000457 : 01c28023;   % 1871: 		sb t3, 0(t0)		#colocando 2 no endereco %
00000458 : 00039e03;   % 1872: 		lh t3, 0(t2)		#carrega o y em t3 %
00000459 : fffe0e13;   % 1873: 		addi t3, t3, -1		#decrementa um em t3 %
0000045a : 01c39023;   % 1874: 		sh t3, 0(t2)		#novo CHAR_POS %
0000045b : 0fc24397;   % 1875: 		la t2, CHAR_POS_UP %
0000045c : c8438393;   % 1875:  %
0000045d : 01c39023;   % 1876: 		sh t3, 0(t2) %
0000045e : 0fc24297;   % 1877: 		la t0, VOANDO %
0000045f : cd428293;   % 1877:  %
00000460 : 00100313;   % 1878: 		li t1, 1 %
00000461 : 00628023;   % 1879: 		sb t1, 0(t0) %
00000462 : c01022f3;   % 1880: 		csrr t0, time %
00000463 : 0fc24317;   % 1881: 		la t1, TEMPO_PARA_COMECAR_A_CAIR %
00000464 : c7430313;   % 1881:  %
00000465 : 00532023;   % 1882: 		sw t0, 0(t1) %
00000466 : 0fc24297;   % 1883: 		la t0, W_LIMIT %
00000467 : cb328293;   % 1883:  %
00000468 : 00028303;   % 1884: 		lb t1, 0(t0) %
00000469 : 00130313;   % 1885: 		addi t1, t1, 1 %
0000046a : 00628023;   % 1886: 		sb t1, 0(t0) %
0000046b : 2b40006f;   % 1887: 		j FIM %
0000046c : 0fc24297;   % 1890: 		la t0, PEQUENO_GRANDE %
0000046d : c9a28293;   % 1890:  %
0000046e : 00028283;   % 1891: 		lb t0, 0(t0) %
0000046f : 00100313;   % 1892: 		li t1, 1 %
00000470 : 2a628063;   % 1893: 		beq t0, t1, FIM %
00000471 : 0fc22297;   % 1895: 		la t0, mapa_teste_153	#endereco do mini_background %
00000472 : a4428293;   % 1895:  %
00000473 : 00828293;   % 1896: 		addi t0, t0, 8		#pula a largura e a altura %
00000474 : 0fc24397;   % 1897: 		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS %
00000475 : c2438393;   % 1897:  %
00000476 : 09900e13;   % 1898: 		li t3, 153		#carrega 8 em t3 %
00000477 : 00039e83;   % 1899: 		lh t4, 0(t2)		#carrega o y em t4 %
00000478 : 03ce8eb3;   % 1900: 		mul t4, t4, t3		#em qual linha o CHAR est  %
00000479 : 00239e03;   % 1901: 		lh t3, 2(t2)		#carrega o x em t3 %
0000047a : 01ce8eb3;   % 1902: 		add t4, t4, t3		#em qual coluna o CHAR est  %
0000047b : 01d282b3;   % 1905: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
0000047c : 09928293;   % 1906: 		addi t0, t0, 153		#novo endereco do CHAR_POS na matriz %
0000047d : 00028e03;   % 1907: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
0000047e : 00300f13;   % 1908: 		li t5, 3 		#t5 = 1 %
0000047f : f6728293;   % 1909: 		addi t0, t0, -153 %
00000480 : 47ee0c63;   % 1910: 		beq t3, t5, MORTE %
00000481 : 00800f13;   % 1911: 		li t5, 8 %
00000482 : 47ee0863;   % 1912: 		beq t3, t5, MORTE %
00000483 : 00100f13;   % 1913: 		li t5, 1 %
00000484 : 1dee0e63;   % 1914: 		beq t3, t5, RESET_COOLDOWN	#v  para GAME_LOOP %
00000485 : 00000e13;   % 1916: 		li t3, 0		#carrega 0 em t3 %
00000486 : 01c28023;   % 1917: 		sb t3, 0(t0)		#colocando 0 no endereco %
00000487 : 00700e13;   % 1918: 		li t3, 7		#carrega 2 em t3 %
00000488 : 09928293;   % 1919: 		addi t0, t0, 153	#novo endereco do CHAR_POS na matriz %
00000489 : 01c28023;   % 1920: 		sb t3, 0(t0)		#colocando 2 no endereco %
0000048a : 00039e03;   % 1921: 		lh t3, 0(t2)		#carrega o y em t3 %
0000048b : 001e0e13;   % 1922: 		addi t3, t3, 1		#decrementa um em t3 %
0000048c : 01c39023;   % 1923: 		sh t3, 0(t2)		#novo CHAR_POS %
0000048d : 0fc24397;   % 1924: 		la t2, CHAR_POS_UP %
0000048e : bbc38393;   % 1924:  %
0000048f : 01c39023;   % 1925: 		sh t3, 0(t2) %
00000490 : 2200006f;   % 1926: 		j FIM %
00000491 : 0fc24297;   % 1929: 		la t0, PEQUENO_GRANDE %
00000492 : c0628293;   % 1929:  %
00000493 : 00028283;   % 1930: 		lb t0, 0(t0) %
00000494 : 00100313;   % 1931: 		li t1, 1 %
00000495 : 20628663;   % 1932: 		beq t0, t1, FIM %
00000496 : 0fc22297;   % 1934: 		la t0, mapa_teste_153	#endereco do mini_background %
00000497 : 9b028293;   % 1934:  %
00000498 : 00828293;   % 1935: 		addi t0, t0, 8		#pula a largura e a altura %
00000499 : 0fc24397;   % 1936: 		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS %
0000049a : b9038393;   % 1936:  %
0000049b : 09900e13;   % 1937: 		li t3, 153		#carrega 4 em t3 %
0000049c : 00039e83;   % 1938: 		lh t4, 0(t2)		#carrega o y em t4 %
0000049d : 03ce8eb3;   % 1939: 		mul t4, t4, t3		#em qual linha o CHAR est  %
0000049e : 00239e03;   % 1940: 		lh t3, 2(t2)		#carrega o x em t3 %
0000049f : 01ce8eb3;   % 1941: 		add t4, t4, t3		#em qual coluna o CHAR est  %
000004a0 : 01d282b3;   % 1944: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
000004a1 : fff28293;   % 1945: 		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz %
000004a2 : 00028e03;   % 1946: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
000004a3 : 00800f13;   % 1947: 		li t5, 8 %
000004a4 : 3fee0463;   % 1948: 		beq t3, t5, MORTE %
000004a5 : 01400f13;   % 1949: 		li t5, 20 %
000004a6 : 3fee0063;   % 1950: 		beq t3, t5, MORTE %
000004a7 : 00100f13;   % 1951: 		li t5, 1 %
000004a8 : 00128293;   % 1952: 		addi t0, t0, 1 %
000004a9 : c9ee0ce3;   % 1953: 		beq t3, t5, METADE_GAME_LOOP	#v  para GAME_LOOP %
000004aa : 00000e13;   % 1955: 		li t3, 0		#carrega 0 em t3 %
000004ab : 01c28023;   % 1956: 		sb t3, 0(t0)		#colocando 0 no endereco %
000004ac : 00700e13;   % 1957: 		li t3, 7		#carrega 2 em t3 %
000004ad : fff28293;   % 1958: 		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz %
000004ae : 01c28023;   % 1959: 		sb t3, 0(t0)		#colocando 2 no endereco %
000004af : 00239e03;   % 1960: 		lh t3, 2(t2)		#carrega o x em t3 %
000004b0 : fffe0e13;   % 1961: 		addi t3, t3, -1		#decrementa um em t3 %
000004b1 : 01c39123;   % 1962: 		sh t3, 2(t2)		#novo CHAR_POS %
000004b2 : 0fc24397;   % 1963: 		la t2, CHAR_POS_UP %
000004b3 : b2838393;   % 1963:  %
000004b4 : 01c39123;   % 1964: 		sh t3, 2(t2) %
000004b5 : 0fc24297;   % 1965: 		la t0, VOANDO %
000004b6 : b7828293;   % 1965:  %
000004b7 : 00100313;   % 1966: 		li t1, 1 %
000004b8 : 00628023;   % 1967: 		sb t1, 0(t0) %
000004b9 : 0fc24297;   % 1968: 		la t0, POS_MAPA		#endereco da posicao do mapa %
000004ba : afc28293;   % 1968:  %
000004bb : 00029303;   % 1969: 		lh t1, 0(t0)		#valor do endereco %
000004bc : 00000393;   % 1970: 		li t2, 0		#t2 = 0 %
000004bd : 16730663;   % 1971: 		beq t1, t2, FIM		#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda %
000004be : fff30313;   % 1972: 		addi t1, t1, -1		#caso contrario %
000004bf : 00629023;   % 1973: 		sh t1, 0(t0)		#salvando no endereco da posicao do mapa %
000004c0 : 1600006f;   % 1974: 		j FIM %
000004c1 : 0fc24297;   % 1977: 		la t0, PEQUENO_GRANDE %
000004c2 : b4628293;   % 1977:  %
000004c3 : 00028283;   % 1978: 		lb t0, 0(t0) %
000004c4 : 00100313;   % 1979: 		li t1, 1 %
000004c5 : 14628663;   % 1980: 		beq t0, t1, FIM %
000004c6 : 0fc22297;   % 1982: 		la t0, mapa_teste_153	#endereco do mini_background %
000004c7 : 8f028293;   % 1982:  %
000004c8 : 00828293;   % 1983: 		addi t0, t0, 8		#pula a largura e a altura %
000004c9 : 0fc24397;   % 1984: 		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS %
000004ca : ad038393;   % 1984:  %
000004cb : 09900e13;   % 1985: 		li t3, 153		#carrega 4 em t3 %
000004cc : 00039e83;   % 1986: 		lh t4, 0(t2)		#carrega o y em t4 %
000004cd : 03ce8eb3;   % 1987: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000004ce : 00239e03;   % 1988: 		lh t3, 2(t2)		#carrega o x em t3 %
000004cf : 01ce8eb3;   % 1989: 		add t4, t4, t3		#em qual coluna o CHAR est  %
000004d0 : 01d282b3;   % 1992: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
000004d1 : 00128293;   % 1993: 		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz %
000004d2 : 00028e03;   % 1994: 		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz %
000004d3 : 00800f13;   % 1995: 		li t5, 8 %
000004d4 : 33ee0463;   % 1996: 		beq t3, t5, MORTE %
000004d5 : 01400f13;   % 1997: 		li t5, 20 %
000004d6 : 33ee0063;   % 1998: 		beq t3, t5, MORTE %
000004d7 : 00100f13;   % 1999: 		li t5, 1 %
000004d8 : fff28293;   % 2000: 		addi t0, t0, -1 %
000004d9 : bdee0ce3;   % 2001: 		beq t3, t5, METADE_GAME_LOOP	#v  para GAME_LOOP %
000004da : 00900f13;   % 2002: 		li t5, 9 %
000004db : bdee08e3;   % 2003: 		beq t3, t5, METADE_GAME_LOOP %
000004dc : 03c00f13;   % 2004: 		li t5, 60 %
000004dd : bdee04e3;   % 2005: 		beq t3, t5, METADE_GAME_LOOP %
000004de : 03d00f13;   % 2006: 		li t5, 61 %
000004df : bdee00e3;   % 2007: 		beq t3, t5, METADE_GAME_LOOP %
000004e0 : 00000e13;   % 2009: 		li t3, 0		#carrega 0 em t3 %
000004e1 : 01c28023;   % 2010: 		sb t3, 0(t0)		#colocando 0 no endereco %
000004e2 : 00700e13;   % 2011: 		li t3, 7		#carrega 2 em t3 %
000004e3 : 00128293;   % 2012: 		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz %
000004e4 : 01c28023;   % 2013: 		sb t3, 0(t0)		#colocando 2 no endereco %
000004e5 : 00239e03;   % 2014: 		lh t3, 2(t2)		#carrega o x em t3 %
000004e6 : 001e0e13;   % 2015: 		addi t3, t3, 1		#decrementa um em t3 %
000004e7 : 01c39123;   % 2016: 		sh t3, 2(t2)		#novo CHAR_POS %
000004e8 : 0fc24397;   % 2017: 		la t2, CHAR_POS_UP %
000004e9 : a5038393;   % 2017:  %
000004ea : 01c39123;   % 2018: 		sh t3, 2(t2) %
000004eb : 0fc24297;   % 2019: 		la t0, VOANDO %
000004ec : aa028293;   % 2019:  %
000004ed : 00100313;   % 2020: 		li t1, 1 %
000004ee : 00628023;   % 2021: 		sb t1, 0(t0) %
000004ef : 0fc24297;   % 2022: 		la t0, POS_MAPA		#endereco da posicao do mapa %
000004f0 : a2428293;   % 2022:  %
000004f1 : 00029303;   % 2023: 		lh t1, 0(t0)		#valor do endereco %
000004f2 : 01430313;   % 2024: 		addi t1, t1, 20		# %
000004f3 : 09900393;   % 2025: 		li t2, 153		#t2 = 0 %
000004f4 : 08730863;   % 2026: 		beq t1, t2, FIM		#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda %
000004f5 : fec30313;   % 2027: 		addi t1, t1, -20	 %
000004f6 : 00130313;   % 2028: 		addi t1, t1, 1		#caso contr rio %
000004f7 : 00629023;   % 2029: 		sh t1, 0(t0)		#salvando no endereco da posicao do mapa %
000004f8 : 0800006f;   % 2030: 		j FIM %
000004f9 : 00a00893;   % 2032: 		li a7, 10 %
000004fa : 00000073;   % 2033: 		ecall %
000004fb : 0fc24297;   % 2036: 		la t0, W_LIMIT %
000004fc : a5f28293;   % 2036:  %
000004fd : 00028023;   % 2037: 		sb zero, 0(t0) %
000004fe : 0fc24297;   % 2038: 		la t0, VOANDO %
000004ff : a5428293;   % 2038:  %
00000500 : 00028023;   % 2039: 		sb zero, 0(t0) %
00000501 : 05c0006f;   % 2040: 		j FIM %
00000502 : 02c00f13;   % 2042: 		li t5, 44 %
00000503 : 01ee0863;   % 2043: 		beq t3, t5, ITEM_2 %
00000504 : 00400f13;   % 2044: 		li t5, 4 %
00000505 : 03ee0c63;   % 2045: 		beq t3, t5, TEM_ITEM_1 %
00000506 : 00008067;   % 2046: 		ret %
00000507 : 0fc24f17;   % 2048: 		la t5, ARMA %
00000508 : a66f0f13;   % 2048:  %
00000509 : 00600513;   % 2049: 		li a0, 6 %
0000050a : 00af1023;   % 2050: 		sh a0, 0(t5) %
0000050b : 0fc24517;   % 2051: 		la a0, VIDA_BOSS %
0000050c : a2250513;   % 2051:  %
0000050d : 00051503;   % 2052: 		lh a0, 0(a0) %
0000050e : 40a00533;   % 2053: 		neg a0, a0 %
0000050f : 00af1123;   % 2054: 		sh a0, 2(t5) %
00000510 : 01c00513;   % 2055: 		li a0, 28 %
00000511 : 00af1223;   % 2056: 		sh a0, 4(t5) %
00000512 : 00008067;   % 2057: 		ret %
00000513 : 0fc24517;   % 2059: 		la a0, ITEM_1_BYTE %
00000514 : 9fd50513;   % 2059:  %
00000515 : 00100593;   % 2060: 		li a1, 1 %
00000516 : 00b50023;   % 2061: 		sb a1, 0(a0) %
00000517 : 00008067;   % 2062: 		ret %
00000518 : 00008067;   % 2065: 		ret	 %
00000519 : 00a00893;   % 2068: 		li a7, 10 %
0000051a : 00000073;   % 2069: 		ecall %
0000051b : 0fc24297;   % 2071: 		la t0, MAPA			# carrega endereco de qual mapa esta %
0000051c : 97628293;   % 2071:  %
0000051d : 00028283;   % 2072: 		lb t0, 0(t0)			# byte de qual mapa esta %
0000051e : 00000313;   % 2073: 		li t1, 0 %
0000051f : 04628e63;   % 2074: 		beq t0, t1, INIMIGOS_MAPA_1	# mapa 1 %
00000520 : 00100313;   % 2075: 		li t1, 1 %
00000521 : 0fc24397;   % 2076: 		la t2, CHECKPOINT %
00000522 : 96038393;   % 2076:  %
00000523 : 03500e13;   % 2077: 		li t3, 53 %
00000524 : 01c39123;   % 2078: 		sh t3, 2(t2) %
00000525 : 01c39323;   % 2079: 		sh t3, 6(t2) %
00000526 : 00c00e13;   % 2080: 		li t3, 12 %
00000527 : 01c39023;   % 2081: 		sh t3,0(t2) %
00000528 : 00d00e13;   % 2082: 		li t3, 13 %
00000529 : 01c39223;   % 2083: 		sh t3,4(t2) %
0000052a : 32628e63;   % 2084: 		beq t0, t1, INIMIGOS_MAPA_2	# mapa 2 %
0000052b : 00200313;   % 2085: 		li t1, 2 %
0000052c : 0fc24397;   % 2086: 		la t2, CHECKPOINT %
0000052d : 93438393;   % 2086:  %
0000052e : 06800e13;   % 2087: 		li t3, 104 %
0000052f : 01c39123;   % 2088: 		sh t3, 2(t2) %
00000530 : 01c39323;   % 2089: 		sh t3, 6(t2) %
00000531 : 00600e13;   % 2090: 		li t3, 6 %
00000532 : 01c39023;   % 2091: 		sh t3,0(t2) %
00000533 : 00700e13;   % 2092: 		li t3, 7 %
00000534 : 01c39223;   % 2093: 		sh t3,4(t2) %
00000535 : 48628263;   % 2094: 		beq t0, t1, INIMIGOS_MAPA_3	# mapa 3 %
00000536 : 0fc24f97;   % 2097: 		la t6, INIMIGO_1_COOLDOWN	#carrega o endereco do TEMPO_PARA_COMECAR_A_CAIR %
00000537 : 93cf8f93;   % 2097:  %
00000538 : 0fc24397;   % 2098: 		la t2, POS_INIMIGOS_MAPA_1	#endereco de CHAR_POS_UP %
00000539 : 97438393;   % 2098:  %
0000053a : ffc10113;   % 2099: 		addi sp, sp, -4			 %
0000053b : 00112023;   % 2100: 		sw ra, 0(sp) %
0000053c : 060000ef;   % 2101: 		jal ENDERECO_INIMIGO %
0000053d : 0fc24f97;   % 2103: 		la t6, INIMIGO_2_COOLDOWN %
0000053e : 924f8f93;   % 2103:  %
0000053f : 0fc24397;   % 2104: 		la t2, POS_INIMIGOS2_MAPA_1 %
00000540 : 95e38393;   % 2104:  %
00000541 : 04c000ef;   % 2105: 		jal ENDERECO_INIMIGO %
00000542 : 0fc24f97;   % 2107: 		la t6, INIMIGO_3_COOLDOWN %
00000543 : 914f8f93;   % 2107:  %
00000544 : 0fc24397;   % 2108: 		la t2, POS_INIMIGOS3_MAPA_1 %
00000545 : 95038393;   % 2108:  %
00000546 : 038000ef;   % 2109: 		jal ENDERECO_INIMIGO %
00000547 : 0fc24f97;   % 2111: 		la t6, INIMIGO_4_COOLDOWN %
00000548 : 904f8f93;   % 2111:  %
00000549 : 0fc24397;   % 2112: 		la t2, POS_INIMIGOS4_MAPA_1 %
0000054a : 94238393;   % 2112:  %
0000054b : 024000ef;   % 2113: 		jal ENDERECO_INIMIGO %
0000054c : 0fc24f97;   % 2115: 		la t6, INIMIGO_5_COOLDOWN %
0000054d : 8f4f8f93;   % 2115:  %
0000054e : 0fc24397;   % 2116: 		la t2, POS_INIMIGOS5_MAPA_1 %
0000054f : 93438393;   % 2116:  %
00000550 : 010000ef;   % 2117: 		jal ENDERECO_INIMIGO %
00000551 : 00012083;   % 2118: 		lw ra, 0(sp) %
00000552 : 00410113;   % 2119: 		addi sp, sp, 4 %
00000553 : 00008067;   % 2120: 		ret %
00000554 : 0fc24297;   % 2123: 		la t0, TEMPO_ATUAL		#carrega o endereco do TEMPO_ATUAL %
00000555 : 8ac28293;   % 2123:  %
00000556 : 0002a283;   % 2124: 		lw t0, 0(t0)			#carrega o TEMPO_ATUAL %
00000557 : 000faf03;   % 2125: 		lw t5, 0(t6)			#carrega o TEMPO_PARA_COMECAR_A_CAIR %
00000558 : 41e282b3;   % 2126: 		sub t0, t0, t5			#t0 = t0 - t1 %
00000559 : 0fa00313;   % 2127: 		li t1, 250			#500 milesimos %
0000055a : ee535ce3;   % 2128: 		bge t1, t0, FIM			#if t1 >= t0, FIM  %
0000055b : 007002b3;   % 2129: 		mv t0, t2 %
0000055c : 00428293;   % 2130: 		addi t0, t0, 4 %
0000055d : 00028283;   % 2131: 		lb t0, 0(t0) %
0000055e : 00028463;   % 2132: 		beq t0, zero, INIMIGO_UP %
0000055f : 0800006f;   % 2133: 		j INIMIGO_DOWN %
00000560 : 0fc21297;   % 2136: 		la t0, mapa_teste_153		#endereco do mini_background %
00000561 : 68828293;   % 2136:  %
00000562 : 00828293;   % 2137: 		addi t0, t0, 8			#pula a largura e a altura %
00000563 : 09900e13;   % 2138: 		li t3, 153			#carrega 8 em t3 %
00000564 : 00039e83;   % 2139: 		lh t4, 0(t2)			#carrega o y em t4 %
00000565 : 03ce8eb3;   % 2140: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000566 : 00239e03;   % 2141: 		lh t3, 2(t2)			#carrega o x em t3 %
00000567 : 01ce8eb3;   % 2142: 		add t4, t4, t3			#em qual coluna o CHAR esta %
00000568 : 01d282b3;   % 2143: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
00000569 : f6728293;   % 2145: 		addi t0, t0, -153		#novo endereco do CHAR_POS na matriz %
0000056a : 00028e03;   % 2146: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
0000056b : 09928293;   % 2147: 		addi t0, t0, 153 %
0000056c : 00500f13;   % 2148: 		li t5, 5 %
0000056d : 0dee0263;   % 2149: 		beq t3, t5, MORTE %
0000056e : 00600f13;   % 2150: 		li t5, 6 %
0000056f : 0bee0e63;   % 2151: 		beq t3, t5, MORTE %
00000570 : 00700f13;   % 2152: 		li t5, 7 %
00000571 : 0bee0a63;   % 2153: 		beq t3, t5, MORTE %
00000572 : 00100f13;   % 2154: 		li t5, 1 %
00000573 : 1fee0a63;   % 2155: 		beq t3, t5, MUDA		#v  para GAME_LOOP %
00000574 : 00000e13;   % 2156: 		li t3, 0			#carrega 0 em t3 %
00000575 : 01c28023;   % 2157: 		sb t3, 0(t0)			#colocando 0 no endereco %
00000576 : 00800e13;   % 2158: 		li t3, 8			#carrega 2 em t3 %
00000577 : f6728293;   % 2159: 		addi t0, t0, -153		#novo endereco do CHAR_POS na matriz %
00000578 : 01c28023;   % 2160: 		sb t3, 0(t0)			#colocando 2 no endereco %
00000579 : 00039e03;   % 2161: 		lh t3, 0(t2)			#carrega o y em t3 %
0000057a : fffe0e13;   % 2162: 		addi t3, t3, -1			#decrementa um em t3 %
0000057b : 01c39023;   % 2163: 		sh t3, 0(t2)			#novo CHAR_POS %
0000057c : c01022f3;   % 2164: 		csrr t0, time %
0000057d : 005fa023;   % 2165: 		sw t0, 0(t6) %
0000057e : 00008067;   % 2166: 		ret %
0000057f : 0fc21297;   % 2168: 		la t0, mapa_teste_153		#endereco do mini_background %
00000580 : 60c28293;   % 2168:  %
00000581 : 00828293;   % 2169: 		addi t0, t0, 8			#pula a largura e a altura %
00000582 : 09900e13;   % 2170: 		li t3, 153			#carrega 8 em t3 %
00000583 : 00039e83;   % 2171: 		lh t4, 0(t2)			#carrega o y em t4 %
00000584 : 03ce8eb3;   % 2172: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000585 : 00239e03;   % 2173: 		lh t3, 2(t2)			#carrega o x em t3 %
00000586 : 01ce8eb3;   % 2174: 		add t4, t4, t3			#em qual coluna o CHAR esta %
00000587 : 01d282b3;   % 2175: 		add t0, t0, t4			#endereco do CHAR_POS na matriz %
00000588 : 09928293;   % 2177: 		addi t0, t0, 153		#novo endereco do CHAR_POS na matriz %
00000589 : 00028e03;   % 2178: 		lb t3, 0(t0)			#carrega o valor de CHAR_POS da matriz %
0000058a : f6728293;   % 2179: 		addi t0, t0, -153 %
0000058b : 00500f13;   % 2180: 		li t5, 5 %
0000058c : 05ee0463;   % 2181: 		beq t3, t5, MORTE %
0000058d : 00600f13;   % 2182: 		li t5, 6 %
0000058e : 05ee0063;   % 2183: 		beq t3, t5, MORTE %
0000058f : 00700f13;   % 2184: 		li t5, 7 %
00000590 : 03ee0c63;   % 2185: 		beq t3, t5, MORTE %
00000591 : 00100f13;   % 2186: 		li t5, 1 %
00000592 : 19ee0663;   % 2187: 		beq t3, t5, MUDA_1		#v  para GAME_LOOP %
00000593 : 00000e13;   % 2188: 		li t3, 0			#carrega 0 em t3 %
00000594 : 01c28023;   % 2189: 		sb t3, 0(t0)			#colocando 0 no endereco %
00000595 : 00800e13;   % 2190: 		li t3, 8			#carrega 2 em t3 %
00000596 : 09928293;   % 2191: 		addi t0, t0, 153		#novo endereco do CHAR_POS na matriz %
00000597 : 01c28023;   % 2192: 		sb t3, 0(t0)			#colocando 2 no endereco %
00000598 : 00039e03;   % 2193: 		lh t3, 0(t2)			#carrega o y em t3 %
00000599 : 001e0e13;   % 2194: 		addi t3, t3, 1			#decrementa um em t3 %
0000059a : 01c39023;   % 2195: 		sh t3, 0(t2)			#novo CHAR_POS %
0000059b : c01022f3;   % 2196: 		csrr t0, time %
0000059c : 005fa023;   % 2197: 		sw t0, 0(t6) %
0000059d : 00008067;   % 2198: 		ret %
0000059e : 0fc21297;   % 2202: 		la t0, mapa_teste_153	#endereco do mini_background %
0000059f : 59028293;   % 2202:  %
000005a0 : 00828293;   % 2203: 		addi t0, t0, 8		#pula a largura e a altura %
000005a1 : 0fc23397;   % 2204: 		la t2, CHAR_POS_UP	#endereco de CHAR_POS_UP %
000005a2 : 76c38393;   % 2204:  %
000005a3 : 09900e13;   % 2205: 		li t3, 153		#carrega 8 em t3 %
000005a4 : 00039e83;   % 2206: 		lh t4, 0(t2)		#carrega o y em t4 %
000005a5 : 03ce8eb3;   % 2207: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000005a6 : 00239e03;   % 2208: 		lh t3, 2(t2)		#carrega o x em t3 %
000005a7 : 01ce8eb3;   % 2209: 		add t4, t4, t3		#em qual coluna o CHAR est  %
000005a8 : 01d282b3;   % 2210: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
000005a9 : 00000313;   % 2211: 		li t1, 0 %
000005aa : 00628023;   % 2212: 		sb t1, 0(t0) %
000005ab : 0fc21297;   % 2214: 		la t0, mapa_teste_153	#endereco do mini_background %
000005ac : 55c28293;   % 2214:  %
000005ad : 00828293;   % 2215: 		addi t0, t0, 8		#pula a largura e a altura %
000005ae : 0fc23397;   % 2216: 		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS %
000005af : 73c38393;   % 2216:  %
000005b0 : 09900e13;   % 2217: 		li t3, 153		#carrega 8 em t3 %
000005b1 : 00039e83;   % 2218: 		lh t4, 0(t2)		#carrega o y em t4 %
000005b2 : 03ce8eb3;   % 2219: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000005b3 : 00239e03;   % 2220: 		lh t3, 2(t2)		#carrega o x em t3 %
000005b4 : 01ce8eb3;   % 2221: 		add t4, t4, t3		#em qual coluna o CHAR est  %
000005b5 : 01d282b3;   % 2222: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
000005b6 : 00000313;   % 2223: 		li t1, 0 %
000005b7 : 00628023;   % 2224: 		sb t1, 0(t0) %
000005b8 : 0fc21297;   % 2226: 		la t0, mapa_teste_153 %
000005b9 : 52828293;   % 2226:  %
000005ba : 00828293;   % 2227: 		addi t0, t0, 8 %
000005bb : 0fc23397;   % 2228: 		la t2, CHECKPOINT	#endereco de CHAR_POS %
000005bc : 6f838393;   % 2228:  %
000005bd : 09900e13;   % 2229: 		li t3, 153		#carrega 4 em t3 %
000005be : 00039e83;   % 2230: 		lh t4, 0(t2)		#carrega o y em t4 %
000005bf : 03ce8eb3;   % 2231: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000005c0 : 00239e03;   % 2232: 		lh t3, 2(t2)		#carrega o x em t3 %
000005c1 : 01ce8eb3;   % 2233: 		add t4, t4, t3		#em qual coluna o CHAR est %
000005c2 : 01d282b3;   % 2234: 		add t0, t0, t4 %
000005c3 : 00500313;   % 2235: 		li t1, 5 %
000005c4 : 00628023;   % 2236: 		sb t1, 0(t0) %
000005c5 : 0fc23297;   % 2237: 		la t0, CHAR_POS_UP %
000005c6 : 6dc28293;   % 2237:  %
000005c7 : 00039e83;   % 2238: 		lh t4, 0(t2) %
000005c8 : 01d29023;   % 2239: 		sh t4, 0(t0) %
000005c9 : 00239e83;   % 2240: 		lh t4, 2(t2) %
000005ca : 01d29123;   % 2241: 		sh t4, 2(t0)  %
000005cb : 0fc21297;   % 2243: 		la t0, mapa_teste_153 %
000005cc : 4dc28293;   % 2243:  %
000005cd : 00828293;   % 2244: 		addi t0, t0, 8 %
000005ce : 0fc23397;   % 2245: 		la t2, CHECKPOINT	#endereco de CHAR_POS %
000005cf : 6ac38393;   % 2245:  %
000005d0 : 09900e13;   % 2246: 		li t3, 153		#carrega 4 em t3 %
000005d1 : 00439e83;   % 2247: 		lh t4, 4(t2)		#carrega o y em t4 %
000005d2 : 03ce8eb3;   % 2248: 		mul t4, t4, t3		#em qual linha o CHAR est  %
000005d3 : 00639e03;   % 2249: 		lh t3, 6(t2)		#carrega o x em t3 %
000005d4 : 01ce8eb3;   % 2250: 		add t4, t4, t3		#em qual coluna o CHAR est %
000005d5 : 01d282b3;   % 2251: 		add t0, t0, t4 %
000005d6 : 00600313;   % 2252: 		li t1, 6 %
000005d7 : 00628023;   % 2253: 		sb t1, 0(t0)  %
000005d8 : 0fc23297;   % 2254: 		la t0, CHAR_POS_DOWN %
000005d9 : 69428293;   % 2254:  %
000005da : 00439e83;   % 2255: 		lh t4, 4(t2) %
000005db : 01d29023;   % 2256: 		sh t4, 0(t0) %
000005dc : 00639e83;   % 2257: 		lh t4, 6(t2) %
000005dd : 01d29123;   % 2258: 		sh t4, 2(t0)  %
000005de : 0fc23297;   % 2260: 		la t0, POS_MAPA %
000005df : 66828293;   % 2260:  %
000005e0 : 0fc23317;   % 2261: 		la t1, CHECKPOINT %
000005e1 : 66430313;   % 2261:  %
000005e2 : 00231303;   % 2262: 		lh t1, 2(t1) %
000005e3 : ffe30313;   % 2263: 		addi t1, t1, -2 %
000005e4 : 00629023;   % 2264: 		sh t1, 0(t0) %
000005e5 : 0fc23297;   % 2266: 		la t0, PEQUENO_GRANDE %
000005e6 : 6b628293;   % 2266:  %
000005e7 : 00100313;   % 2267: 		li t1, 1 %
000005e8 : 00628023;   % 2268: 		sb t1, 0(t0) %
000005e9 : 0fc23297;   % 2270: 		la t0, VIDA %
000005ea : 6a928293;   % 2270:  %
000005eb : 00028303;   % 2271: 		lb t1, 0(t0) %
000005ec : fec30313;   % 2272: 		addi t1, t1, -20 %
000005ed : 00628023;   % 2273: 		sb t1, 0(t0) %
000005ee : c20306e3;   % 2275: 		beq t1, zero, MORTE_FINAL %
000005ef : ca5ff06f;   % 2276: 		j FIM %
000005f0 : 00100313;   % 2280: 		li t1, 1 %
000005f1 : 007002b3;   % 2281: 		mv t0, t2 %
000005f2 : 00428293;   % 2282: 		addi t0, t0, 4 %
000005f3 : 00628023;   % 2283: 		sb t1, 0(t0) %
000005f4 : 00008067;   % 2284: 		ret %
000005f5 : 007002b3;   % 2287: 		mv t0, t2 %
000005f6 : 00428293;   % 2288: 		addi t0, t0, 4 %
000005f7 : 00028023;   % 2289: 		sb zero, 0(t0) %
000005f8 : 00008067;   % 2290: 		ret %
000005f9 : ffc10113;   % 2293: 		addi sp, sp, -4 %
000005fa : 00112023;   % 2294: 		sw ra, 0(sp) %
000005fb : 00410113;   % 2295: 		addi sp, sp, 4 %
000005fc : 0fc23517;   % 2296: 		la a0, LASER_1 %
000005fd : 68250513;   % 2296:  %
000005fe : 0fc23597;   % 2297: 		la a1, LASER_1_COOLDOWN %
000005ff : 63058593;   % 2297:  %
00000600 : 050000ef;   % 2298: 		jal LASER_INIMIGO %
00000601 : 0fc23517;   % 2299: 		la a0, LASER_2 %
00000602 : 67250513;   % 2299:  %
00000603 : 0fc23597;   % 2300: 		la a1, LASER_2_COOLDOWN %
00000604 : 62458593;   % 2300:  %
00000605 : 03c000ef;   % 2301: 		jal LASER_INIMIGO %
00000606 : 0fc23517;   % 2302: 		la a0, LASER_3 %
00000607 : 66250513;   % 2302:  %
00000608 : 0fc23597;   % 2303: 		la a1, LASER_3_COOLDOWN %
00000609 : 61858593;   % 2303:  %
0000060a : 028000ef;   % 2304: 		jal LASER_INIMIGO %
0000060b : 0fc23517;   % 2305: 		la a0, LASER_4 %
0000060c : 65250513;   % 2305:  %
0000060d : 0fc23597;   % 2306: 		la a1, LASER_4_COOLDOWN %
0000060e : 60c58593;   % 2306:  %
0000060f : 014000ef;   % 2307: 		jal LASER_INIMIGO %
00000610 : ffc10113;   % 2308: 		addi sp, sp, -4 %
00000611 : 00012083;   % 2309: 		lw ra, 0(sp) %
00000612 : 00410113;   % 2310: 		addi sp, sp, 4 %
00000613 : 00008067;   % 2311: 		ret %
00000614 : 00350283;   % 2314: 		lb t0, 3(a0) %
00000615 : 08029663;   % 2315: 		bne t0, zero, DESLIGA %
00000616 : 0fc23297;   % 2316: 		la t0, TEMPO_ATUAL		#carrega o endereco do TEMPO_ATUAL %
00000617 : 5a428293;   % 2316:  %
00000618 : 0002a283;   % 2317: 		lw t0, 0(t0)			#carrega o TEMPO_ATUAL %
00000619 : 0005a303;   % 2318: 		lw t1, 0(a1)			#carrega o TEMPO_PARA_COMECAR_A_CAIR %
0000061a : 406282b3;   % 2319: 		sub t0, t0, t1			#t0 = t0 - t1 %
0000061b : 0045a303;   % 2320: 		lw t1, 4(a1) %
0000061c : 0e535263;   % 2321: 		bge t1, t0, LASER_EM_COOLDOWN	#if t1 >= t0, FIM %
0000061d : 0fc21317;   % 2323: 		la t1, mapa_teste_153		#endereco do mini_background %
0000061e : 39430313;   % 2323:  %
0000061f : 00830313;   % 2324: 		addi t1, t1, 8			#pula a largura e a altura %
00000620 : 09900e13;   % 2325: 		li t3, 153			#carrega 4 em t3 %
00000621 : 00150e83;   % 2326: 		lb t4, 1(a0)			#carrega o y em t4 %
00000622 : 03ce8eb3;   % 2327: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000623 : 00250e03;   % 2328: 		lb t3, 2(a0)			#carrega o x em t3 %
00000624 : 01ce8eb3;   % 2329: 		add t4, t4, t3			#em qual coluna o CHAR est  %
00000625 : 01d30333;   % 2330: 		add t1, t1, t4			#endereco do CHAR_POS na matriz %
00000626 : 000002b3;   % 2331: 		mv t0, zero %
00000627 : 01400e13;   % 2333: 		li t3, 20 %
00000628 : 01c30023;   % 2334: 		sb t3, 0(t1) %
00000629 : f6730313;   % 2335: 		addi t1, t1, -153 %
0000062a : 00030e03;   % 2336: 		lb t3, 0(t1) %
0000062b : 00500393;   % 2337: 		li t2, 5 %
0000062c : ddc384e3;   % 2338: 		beq t2, t3, MORTE %
0000062d : 00700393;   % 2339: 		li t2, 7 %
0000062e : ddc380e3;   % 2340: 		beq t2, t3, MORTE  %
0000062f : 00050383;   % 2341: 		lb t2, 0(a0) %
00000630 : 00728663;   % 2342: 		beq t0, t2, CONT %
00000631 : 00128293;   % 2343: 		addi t0, t0, 1 %
00000632 : fd5ff06f;   % 2344: 		j LIGA %
00000633 : 00100313;   % 2347: 		li t1, 1 %
00000634 : 006501a3;   % 2348: 		sb t1, 3(a0) %
00000635 : c01022f3;   % 2349: 		csrr t0, time %
00000636 : 0055a023;   % 2350: 		sw t0, 0(a1) %
00000637 : 00008067;   % 2351: 		ret %
00000638 : 0fc23297;   % 2354: 		la t0, TEMPO_ATUAL		#carrega o endereco do TEMPO_ATUAL %
00000639 : 51c28293;   % 2354:  %
0000063a : 0002a283;   % 2355: 		lw t0, 0(t0)			#carrega o TEMPO_ATUAL %
0000063b : 0005a303;   % 2356: 		lw t1, 0(a1)			#carrega o TEMPO_PARA_COMECAR_A_CAIR %
0000063c : 406282b3;   % 2357: 		sub t0, t0, t1			#t0 = t0 - t1 %
0000063d : 0045a303;   % 2358: 		lw t1, 4(a1) %
0000063e : 04535e63;   % 2359: 		bge t1, t0, LASER_EM_COOLDOWN	#if t1 >= t0, FIM %
0000063f : 0fc21317;   % 2360: 		la t1, mapa_teste_153		#endereco do mini_background %
00000640 : 30c30313;   % 2360:  %
00000641 : 00830313;   % 2361: 		addi t1, t1, 8			#pula a largura e a altura %
00000642 : 09900e13;   % 2362: 		li t3, 153			#carrega 4 em t3 %
00000643 : 00150e83;   % 2363: 		lb t4, 1(a0)			#carrega o y em t4 %
00000644 : 03ce8eb3;   % 2364: 		mul t4, t4, t3			#em qual linha o CHAR est  %
00000645 : 00250e03;   % 2365: 		lb t3, 2(a0)			#carrega o x em t3 %
00000646 : 01ce8eb3;   % 2366: 		add t4, t4, t3			#em qual coluna o CHAR est  %
00000647 : 01d30333;   % 2367: 		add t1, t1, t4			#endereco do CHAR_POS na matriz %
00000648 : 06400e13;   % 2368: 		li t3, 100 %
00000649 : 000002b3;   % 2369: 		mv t0, zero %
0000064a : 00050383;   % 2371: 		lb t2, 0(a0) %
0000064b : 00000e13;   % 2372: 		li t3, 0 %
0000064c : 01c30023;   % 2373: 		sb t3, 0(t1) %
0000064d : f6730313;   % 2374: 		addi t1, t1, -153 %
0000064e : 00728663;   % 2375: 		beq t0, t2, CONT2 %
0000064f : 00128293;   % 2376: 		addi t0, t0, 1 %
00000650 : fe9ff06f;   % 2377: 		j DESLIGA_PROC %
00000651 : 000501a3;   % 2379: 		sb zero, 3(a0) %
00000652 : c01022f3;   % 2380: 		csrr t0, time %
00000653 : 0055a023;   % 2381: 		sw t0, 0(a1) %
00000654 : 00008067;   % 2382: 		ret %
00000655 : 00008067;   % 2385: 		ret %
00000656 : 0fc23297;   % 2388: 		la t0, VIDA_BOSS %
00000657 : 4f628293;   % 2388:  %
00000658 : 00028283;   % 2389: 		lb t0, 0(t0) %
00000659 : 02028063;   % 2390: 		beq t0, zero, FIM_DO_BOSS %
0000065a : 00100293;   % 2391: 		li t0, 1			#t0 = 1 %
0000065b : 005472b3;   % 2392: 		and t0, s0, t0			#t0 = t0 and s7 %
0000065c : 00028663;   % 2393: 		beq t0, zero, BOSS_RED		#if a3 == t0, CASE3_2 %
0000065d : 03c00f13;   % 2394: 		li t5, 60 %
0000065e : 0240006f;   % 2395: 		j BOSS_COLOR %
0000065f : 03d00f13;   % 2397: 		li t5, 61 %
00000660 : 01c0006f;   % 2398: 		j BOSS_COLOR %
00000661 : 0fc23297;   % 2401: 		la t0, BOSS_MORTO %
00000662 : 4ce28293;   % 2401:  %
00000663 : 00028023;   % 2402: 		sb zero, 0(t0) %
00000664 : 00000f13;   % 2403: 		li t5, 0 %
00000665 : 0080006f;   % 2404: 		j BOSS_COLOR %
00000666 : 00008067;   % 2405: 		ret %
00000667 : 0fc21297;   % 2407: 		la t0, mapa_teste_153	#endereco do mini_background %
00000668 : 26c28293;   % 2407:  %
00000669 : 00828293;   % 2408: 		addi t0, t0, 8		#pula a largura e a altura %
0000066a : 0fc23397;   % 2409: 		la t2, BOSS_POS		#endereco de CHAR_POS %
0000066b : 44438393;   % 2409:  %
0000066c : 09900e13;   % 2410: 		li t3, 153		#carrega 8 em t3 %
0000066d : 00039e83;   % 2411: 		lh t4, 0(t2)		#carrega o y em t4 %
0000066e : 03ce8eb3;   % 2412: 		mul t4, t4, t3		#em qual linha o CHAR est  %
0000066f : 00239e03;   % 2413: 		lh t3, 2(t2)		#carrega o x em t3 %
00000670 : 01ce8eb3;   % 2414: 		add t4, t4, t3		#em qual coluna o CHAR est  %
00000671 : 01d282b3;   % 2415: 		add t0, t0, t4		#endereco do CHAR_POS na matriz %
00000672 : 01e003b3;   % 2416: 		mv t2, t5 %
00000673 : 00728023;   % 2417: 		sb t2, 0(t0) %
00000674 : 00128293;   % 2418: 		addi t0, t0, 1 %
00000675 : 00728023;   % 2419: 		sb t2, 0(t0) %
00000676 : 00128293;   % 2420: 		addi t0, t0, 1 %
00000677 : 00728023;   % 2421: 		sb t2, 0(t0) %
00000678 : 00128293;   % 2422: 		addi t0, t0, 1 %
00000679 : 00728023;   % 2423: 		sb t2, 0(t0) %
0000067a : 00128293;   % 2424: 		addi t0, t0, 1 %
0000067b : 00728023;   % 2425: 		sb t2, 0(t0) %
0000067c : f6728293;   % 2426: 		addi t0, t0, -153 %
0000067d : 00728023;   % 2427: 		sb t2, 0(t0) %
0000067e : fff28293;   % 2428: 		addi t0, t0, -1 %
0000067f : 00728023;   % 2429: 		sb t2, 0(t0) %
00000680 : fff28293;   % 2430: 		addi t0, t0, -1 %
00000681 : 00728023;   % 2431: 		sb t2, 0(t0) %
00000682 : fff28293;   % 2432: 		addi t0, t0, -1 %
00000683 : 00728023;   % 2433: 		sb t2, 0(t0) %
00000684 : fff28293;   % 2434: 		addi t0, t0, -1 %
00000685 : 00728023;   % 2435: 		sb t2, 0(t0) %
00000686 : f6728293;   % 2436: 		addi t0, t0, -153 %
00000687 : 00728023;   % 2437: 		sb t2, 0(t0) %
00000688 : 00128293;   % 2438: 		addi t0, t0, 1 %
00000689 : 00728023;   % 2439: 		sb t2, 0(t0) %
0000068a : 00128293;   % 2440: 		addi t0, t0, 1 %
0000068b : 00728023;   % 2441: 		sb t2, 0(t0) %
0000068c : 00128293;   % 2442: 		addi t0, t0, 1 %
0000068d : 00728023;   % 2443: 		sb t2, 0(t0) %
0000068e : 00128293;   % 2444: 		addi t0, t0, 1 %
0000068f : 00728023;   % 2445: 		sb t2, 0(t0) %
00000690 : f6728293;   % 2446: 		addi t0, t0, -153 %
00000691 : 00728023;   % 2447: 		sb t2, 0(t0) %
00000692 : fff28293;   % 2448: 		addi t0, t0, -1 %
00000693 : 00728023;   % 2449: 		sb t2, 0(t0) %
00000694 : fff28293;   % 2450: 		addi t0, t0, -1 %
00000695 : 00728023;   % 2451: 		sb t2, 0(t0) %
00000696 : fff28293;   % 2452: 		addi t0, t0, -1 %
00000697 : 00728023;   % 2453: 		sb t2, 0(t0) %
00000698 : fff28293;   % 2454: 		addi t0, t0, -1 %
00000699 : 00728023;   % 2455: 		sb t2, 0(t0) %
0000069a : f6728293;   % 2456: 		addi t0, t0, -153 %
0000069b : 00728023;   % 2457: 		sb t2, 0(t0) %
0000069c : 00128293;   % 2458: 		addi t0, t0, 1 %
0000069d : 00728023;   % 2459: 		sb t2, 0(t0) %
0000069e : 00128293;   % 2460: 		addi t0, t0, 1 %
0000069f : 00728023;   % 2461: 		sb t2, 0(t0) %
000006a0 : 00128293;   % 2462: 		addi t0, t0, 1 %
000006a1 : 00728023;   % 2463: 		sb t2, 0(t0) %
000006a2 : 00128293;   % 2464: 		addi t0, t0, 1 %
000006a3 : 00728023;   % 2465: 		sb t2, 0(t0) %
000006a4 : 00008067;   % 2466: 		ret %
000006a5 : 0420d073;   % 106: 	csrwi ucause,1		# caso ocorra dropdown vai gerar exceção de instrução inválida %
000006a6 : ff810113;   % 108: ExceptionHandling:	addi 	sp, sp, -8 	# salva 2 registradores utilizados para comparar ucause %
000006a7 : 00512023;   % 109: 	sw 	t0, 0(sp) %
000006a8 : 01a12223;   % 110: 	sw 	s10, 4(sp) %
000006a9 : 04202d73;   % 112: 	csrr	s10,ucause     # le o ucause e salva em s10 %
000006aa : 00800293;   % 114: 	li 	t0, 8 %
000006ab : 01a29a63;   % 115: 	bne 	t0, s10, errorExceptions  	# Não é ecall - nem precisa arrumar a pilha! %
000006ac : 00012283;   % 117: 	lw 	t0, 0(sp)			# É ecall %
000006ad : 00412d03;   % 118:     	lw 	s10, 4(sp)  			# recupera registradores usados %
000006ae : 00810113;   % 119:     	addi 	sp, sp, 8			 %
000006af : 1e00006f;   % 120: 	j 	ecallException %
000006b0 : 04302df3;   % 126: errorExceptions: csrr 	s11, utval      # le o utval da exceção e salva em s11	 %
000006b1 : 0c000513;   % 127: 	addi 	a0, zero, 0xc0 		## printa tela de azul %
000006b2 : 00000593;   % 128: 	addi 	a1, zero, 0 %
000006b3 : 09400893;   % 129: 	addi 	a7, zero, 148 %
000006b4 : 370010ef;   % 130: 	jal 	clsCLS %
000006b5 : 00000293;   % 133: End_Cause0:	li 	t0, 0 %
000006b6 : 03a29263;   % 134: 		bne 	t0, s10, End_Cause1 %
000006b7 : 0fc24517;   % 135: 		la 	a0, Cause0 %
000006b8 : a1850513;   % 135:  %
000006b9 : 00000593;   % 136: 		li 	a1, 0 %
000006ba : 00100613;   % 137: 		li 	a2, 1 %
000006bb : 0000c6b7;   % 138: 		li 	a3, 0x0000c0ff %
000006bc : 0ff68693;   % 138:  %
000006bd : 16d000ef;   % 139: 		jal	printString %
000006be : 16c0006f;   % 140: 		j	End_uepc %
000006bf : 00100293;   % 143: End_Cause1:	li 	t0, 1 %
000006c0 : 03a29263;   % 144: 		bne 	t0, s10, End_Cause2 %
000006c1 : 0fc24517;   % 145: 		la 	a0, Cause1 %
000006c2 : a1950513;   % 145:  %
000006c3 : 00000593;   % 146: 		li 	a1, 0 %
000006c4 : 00100613;   % 147: 		li 	a2, 1 %
000006c5 : 0000c6b7;   % 148: 		li 	a3, 0x0000c0ff %
000006c6 : 0ff68693;   % 148:  %
000006c7 : 145000ef;   % 149: 		jal 	printString	 %
000006c8 : 1440006f;   % 150: 		j	End_uepc %
000006c9 : 00200293;   % 153: End_Cause2:	li 	t0, 2 %
000006ca : 03a29663;   % 154: 		bne 	t0, s10, End_Cause4 %
000006cb : 0fc24517;   % 155: 		la 	a0, Cause2 %
000006cc : a1450513;   % 155:  %
000006cd : 00000593;   % 156: 		li 	a1, 0 %
000006ce : 00100613;   % 157: 		li 	a2, 1 %
000006cf : 0000c6b7;   % 158: 		li 	a3, 0x0000c0ff %
000006d0 : 0ff68693;   % 158:  %
000006d1 : 11d000ef;   % 159: 		jal 	printString %
000006d2 : 0fc24517;   % 161: 		la 	a0, Instr %
000006d3 : abe50513;   % 161:  %
000006d4 : 0e80006f;   % 162: 		j	End_utval %
000006d5 : 00400293;   % 165: End_Cause4:	addi 	t0, zero, 4 %
000006d6 : 03a29663;   % 166: 		bne	t0, s10, End_Cause5 %
000006d7 : 0fc24517;   % 167: 		la 	a0, Cause4 %
000006d8 : a0150513;   % 167:  %
000006d9 : 00000593;   % 168: 		li 	a1, 0 %
000006da : 00100613;   % 169: 		li 	a2, 1 %
000006db : 0000c6b7;   % 170: 		li 	a3, 0x0000c0ff %
000006dc : 0ff68693;   % 170:  %
000006dd : 0ed000ef;   % 171: 		jal	printString %
000006de : 0fc24517;   % 173: 		la 	a0, Addrs %
000006df : a8650513;   % 173:  %
000006e0 : 0b80006f;   % 174: 		j	End_utval %
000006e1 : 00500293;   % 177: End_Cause5:	li 	t0, 5 %
000006e2 : 03a29663;   % 178: 		bne 	t0, s10, End_Cause6 %
000006e3 : 0fc24517;   % 179: 		la 	a0, Cause5 %
000006e4 : 9f350513;   % 179:  %
000006e5 : 00000593;   % 180: 		li 	a1, 0 %
000006e6 : 00100613;   % 181: 		li 	a2, 1 %
000006e7 : 0000c6b7;   % 182: 		li 	a3, 0x0000c0ff %
000006e8 : 0ff68693;   % 182:  %
000006e9 : 0bd000ef;   % 183: 		jal 	printString	 %
000006ea : 0fc24517;   % 185: 		la 	a0, Addrs %
000006eb : a5650513;   % 185:  %
000006ec : 0880006f;   % 186: 		j	End_utval %
000006ed : 00600293;   % 189: End_Cause6:	li 	t0, 6 %
000006ee : 03a29663;   % 190: 		bne 	t0, s10, End_Cause7 %
000006ef : 0fc24517;   % 191: 		la 	a0, Cause6 %
000006f0 : 9df50513;   % 191:  %
000006f1 : 00000593;   % 192: 		li 	a1, 0 %
000006f2 : 00100613;   % 193: 		li 	a2, 1 %
000006f3 : 0000c6b7;   % 194: 		li 	a3, 0x0000c0ff %
000006f4 : 0ff68693;   % 194:  %
000006f5 : 08d000ef;   % 195: 		jal 	printString %
000006f6 : 0fc24517;   % 197: 		la 	a0, Addrs %
000006f7 : a2650513;   % 197:  %
000006f8 : 0580006f;   % 198: 		j	End_utval %
000006f9 : 00700293;   % 201: End_Cause7:	li 	t0, 7 %
000006fa : 03a29663;   % 202: 		bne 	t0, s10, End_CauseD %
000006fb : 0fc24517;   % 203: 		la 	a0, Cause7 %
000006fc : 9d250513;   % 203:  %
000006fd : 00000593;   % 204: 		li 	a1, 0 %
000006fe : 00100613;   % 205: 		li 	a2, 1 %
000006ff : 0000c6b7;   % 206: 		li 	a3, 0x0000c0ff %
00000700 : 0ff68693;   % 206:  %
00000701 : 05d000ef;   % 207: 		jal 	printString %
00000702 : 0fc24517;   % 209: 		la 	a0, Addrs %
00000703 : 9f650513;   % 209:  %
00000704 : 0280006f;   % 210: 		j	End_utval %
00000705 : 0fc24517;   % 213: End_CauseD: 	la 	a0, CauseD %
00000706 : 9c750513;   % 213:  %
00000707 : 00000593;   % 214: 		li 	a1, 0 %
00000708 : 00100613;   % 215: 		li 	a2, 1 %
00000709 : 0000c6b7;   % 216: 		li 	a3, 0x0000c0ff %
0000070a : 0ff68693;   % 216:  %
0000070b : 035000ef;   % 217: 		jal 	printString %
0000070c : 0fc24517;   % 219: 		la 	a0, Addrs %
0000070d : 9ce50513;   % 219:  %
0000070e : 00000593;   % 222: End_utval:	li 	a1, 0 %
0000070f : 01800613;   % 223: 		li 	a2, 24 %
00000710 : 0000c6b7;   % 224: 		li 	a3, 0x000c0ff %
00000711 : 0ff68693;   % 224:  %
00000712 : 019000ef;   % 225: 		jal	printString %
00000713 : 01b00533;   % 227: 		mv 	a0, s11 %
00000714 : 03800593;   % 228: 		li 	a1, 56 %
00000715 : 01800613;   % 229: 		li 	a2, 24 %
00000716 : 0000c6b7;   % 230: 		li 	a3, 0x0000c0ff %
00000717 : 0ff68693;   % 230:  %
00000718 : 78c000ef;   % 231: 		jal 	printHex %
00000719 : 0fc24517;   % 234: End_uepc: 	la 	a0, PC 		# Imprime o pc em que a exceção ocorreu %
0000071a : 99550513;   % 234:  %
0000071b : 00000593;   % 235: 		li 	a1, 0 %
0000071c : 00c00613;   % 236: 		li 	a2, 12 %
0000071d : 0000c6b7;   % 237: 		li 	a3, 0x000c0ff %
0000071e : 0ff68693;   % 237:  %
0000071f : 7e4000ef;   % 238: 		jal 	printString %
00000720 : 04102573;   % 240: 		csrr 	a0, uepc	# Le uepc	 %
00000721 : 01c00593;   % 241: 		li	a1, 28 %
00000722 : 00c00613;   % 242: 		li 	a2, 12 %
00000723 : 0000c6b7;   % 243: 		li 	a3, 0x0000c0ff %
00000724 : 0ff68693;   % 243:  %
00000725 : 758000ef;   % 244: 		jal 	printHex	 %
00000726 : 2800006f;   % 246: 		j goToExit 		# encerra execução %
00000727 : ef810113;   % 253: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
00000728 : 00112023;   % 254:     sw     x1,    0(sp) %
00000729 : 00212223;   % 255:     sw     x2,    4(sp) %
0000072a : 00312423;   % 256:     sw     x3,    8(sp) %
0000072b : 00412623;   % 257:     sw     x4,   12(sp) %
0000072c : 00512823;   % 258:     sw     x5,   16(sp) %
0000072d : 00612a23;   % 259:     sw     x6,   20(sp) %
0000072e : 00712c23;   % 260:     sw     x7,   24(sp) %
0000072f : 00812e23;   % 261:     sw     x8,   28(sp) %
00000730 : 02912023;   % 262:     sw     x9,   32(sp) %
00000731 : 02a12223;   % 263:     sw     x10,  36(sp) %
00000732 : 02b12423;   % 264:     sw     x11,  40(sp) %
00000733 : 02c12623;   % 265:     sw     x12,  44(sp) %
00000734 : 02d12823;   % 266:     sw     x13,  48(sp) %
00000735 : 02e12a23;   % 267:     sw     x14,  52(sp) %
00000736 : 02f12c23;   % 268:     sw     x15,  56(sp) %
00000737 : 03012e23;   % 269:     sw     x16,  60(sp) %
00000738 : 05112023;   % 270:     sw     x17,  64(sp) %
00000739 : 05212223;   % 271:     sw     x18,  68(sp) %
0000073a : 05312423;   % 272:     sw     x19,  72(sp) %
0000073b : 05412623;   % 273:     sw     x20,  76(sp) %
0000073c : 05512823;   % 274:     sw     x21,  80(sp) %
0000073d : 05612a23;   % 275:     sw     x22,  84(sp) %
0000073e : 05712c23;   % 276:     sw     x23,  88(sp) %
0000073f : 05812e23;   % 277:     sw     x24,  92(sp) %
00000740 : 07912023;   % 278:     sw     x25,  96(sp) %
00000741 : 07a12223;   % 279:     sw     x26, 100(sp) %
00000742 : 07b12423;   % 280:     sw     x27, 104(sp) %
00000743 : 07c12623;   % 281:     sw     x28, 108(sp) %
00000744 : 07d12823;   % 282:     sw     x29, 112(sp) %
00000745 : 07e12a23;   % 283:     sw     x30, 116(sp) %
00000746 : 07f12c23;   % 284:     sw     x31, 120(sp) %
00000747 : 30102c73;   % 285: <22> csrr s8, misa %
00000748 : 020c7c13;   % 285: <23> andi s8, s8, 0x020 %
00000749 : 080c0263;   % 285: <24> beqz s8, ecallException.pula %
0000074a : 06012e27;   % 286:     fsw    f0,  124(sp) %
0000074b : 08112027;   % 287:     fsw    f1,  128(sp) %
0000074c : 08212227;   % 288:     fsw    f2,  132(sp) %
0000074d : 08312427;   % 289:     fsw    f3,  136(sp) %
0000074e : 08412627;   % 290:     fsw    f4,  140(sp) %
0000074f : 08512827;   % 291:     fsw    f5,  144(sp) %
00000750 : 08612a27;   % 292:     fsw    f6,  148(sp) %
00000751 : 08712c27;   % 293:     fsw    f7,  152(sp) %
00000752 : 08812e27;   % 294:     fsw    f8,  156(sp) %
00000753 : 0a912027;   % 295:     fsw    f9,  160(sp) %
00000754 : 0aa12227;   % 296:     fsw    f10, 164(sp) %
00000755 : 0ab12427;   % 297:     fsw    f11, 168(sp) %
00000756 : 0ac12627;   % 298:     fsw    f12, 172(sp) %
00000757 : 0ad12827;   % 299:     fsw    f13, 176(sp) %
00000758 : 0ae12a27;   % 300:     fsw    f14, 180(sp) %
00000759 : 0af12c27;   % 301:     fsw    f15, 184(sp) %
0000075a : 0b012e27;   % 302:     fsw    f16, 188(sp) %
0000075b : 0d112027;   % 303:     fsw    f17, 192(sp) %
0000075c : 0d212227;   % 304:     fsw    f18, 196(sp) %
0000075d : 0d312427;   % 305:     fsw    f19, 200(sp) %
0000075e : 0d412627;   % 306:     fsw    f20, 204(sp) %
0000075f : 0d512827;   % 307:     fsw    f21, 208(sp) %
00000760 : 0d612a27;   % 308:     fsw    f22, 212(sp) %
00000761 : 0d712c27;   % 309:     fsw    f23, 216(sp) %
00000762 : 0d812e27;   % 310:     fsw    f24, 220(sp) %
00000763 : 0f912027;   % 311:     fsw    f25, 224(sp) %
00000764 : 0fa12227;   % 312:     fsw    f26, 228(sp) %
00000765 : 0fb12427;   % 313:     fsw    f27, 232(sp) %
00000766 : 0fc12627;   % 314:     fsw    f28, 236(sp) %
00000767 : 0fd12827;   % 315:     fsw    f29, 240(sp) %
00000768 : 0fe12a27;   % 316:     fsw    f30, 244(sp) %
00000769 : 0ff12c27;   % 317:     fsw    f31, 248(sp) %
0000076a : 000002b3;   % 320:     add     t0, zero, zero %
0000076b : 00000333;   % 321:     add     t1, zero, zero %
0000076c : 000003b3;   % 322:     add     t2, zero, zero %
0000076d : 00000e33;   % 323:     add     t3, zero, zero %
0000076e : 00000eb3;   % 324:     add     t4, zero, zero %
0000076f : 00000f33;   % 325:     add     t5, zero, zero %
00000770 : 00000fb3;   % 326:     add     t6, zero, zero %
00000771 : 00a00293;   % 331:     addi    t0, zero, 10 %
00000772 : 15128863;   % 332:     beq     t0, a7, goToExit          # ecall exit %
00000773 : 06e00293;   % 333:     addi    t0, zero, 110 %
00000774 : 15128463;   % 334:     beq     t0, a7, goToExit          # ecall exit %
00000775 : 00100293;   % 336:     addi    t0, zero, 1               # ecall 1 = print int %
00000776 : 15128c63;   % 337:     beq     t0, a7, goToPrintInt %
00000777 : 06500293;   % 338:     addi    t0, zero, 101             # ecall 1 = print int %
00000778 : 15128863;   % 339:     beq     t0, a7, goToPrintInt %
00000779 : 00200293;   % 341:     addi    t0, zero, 2               # ecall 2 = print float %
0000077a : 17128063;   % 342:     beq     t0, a7, goToPrintFloat %
0000077b : 06600293;   % 343:     addi    t0, zero, 102             # ecall 2 = print float %
0000077c : 15128c63;   % 344:     beq     t0, a7, goToPrintFloat %
0000077d : 00300293;   % 346:     addi    t0, zero, 3               # ecall 3 = print double %
0000077e : 17128263;   % 347:     beq     t0, a7, goToPrintDouble %
0000077f : 06700293;   % 348:     addi    t0, zero, 103             # ecall 3 = print double %
00000780 : 15128e63;   % 349:     beq     t0, a7, goToPrintDouble %
00000781 : 00400293;   % 351:     addi    t0, zero, 4               # ecall 4 = print string %
00000782 : 13128863;   % 352:     beq     t0, a7, goToPrintString %
00000783 : 06800293;   % 353:     addi    t0, zero, 104             # ecall 4 = print string %
00000784 : 13128463;   % 354:     beq     t0, a7, goToPrintString %
00000785 : 00500293;   % 356:     addi    t0, zero, 5               # ecall 5 = read int %
00000786 : 17128063;   % 357:     beq     t0, a7, goToReadInt %
00000787 : 06900293;   % 358:     addi    t0, zero, 105             # ecall 5 = read int %
00000788 : 15128c63;   % 359:     beq     t0, a7, goToReadInt %
00000789 : 00600293;   % 361:     addi    t0, zero, 6               # ecall 6 = read float %
0000078a : 17128063;   % 362:     beq     t0, a7, goToReadFloat %
0000078b : 06a00293;   % 363:     addi    t0, zero, 106             # ecall 6 = read float %
0000078c : 15128c63;   % 364:     beq     t0, a7, goToReadFloat %
0000078d : 00700293;   % 366:     addi    t0, zero, 7               # ecall 7 = read Double %
0000078e : 17128263;   % 367:     beq     t0, a7, goToReadDouble %
0000078f : 06b00293;   % 368:     addi    t0, zero, 107             # ecall 7 = read Double %
00000790 : 15128e63;   % 369:     beq     t0, a7, goToReadDouble %
00000791 : 00800293;   % 371:     addi    t0, zero, 8               # ecall 8 = read string %
00000792 : 13128c63;   % 372:     beq     t0, a7, goToReadString %
00000793 : 06c00293;   % 373:     addi    t0, zero, 108             # ecall 8 = read string %
00000794 : 13128863;   % 374:     beq     t0, a7, goToReadString %
00000795 : 00b00293;   % 376:     addi    t0, zero, 11              # ecall 11 = print char %
00000796 : 0f128463;   % 377:     beq     t0, a7, goToPrintChar %
00000797 : 06f00293;   % 378:     addi    t0, zero, 111             # ecall 11 = print char %
00000798 : 0f128063;   % 379:     beq     t0, a7, goToPrintChar %
00000799 : 00c00293;   % 381:     addi    t0, zero, 12              # ecall 12 = read char %
0000079a : 11128463;   % 382:     beq     t0, a7, goToReadChar %
0000079b : 07000293;   % 383:     addi    t0, zero, 112             # ecall 12 = read char %
0000079c : 11128063;   % 384:     beq     t0, a7, goToReadChar %
0000079d : 01e00293;   % 387:     addi    t0, zero, 30              # ecall 30 = time %
0000079e : 15128c63;   % 388:     beq     t0, a7, goToTime %
0000079f : 08200293;   % 389:     addi    t0, zero, 130             # ecall 30 = time %
000007a0 : 15128863;   % 390:     beq     t0, a7, goToTime %
000007a1 : 01f00293;   % 392:     addi    t0, zero, 31              # ecall 31 = MIDI out %
000007a2 : 13128c63;   % 393:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
000007a3 : 08300293;   % 394:     addi    t0, zero, 131             # ecall 31 = MIDI out %
000007a4 : 13128863;   % 395:     beq     t0, a7, goToMidiOut %
000007a5 : 02000293;   % 397:     addi    t0, zero, 32              # ecall 32 = sleep %
000007a6 : 15128063;   % 398:     beq     t0, a7, goToSleep %
000007a7 : 08400293;   % 399:     addi    t0, zero, 132             # ecall 32 = sleep %
000007a8 : 13128c63;   % 400:     beq     t0, a7, goToSleep %
000007a9 : 02100293;   % 402:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
000007aa : 13128063;   % 403:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
000007ab : 08500293;   % 404:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
000007ac : 11128c63;   % 405:     beq     t0, a7, goToMidiOutSync %
000007ad : 02200293;   % 407:     addi    t0, zero, 34       		# ecall 34 = print hex %
000007ae : 0f128c63;   % 408:     beq     t0, a7, goToPrintHex %
000007af : 08600293;   % 409:     addi    t0, zero, 134		# ecall 34 = print hex %
000007b0 : 0f128863;   % 410:     beq     t0, a7, goToPrintHex %
000007b1 : 02400293;   % 418:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
000007b2 : 0f128863;   % 419:     beq     t0, a7, goToPrintIntUnsigned %
000007b3 : 08800293;   % 420:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
000007b4 : 0f128463;   % 421:     beq     t0, a7, goToPrintIntUnsigned %
000007b5 : 02900293;   % 424:     addi    t0, zero, 41              # ecall 41 = random %
000007b6 : 11128463;   % 425:     beq     t0, a7, goToRandom %
000007b7 : 08d00293;   % 426:     addi    t0, zero, 141             # ecall 41 = random %
000007b8 : 11128063;   % 427:     beq     t0, a7, goToRandom %
000007b9 : 02a00293;   % 429:     addi    t0, zero, 42              # ecall 41 = random %
000007ba : 11128063;   % 430:     beq     t0, a7, goToRandom2 %
000007bb : 08e00293;   % 431:     addi    t0, zero, 142             # ecall 41 = random %
000007bc : 0f128c63;   % 432:     beq     t0, a7, goToRandom2 %
000007bd : 02f00293;   % 435:     addi    t0, zero, 47              # ecall 47 = DrawLine %
000007be : 11128063;   % 436:     beq     t0, a7, goToBRES %
000007bf : 09300293;   % 437:     addi    t0, zero, 147              # ecall 47 = DrawLine %
000007c0 : 0f128c63;   % 438:     beq     t0, a7, goToBRES     %
000007c1 : 03000293;   % 440:     addi    t0, zero, 48              # ecall 48 = CLS %
000007c2 : 0f128463;   % 441:     beq     t0, a7, goToCLS %
000007c3 : 09400293;   % 442:     addi    t0, zero, 148              # ecall 48 = CLS %
000007c4 : 0f128063;   % 443:     beq     t0, a7, goToCLS %
000007c5 : 1f8000ef;   % 448:     jal NaoExisteEcall  # ecall inexistente %
000007c6 : 10008c37;   % 451: <9> li s8, 0x10008000	# carrega tp %
000007c7 : 000c0c13;   % 451:  %
000007c8 : 01819663;   % 451: <10> bne gp, s8, goToExitDE2	# Na DE1 gp = 0 ! Não tem segmento .extern %
000007c9 : 00a00893;   % 452: 			li 	a7, 10			# chama o ecall normal do Rars %
000007ca : 00000073;   % 453: 			ecall				# exit ecall	 %
000007cb : 0000006f;   % 454: 	goToExitDE2:	j 	goToExitDE2		# trava o processador : Não tem sistema operacional! %
000007cc : 240000ef;   % 456: 	goToPrintInt:	jal     printInt               	# chama printInt %
000007cd : 0cc0006f;   % 457: 			j       endEcall %
000007ce : 528000ef;   % 459: 	goToPrintString: jal     printString           	# chama printString %
000007cf : 0c40006f;   % 460: 			 j       endEcall %
000007d0 : 568000ef;   % 462: 	goToPrintChar:	jal     printChar		# chama printChar %
000007d1 : 0bc0006f;   % 463: 			j       endEcall %
000007d2 : 30102c73;   % 465: <22> csrr s8, misa %
000007d3 : 020c7c13;   % 465: <23> andi s8, s8, 0x020 %
000007d4 : 1a0c0e63;   % 465: <24> beqz s8, NaoExisteEcall %
000007d5 : 1d9000ef;   % 466: 			jal     printFloat		# chama printFloat %
000007d6 : 0a80006f;   % 467: 			j       endEcall %
000007d7 : 30102c73;   % 469: <22> csrr s8, misa %
000007d8 : 020c7c13;   % 469: <23> andi s8, s8, 0x020 %
000007d9 : 1a0c0463;   % 469: <24> beqz s8, NaoExisteEcall %
000007da : 3c9000ef;   % 470: 			jal     printDouble		# chama printDuble %
000007db : 0940006f;   % 471: 			j       endEcall %
000007dc : 674000ef;   % 474: 	goToReadChar:	jal     readChar              	# chama readChar %
000007dd : 08c0006f;   % 475: 			j       endEcall %
000007de : 79c000ef;   % 477: 	goToReadInt:   	jal     readInt                 # chama readInt %
000007df : 0840006f;   % 478: 			j       endEcall %
000007e0 : 704000ef;   % 480: 	goToReadString:	jal     readString              # chama readString %
000007e1 : 07c0006f;   % 481: 			j       endEcall %
000007e2 : 30102c73;   % 483: <22> csrr s8, misa %
000007e3 : 020c7c13;   % 483: <23> andi s8, s8, 0x020 %
000007e4 : 160c0e63;   % 483: <24> beqz s8, NaoExisteEcall %
000007e5 : 3a5000ef;   % 484: 			jal     readFloat               # chama readFloat %
000007e6 : 0680006f;   % 485: 			j       endEcall %
000007e7 : 30102c73;   % 487: <22> csrr s8, misa %
000007e8 : 020c7c13;   % 487: <23> andi s8, s8, 0x020 %
000007e9 : 160c0463;   % 487: <24> beqz s8, NaoExisteEcall %
000007ea : 38d000ef;   % 488: 			jal     readDouble               # chama readDouble %
000007eb : 0540006f;   % 489: 			j       endEcall %
000007ec : 43c000ef;   % 492: 	goToPrintHex:	jal     printHex                # chama printHex %
000007ed : 04c0006f;   % 493: 			j       endEcall %
000007ee : 0a0010ef;   % 495: 	goToPrintIntUnsigned: 	jal	printIntUnsigned	# chama Print Unsigned Int %
000007ef : 0440006f;   % 496: 				j	endEcall   %
000007f0 : 065000ef;   % 498: 	goToMidiOut:	jal     midiOut                 # chama MIDIout %
000007f1 : 03c0006f;   % 499: 			j       endEcall %
000007f2 : 0d5000ef;   % 501: 	goToMidiOutSync: jal     midiOutSync   		# chama MIDIoutSync %
000007f3 : 0340006f;   % 502: 			 j       endEcall %
000007f4 : 5cd000ef;   % 504: 	goToTime:	jal     Time                    # chama time %
000007f5 : 02c0006f;   % 505: 			j       endEcall %
000007f6 : 5e9000ef;   % 507: 	goToSleep:	jal     Sleep                  	# chama sleep %
000007f7 : 0240006f;   % 508: 			j       endEcall %
000007f8 : 60d000ef;   % 510: 	goToRandom:	jal     Random                 	# chama random %
000007f9 : 01c0006f;   % 511: 			j       endEcall %
000007fa : 62d000ef;   % 513: 	goToRandom2:	jal     Random2                 # chama random2 %
000007fb : 0140006f;   % 514: 			j       endEcall %
000007fc : 651000ef;   % 516: 	goToCLS:	jal     clsCLS                 	# chama CLS %
000007fd : 00c0006f;   % 517: 			j       endEcall %
000007fe : 6a5000ef;   % 519: 	goToBRES:	jal     BRESENHAM               # chama BRESENHAM %
000007ff : 0040006f;   % 520: 			j       endEcall    	 %
00000800 : 00012083;   % 524: endEcall:  	lw	x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
00000801 : 00412103;   % 525: 		lw	x2,   4(sp)	 %
00000802 : 00812183;   % 526: 		lw	x3,   8(sp)	 %
00000803 : 00c12203;   % 527: 		lw	x4,  12(sp)      	 %
00000804 : 01012283;   % 528: 		lw	x5,  16(sp)      	 %
00000805 : 01412303;   % 529: 		lw	x6,  20(sp)	 %
00000806 : 01812383;   % 530: 		lw	x7,  24(sp) %
00000807 : 01c12403;   % 531: 		lw	x8,  28(sp) %
00000808 : 02012483;   % 532: 		lw	x9,  32(sp) %
00000809 : 02c12603;   % 535: 		lw     x12, 44(sp) %
0000080a : 03012683;   % 536: 		lw     x13, 48(sp) %
0000080b : 03412703;   % 537: 		lw     x14, 52(sp) %
0000080c : 03812783;   % 538: 		lw     x15, 56(sp) %
0000080d : 03c12803;   % 539: 		lw     x16, 60(sp) %
0000080e : 04012883;   % 540: 		lw     x17, 64(sp) %
0000080f : 04412903;   % 541: 		lw     x18, 68(sp) %
00000810 : 04812983;   % 542: 		lw     x19, 72(sp) %
00000811 : 04c12a03;   % 543: 		lw     x20, 76(sp) %
00000812 : 05012a83;   % 544: 		lw     x21, 80(sp) %
00000813 : 05412b03;   % 545: 		lw     x22, 84(sp) %
00000814 : 05812b83;   % 546: 		lw     x23, 88(sp) %
00000815 : 05c12c03;   % 547: 		lw     x24, 92(sp) %
00000816 : 06012c83;   % 548: 		lw     x25, 96(sp) %
00000817 : 06412d03;   % 549: 		lw     x26, 100(sp) %
00000818 : 06812d83;   % 550: 		lw     x27, 104(sp) %
00000819 : 06c12e03;   % 551: 		lw     x28, 108(sp) %
0000081a : 07012e83;   % 552: 		lw     x29, 112(sp) %
0000081b : 07412f03;   % 553: 		lw     x30, 116(sp) %
0000081c : 07812f83;   % 554: 		lw     x31, 120(sp) %
0000081d : 30102c73;   % 555: <22> csrr s8, misa %
0000081e : 020c7c13;   % 555: <23> andi s8, s8, 0x020 %
0000081f : 060c0e63;   % 555: <24> beqz s8, endEcall.pula %
00000820 : 07c12007;   % 556: 		flw    f0,  124(sp) %
00000821 : 08012087;   % 557: 		flw    f1,  128(sp) %
00000822 : 08412107;   % 558: 		flw    f2,  132(sp) %
00000823 : 08812187;   % 559: 		flw    f3,  136(sp) %
00000824 : 08c12207;   % 560: 		flw    f4,  140(sp) %
00000825 : 09012287;   % 561: 		flw    f5,  144(sp) %
00000826 : 09412307;   % 562: 		flw    f6,  148(sp) %
00000827 : 09812387;   % 563: 		flw    f7,  152(sp) %
00000828 : 09c12407;   % 564: 		flw    f8,  156(sp) %
00000829 : 0a012487;   % 565: 		flw    f9,  160(sp) %
0000082a : 0ac12607;   % 568: 		flw    f12, 172(sp) %
0000082b : 0b012687;   % 569: 		flw    f13, 176(sp) %
0000082c : 0b412707;   % 570: 		flw    f14, 180(sp) %
0000082d : 0b812787;   % 571: 		flw    f15, 184(sp) %
0000082e : 0bc12807;   % 572: 		flw    f16, 188(sp) %
0000082f : 0c012887;   % 573: 		flw    f17, 192(sp) %
00000830 : 0c412907;   % 574: 		flw    f18, 196(sp) %
00000831 : 0c812987;   % 575: 		flw    f19, 200(sp) %
00000832 : 0cc12a07;   % 576: 		flw    f20, 204(sp) %
00000833 : 0d012a87;   % 577: 		flw    f21, 208(sp) %
00000834 : 0d412b07;   % 578: 		flw    f22, 212(sp) %
00000835 : 0d812b87;   % 579: 		flw    f23, 216(sp) %
00000836 : 0dc12c07;   % 580: 		flw    f24, 220(sp) %
00000837 : 0e012c87;   % 581: 		flw    f25, 224(sp) %
00000838 : 0e412d07;   % 582: 		flw    f26, 228(sp) %
00000839 : 0e812d87;   % 583: 		flw    f27, 232(sp) %
0000083a : 0ec12e07;   % 584: 		flw    f28, 236(sp) %
0000083b : 0f012e87;   % 585: 		flw    f29, 240(sp) %
0000083c : 0f412f07;   % 586: 		flw    f30, 244(sp) %
0000083d : 0f812f87;   % 587: 		flw    f31, 248(sp) %
0000083e : 10810113;   % 589: endEcall.pula:	addi    sp, sp, 264 %
0000083f : 04102273;   % 591: 		csrr 	tp, uepc 	# le o valor de EPC salvo no registrador uepc (reg 65) %
00000840 : 00420213;   % 592: 		addi 	tp, tp, 4	# soma 4 para obter a instrucao seguinte ao ecall %
00000841 : 04121073;   % 593: 		csrw 	tp, uepc	# coloca no registrador uepc %
00000842 : 00200073;   % 594: 		uret			# retorna PC=uepc %
00000843 : 0c000513;   % 602: NaoExisteEcall: addi 	a0, zero, 0xc0 		## printa tela de azul %
00000844 : 00000593;   % 603: 		addi 	a1, zero, 0 %
00000845 : 01100833;   % 604: 		mv 	a6, a7 %
00000846 : 09400893;   % 605: 		addi 	a7, zero, 148 %
00000847 : 525000ef;   % 606: 		jal 	clsCLS %
00000848 : 0fc23517;   % 607:   		la 	a0, CauseE %
00000849 : 4cb50513;   % 607:  %
0000084a : 00000593;   % 608: 		li 	a1, 0 %
0000084b : 00100613;   % 609: 		li 	a2, 1 %
0000084c : 0000c6b7;   % 610: 		li 	a3, 0x0000c0ff %
0000084d : 0ff68693;   % 610:  %
0000084e : 328000ef;   % 611: 		jal 	printString %
0000084f : 01000533;   % 612: 		mv 	a0, a6 %
00000850 : 06800593;   % 613: 		li 	a1, 104 %
00000851 : 00100613;   % 614: 		li 	a2, 1 %
00000852 : 0000c6b7;   % 615: 		li 	a3, 0x0000c0ff %
00000853 : 0ff68693;   % 615:  %
00000854 : 020000ef;   % 616: 		jal 	printInt %
00000855 : 04102573;   % 617: 		csrr	a0,uepc %
00000856 : 08800593;   % 618: 		li 	a1, 136 %
00000857 : 00100613;   % 619: 		li 	a2, 1 %
00000858 : 0000c6b7;   % 620: 		li 	a3, 0x0000c0ff %
00000859 : 0ff68693;   % 620:  %
0000085a : 284000ef;   % 621: 		jal 	printHex		 %
0000085b : dadff06f;   % 622: 		j 	goToExit %
0000085c : ffc10113;   % 634: printInt:	addi 	sp, sp, -4			# Aloca espaco %
0000085d : 00112023;   % 635: 		sw 	ra, 0(sp)			# salva ra %
0000085e : 0fc23297;   % 636: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
0000085f : 13428293;   % 636:  %
00000860 : 00055a63;   % 638: 		bge 	a0, zero, ehposprintInt		# Se eh positvo %
00000861 : 02d00313;   % 639: 		li 	t1, '-'				# carrega o sinal - %
00000862 : 00628023;   % 640: 		sb 	t1, 0(t0)			# coloca no buffer %
00000863 : 00128293;   % 641: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000864 : 40a00533;   % 642: 		sub 	a0, zero, a0			# torna o numero positivo %
00000865 : 00a00393;   % 644: ehposprintInt:  li 	t2, 10				# carrega numero 10 %
00000866 : 00000313;   % 645: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000867 : 30102c73;   % 647: <29> csrr s8, misa %
00000868 : 00cc5c13;   % 647: <30> srli s8, s8, 12 %
00000869 : 001c7c13;   % 647: <31> andi s8, s8, 0x001 %
0000086a : 1e0c1863;   % 647: <32> bnez s8, printInt.pula1 %
0000086b : ff410113;   % 648: <99> addi 	sp,sp,-12 %
0000086c : 00a12023;   % 648: <100> sw	a0,0(sp) %
0000086d : 00b12223;   % 648: <101> sw	a1,4(sp) %
0000086e : 00c12423;   % 648: <102> sw	a2,8(sp) %
0000086f : 00a00633;   % 648: <103> mv 	a2,a0 %
00000870 : 41f65593;   % 648: <104> srai 	a1,a2,31 %
00000871 : 00c00533;   % 648: <105> mv 	a0,a2 %
00000872 : 00058463;   % 648: <106> beqz 	a1,div10.pula1_M8 %
00000873 : 40c00533;   % 648: <107> neg 	a0,a2 %
00000874 : ff010113;   % 648: <65> addi 	sp, sp, -16 %
00000875 : 00a12023;   % 648: <66> sw	a0, 0(sp) %
00000876 : 00e12223;   % 648: <67> sw	a4, 4(sp) %
00000877 : 00f12423;   % 648: <68> sw	a5, 8(sp) %
00000878 : 00112623;   % 648: <69> sw	ra, 12(sp) %
00000879 : 00a00533;   % 648: <70> mv 	a0, a0 %
0000087a : 00155713;   % 648: <71> srli    a4,a0,1 %
0000087b : 00255793;   % 648: <72> srli    a5,a0,2 %
0000087c : 00f707b3;   % 648: <73> add     a5,a4,a5 %
0000087d : 0047d713;   % 648: <74> srli    a4,a5,4 %
0000087e : 00f70733;   % 648: <75> add     a4,a4,a5 %
0000087f : 00875793;   % 648: <76> srli    a5,a4,8 %
00000880 : 00e78733;   % 648: <77> add     a4,a5,a4 %
00000881 : 01075793;   % 648: <78> srli    a5,a4,16 %
00000882 : 00e787b3;   % 648: <79> add     a5,a5,a4 %
00000883 : 0037d793;   % 648: <80> srli    a5,a5,3 %
00000884 : 00279713;   % 648: <81> slli    a4,a5,2 %
00000885 : 00f70733;   % 648: <82> add     a4,a4,a5 %
00000886 : 00171713;   % 648: <83> slli    a4,a4,1 %
00000887 : 40e50533;   % 648: <84> sub     a0,a0,a4 %
00000888 : 00a53513;   % 648: <85> sltiu   a0,a0,10 %
00000889 : 00154513;   % 648: <86> xori    a0,a0,1 %
0000088a : 00f50533;   % 648: <87> add     a0,a0,a5 %
0000088b : 04051073;   % 648: <88> csrw	a0,uscratch %
0000088c : 00012503;   % 648: <89> lw	a0, 0(sp) %
0000088d : 00412703;   % 648: <90> lw	a4, 4(sp) %
0000088e : 00812783;   % 648: <91> lw	a5, 8(sp) %
0000088f : 00c12083;   % 648: <92> lw	ra, 12(sp) %
00000890 : 01010113;   % 648: <93> addi 	sp, sp, 16 %
00000891 : 04002ef3;   % 648: <94> csrr	t4,uscratch %
00000892 : 00058463;   % 648: <109> beqz 	a1,div10.pula2_M8 %
00000893 : 41d00eb3;   % 648: <110> neg 	t4,t4 %
00000894 : 040e9073;   % 648: <111> div10.pula2_M8:	csrw	t4,uscratch %
00000895 : 00012503;   % 648: <112> lw	a0,0(sp) %
00000896 : 00412583;   % 648: <113> lw 	a1,4(sp) %
00000897 : 00812603;   % 648: <114> lw	a2,8(sp) %
00000898 : 00c10113;   % 648: <115> addi 	sp,sp,12 %
00000899 : 04002ef3;   % 648: <116> csrr	t4,uscratch %
0000089a : ff010113;   % 649: <145> addi 	sp,sp,-16 %
0000089b : 00a12023;   % 649: <146> sw	a0,0(sp) %
0000089c : 00b12223;   % 649: <147> sw	a1,4(sp) %
0000089d : 00c12423;   % 649: <148> sw	a2,8(sp) %
0000089e : 00d12623;   % 649: <149> sw	a3,12(sp) %
0000089f : 00a006b3;   % 649: <151> mv 	a3,a0 %
000008a0 : 00a00613;   % 649: <152> li 	a2,10 %
000008a1 : ff410113;   % 649: <99> addi 	sp,sp,-12 %
000008a2 : 00a12023;   % 649: <100> sw	a0,0(sp) %
000008a3 : 00b12223;   % 649: <101> sw	a1,4(sp) %
000008a4 : 00c12423;   % 649: <102> sw	a2,8(sp) %
000008a5 : 00d00633;   % 649: <103> mv 	a2,a3 %
000008a6 : 41f65593;   % 649: <104> srai 	a1,a2,31 %
000008a7 : 00c00533;   % 649: <105> mv 	a0,a2 %
000008a8 : 00058463;   % 649: <106> beqz 	a1,div10.pula1_M11 %
000008a9 : 40c00533;   % 649: <107> neg 	a0,a2 %
000008aa : ff010113;   % 649: <65> addi 	sp, sp, -16 %
000008ab : 00a12023;   % 649: <66> sw	a0, 0(sp) %
000008ac : 00e12223;   % 649: <67> sw	a4, 4(sp) %
000008ad : 00f12423;   % 649: <68> sw	a5, 8(sp) %
000008ae : 00112623;   % 649: <69> sw	ra, 12(sp) %
000008af : 00a00533;   % 649: <70> mv 	a0, a0 %
000008b0 : 00155713;   % 649: <71> srli    a4,a0,1 %
000008b1 : 00255793;   % 649: <72> srli    a5,a0,2 %
000008b2 : 00f707b3;   % 649: <73> add     a5,a4,a5 %
000008b3 : 0047d713;   % 649: <74> srli    a4,a5,4 %
000008b4 : 00f70733;   % 649: <75> add     a4,a4,a5 %
000008b5 : 00875793;   % 649: <76> srli    a5,a4,8 %
000008b6 : 00e78733;   % 649: <77> add     a4,a5,a4 %
000008b7 : 01075793;   % 649: <78> srli    a5,a4,16 %
000008b8 : 00e787b3;   % 649: <79> add     a5,a5,a4 %
000008b9 : 0037d793;   % 649: <80> srli    a5,a5,3 %
000008ba : 00279713;   % 649: <81> slli    a4,a5,2 %
000008bb : 00f70733;   % 649: <82> add     a4,a4,a5 %
000008bc : 00171713;   % 649: <83> slli    a4,a4,1 %
000008bd : 40e50533;   % 649: <84> sub     a0,a0,a4 %
000008be : 00a53513;   % 649: <85> sltiu   a0,a0,10 %
000008bf : 00154513;   % 649: <86> xori    a0,a0,1 %
000008c0 : 00f50533;   % 649: <87> add     a0,a0,a5 %
000008c1 : 04051073;   % 649: <88> csrw	a0,uscratch %
000008c2 : 00012503;   % 649: <89> lw	a0, 0(sp) %
000008c3 : 00412703;   % 649: <90> lw	a4, 4(sp) %
000008c4 : 00812783;   % 649: <91> lw	a5, 8(sp) %
000008c5 : 00c12083;   % 649: <92> lw	ra, 12(sp) %
000008c6 : 01010113;   % 649: <93> addi 	sp, sp, 16 %
000008c7 : 04002573;   % 649: <94> csrr	a0,uscratch %
000008c8 : 00058463;   % 649: <109> beqz 	a1,div10.pula2_M11 %
000008c9 : 40a00533;   % 649: <110> neg 	a0,a0 %
000008ca : 04051073;   % 649: <111> div10.pula2_M11:	csrw	a0,uscratch %
000008cb : 00012503;   % 649: <112> lw	a0,0(sp) %
000008cc : 00412583;   % 649: <113> lw 	a1,4(sp) %
000008cd : 00812603;   % 649: <114> lw	a2,8(sp) %
000008ce : 00c10113;   % 649: <115> addi 	sp,sp,12 %
000008cf : 04002573;   % 649: <116> csrr	a0,uscratch %
000008d0 : ff410113;   % 649: <45> addi 	sp, sp, -12 %
000008d1 : 00a12023;   % 649: <46> sw	a0, 0(sp) %
000008d2 : 00b12223;   % 649: <47> sw	a1, 4(sp) %
000008d3 : 00112423;   % 649: <48> sw	ra, 8(sp) %
000008d4 : 00a00533;   % 649: <50> mv 	a0, a0 %
000008d5 : 00c005b3;   % 649: <51> mv 	a1, a2 %
000008d6 : 6e1000ef;   % 649: <52> jal 	__mulsi3 %
000008d7 : 04051073;   % 649: <53> csrw	a0,uscratch %
000008d8 : 00012503;   % 649: <55> lw	a0, 0(sp) %
000008d9 : 00412583;   % 649: <56> lw	a1, 4(sp) %
000008da : 00812083;   % 649: <57> lw	ra, 8(sp) %
000008db : 00c10113;   % 649: <58> addi 	sp, sp, 12 %
000008dc : 040025f3;   % 649: <59> csrr	a1,uscratch %
000008dd : 40b68e33;   % 649: <155> sub 	t3,a3,a1 %
000008de : 040e1073;   % 649: <157> csrw	t3,uscratch %
000008df : 00012503;   % 649: <158> lw	a0,0(sp) %
000008e0 : 00412583;   % 649: <159> lw 	a1,4(sp) %
000008e1 : 00812603;   % 649: <160> lw	a2,8(sp) %
000008e2 : 00c12683;   % 649: <161> lw 	a3,12(sp) %
000008e3 : 01010113;   % 649: <162> addi 	sp,sp,16 %
000008e4 : 04002e73;   % 649: <163> csrr	t3,uscratch %
000008e5 : 00c0006f;   % 650: 		j 	printInt.pula1d %
000008e6 : 02754eb3;   % 651: printInt.pula1:	div 	t4, a0, t2			# divide por 10 (quociente) %
000008e7 : 02756e33;   % 652: 		rem 	t3, a0, t2			# resto %
000008e8 : ffc10113;   % 653: printInt.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
000008e9 : 01c12023;   % 654: 		sw 	t3, 0(sp)			# coloca resto na pilha %
000008ea : 01d00533;   % 655: 		mv 	a0, t4				# atualiza o numero com o quociente %
000008eb : 00130313;   % 656: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
000008ec : de0516e3;   % 657: 		bne 	a0, zero, loop1printInt		# verifica se o numero eh zero %
000008ed : 00012383;   % 659: loop2printInt:	lw 	t2, 0(sp)			# le digito da pilha %
000008ee : 00410113;   % 660: 		addi 	sp, sp, 4			# libera espaco %
000008ef : 03038393;   % 661: 		addi 	t2, t2, 48			# converte o digito para ascii %
000008f0 : 00728023;   % 662: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
000008f1 : 00128293;   % 663: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000008f2 : fff30313;   % 664: 		addi 	t1, t1, -1			# decrementa contador de digitos %
000008f3 : fe0314e3;   % 665: 		bne 	t1, zero, loop2printInt		# eh o ultimo? %
000008f4 : 00028023;   % 666: 		sb 	zero, 0(t0)			# insere \NULL na string %
000008f5 : 0fc23517;   % 668: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
000008f6 : ed850513;   % 668:  %
000008f7 : 084000ef;   % 669: 		jal 	printString			# chama o print string %
000008f8 : 00012083;   % 671: 		lw 	ra, 0(sp)			# recupera a %
000008f9 : 00410113;   % 672: 		addi 	sp, sp, 4			# libera espaco %
000008fa : 00008067;   % 673: fimprintInt:	ret					# retorna %
000008fb : ffc10113;   % 685: printHex:	addi    sp, sp, -4    		# aloca espaco %
000008fc : 00112023;   % 686:     		sw      ra, 0(sp)		# salva ra %
000008fd : 00a002b3;   % 687: 		mv 	t0, a0			# Inteiro de 32 bits a ser impresso em Hexa %
000008fe : 0fc23317;   % 688: 		la 	t1, TabelaHexASCII	# endereco da tabela HEX->ASCII %
000008ff : 0b430313;   % 688:  %
00000900 : 0fc23397;   % 689: 		la 	t2, TempBuffer		# onde a string sera montada %
00000901 : eac38393;   % 689:  %
00000902 : 03000e13;   % 691: 		li 	t3,'0'			# Caractere '0' %
00000903 : 01c38023;   % 692: 		sb 	t3,0(t2)		# Escreve '0' no Buffer da String %
00000904 : 07800e13;   % 693: 		li 	t3,'x'			# Caractere 'x' %
00000905 : 01c380a3;   % 694: 		sb 	t3,1(t2)		# Escreve 'x' no Buffer da String %
00000906 : 00238393;   % 695: 		addi 	t2,t2,2			# novo endereco inicial da string %
00000907 : 01c00e13;   % 697: 		li 	t3, 28			# contador de nibble   inicio = 28 %
00000908 : 020e4263;   % 698: loopprintHex:	blt 	t3, zero, fimloopprintHex	# terminou? t3<0? %
00000909 : 01c2deb3;   % 699: 		srl 	t4, t0, t3		# desloca o nibble para direita %
0000090a : 00fefe93;   % 700: 		andi 	t4, t4, 0x000F		# mascara o nibble	 %
0000090b : 01d30eb3;   % 701: 		add 	t4, t1, t4		# endereco do ascii do nibble %
0000090c : 000e8e83;   % 702: 		lb 	t4, 0(t4)		# le ascii do nibble %
0000090d : 01d38023;   % 703: 		sb 	t4, 0(t2)		# armazena o ascii do nibble no buffer da string %
0000090e : 00138393;   % 704: 		addi 	t2, t2, 1		# incrementa o endereco do buffer %
0000090f : ffce0e13;   % 705: 		addi 	t3, t3, -4		# decrementa o numero do nibble %
00000910 : fe1ff06f;   % 706: 		j 	loopprintHex %
00000911 : 00038023;   % 708: fimloopprintHex: sb 	zero,0(t2)		# grava \null na string %
00000912 : 0fc23517;   % 709: 		la 	a0, TempBuffer		# Argumento do print String %
00000913 : e6450513;   % 709:  %
00000914 : 010000ef;   % 710:     		jal	printString		# Chama o print string %
00000915 : 00012083;   % 712: 		lw 	ra, 0(sp)		# recupera ra %
00000916 : 00410113;   % 713: 		addi 	sp, sp, 4		# libera espaco %
00000917 : 00008067;   % 714: fimprintHex:	ret				# retorna %
00000918 : ff810113;   % 725: printString:	addi	sp, sp, -8			# aloca espaco %
00000919 : 00112023;   % 726:     		sw	ra, 0(sp)			# salva ra %
0000091a : 00812223;   % 727:     		sw	s0, 4(sp)			# salva s0 %
0000091b : 00a00433;   % 728:     		mv	s0, a0              		# s0 = endereco do caractere na string %
0000091c : 00040503;   % 730: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
0000091d : 02050263;   % 732:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
0000091e : 030000ef;   % 734:     		jal     printChar       		# imprime char %
0000091f : 00858593;   % 736: 		addi    a1, a1, 8                 	# incrementa a coluna %
00000920 : 13900f93;   % 737: 		li 	t6, 313		 %
00000921 : 01f5c663;   % 738: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
00000922 : 00860613;   % 739:     		addi    a2, a2, 8                 	# incrementa a linha %
00000923 : 000005b3;   % 740:     		mv    	a1, zero			# volta a coluna zero %
00000924 : 00140413;   % 742: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
00000925 : fddff06f;   % 743:     		j       loopprintString       		# volta ao loop %
00000926 : 00012083;   % 745: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
00000927 : 00012403;   % 746: 			lw 	s0, 0(sp)		# recupera s0 original %
00000928 : 00810113;   % 747:     			addi    sp, sp, 8		# libera espaco %
00000929 : 00008067;   % 748: fimprintString:	ret      	    			# retorna %
0000092a : 0ff00e93;   % 770: printChar:	li 	t4, 0xFF	# t4 temporario %
0000092b : 008e9e93;   % 771: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
0000092c : 01d6ff33;   % 772: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
0000092d : 008f5f13;   % 773:     		srli	t5, t5, 8	# numero da cor de fundo %
0000092e : 0ff6ff93;   % 774: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
0000092f : 02000213;   % 776: 		li 	tp, ' ' %
00000930 : 00454863;   % 777: 		blt 	a0, tp, printChar.NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
00000931 : 07e00213;   % 778: 		li 	tp, '~' %
00000932 : 00a24463;   % 779: 		bgt	a0, tp, printChar.NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
00000933 : 0080006f;   % 780:     		j       printChar.IMPRIMIVEL %
00000934 : 02000513;   % 782: printChar.NAOIMPRIMIVEL: li      a0, 32		# Imprime espaco %
00000935 : 14000213;   % 784: printChar.IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
00000936 : 30102c73;   % 785: <29> csrr s8, misa %
00000937 : 00cc5c13;   % 785: <30> srli s8, s8, 12 %
00000938 : 001c7c13;   % 785: <31> andi s8, s8, 0x001 %
00000939 : 020c1e63;   % 785: <32> bnez s8, printChar.mul1 %
0000093a : ff410113;   % 786: <45> addi 	sp, sp, -12 %
0000093b : 00a12023;   % 786: <46> sw	a0, 0(sp) %
0000093c : 00b12223;   % 786: <47> sw	a1, 4(sp) %
0000093d : 00112423;   % 786: <48> sw	ra, 8(sp) %
0000093e : 00400533;   % 786: <50> mv 	a0, tp %
0000093f : 00c005b3;   % 786: <51> mv 	a1, a2 %
00000940 : 539000ef;   % 786: <52> jal 	__mulsi3 %
00000941 : 04051073;   % 786: <53> csrw	a0,uscratch %
00000942 : 00012503;   % 786: <55> lw	a0, 0(sp) %
00000943 : 00412583;   % 786: <56> lw	a1, 4(sp) %
00000944 : 00812083;   % 786: <57> lw	ra, 8(sp) %
00000945 : 00c10113;   % 786: <58> addi 	sp, sp, 12 %
00000946 : 04002ef3;   % 786: <59> csrr	t4,uscratch %
00000947 : 0080006f;   % 787: 			j printChar.mul1d %
00000948 : 02c20eb3;   % 788: printChar.mul1:		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
00000949 : 00be8eb3;   % 789: printChar.mul1d:	add     t4, t4, a1               	# t4 = 320*y + x %
0000094a : 007e8e93;   % 790: 			addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
0000094b : ff000237;   % 791: 			li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
0000094c : 00020213;   % 791:  %
0000094d : 00070663;   % 792: 			beq 	a4, zero, printChar.PULAFRAME		# Verifica qual o frame a ser usado em a4 %
0000094e : ff100237;   % 793: 			li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
0000094f : 00020213;   % 793:  %
00000950 : 004e8eb3;   % 794: printChar.PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
00000951 : fe050393;   % 795: 			addi    t2, a0, -32               	# indice do char na memoria %
00000952 : 00339393;   % 796: 			slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
00000953 : 0fc23e17;   % 797: 			la      t3, LabelTabChar		# endereco dos caracteres na memoria %
00000954 : 93ce0e13;   % 797:  %
00000955 : 01c383b3;   % 798: 			add     t2, t2, t3               	# endereco do caractere na memoria %
00000956 : 0003ae03;   % 799: 			lw      t3, 0(t2)                 	# carrega a primeira word do char %
00000957 : 00400293;   % 800: 			li 	t0, 4				# i=4 %
00000958 : 02028e63;   % 802: printChar.forChar1I:	beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
00000959 : 00800313;   % 803:     			addi    t1, zero, 8               	# j = 8 %
0000095a : 02030463;   % 805: printChar.forChar1J:	beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
0000095b : 001e7c93;   % 806:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
0000095c : 001e5e13;   % 807:         		srli    t3, t3, 1             		# retira o primeiro bit %
0000095d : 000c8663;   % 808:         		beq     s9, zero, printChar.printCharPixelbg1	# pixel eh fundo? %
0000095e : 01fe8023;   % 809:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
0000095f : 0080006f;   % 810:         		j       printChar.endCharPixel1 %
00000960 : 01ee8023;   % 811: printChar.printCharPixelbg1:	sb      t5, 0(t4)                # imprime pixel com cor de fundo %
00000961 : fff30313;   % 812: printChar.endCharPixel1: addi    t1, t1, -1                	# j-- %
00000962 : fffe8e93;   % 813:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
00000963 : fddff06f;   % 814:     			j       printChar.forChar1J		# vollta novo pixel %
00000964 : fff28293;   % 816: printChar.endForChar1J: addi    t0, t0, -1 		# i-- %
00000965 : 148e8e93;   % 817:     			addi    t4, t4, 328           	# 2**12 + 8 %
00000966 : fc9ff06f;   % 818:     			j       printChar.forChar1I	# volta ao loop %
00000967 : 0043ae03;   % 820: printChar.endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
00000968 : 00400293;   % 821: 			li 	t0, 4			# i = 4 %
00000969 : 02028e63;   % 822: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
0000096a : 00800313;   % 823:     			addi    t1, zero, 8             # j = 8 %
0000096b : 02030463;   % 825: printChar.forChar2J:	beq	t1, zero, printChar.endForChar2J # if(j == 0) end for j %
0000096c : 001e7c93;   % 826:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
0000096d : 001e5e13;   % 827:         		srli    t3, t3, 1                 	# desloca para o proximo %
0000096e : 000c8663;   % 828:         		beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
0000096f : 01fe8023;   % 829:         		sb      t6, 0(t4)			# imprime cor frente %
00000970 : 0080006f;   % 830:         		j       printChar.endCharPixel2		# volta ao loop %
00000971 : 01ee8023;   % 832: printChar.printCharPixelbg2:	sb      t5, 0(t4)		# imprime cor de fundo %
00000972 : fff30313;   % 834: printChar.endCharPixel2:	addi    t1, t1, -1		# j-- %
00000973 : fffe8e93;   % 835:     				addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
00000974 : fddff06f;   % 836:     				j       printChar.forChar2J %
00000975 : fff28293;   % 838: printChar.endForChar2J:	addi	t0, t0, -1 		# i-- %
00000976 : 148e8e93;   % 839:     			addi    t4, t4, 328		# %
00000977 : fc9ff06f;   % 840:     			j       printChar.forChar2I	# volta ao loop %
00000978 : 00008067;   % 842: printChar.endForChar2I:	ret				# retorna %
00000979 : 00000013;   % 851: readChar: 		nop %
0000097a : ff2002b7;   % 855: readCharKDMMIO:		li 	t0, 0xFF200000			# Execucao com Polling do KD MMIO %
0000097b : 00028293;   % 855:  %
0000097c : 0002a503;   % 857: loopReadCharKDMMIO:  	lw     	a0, 0(t0)   			# le o bit de flag do teclado %
0000097d : 00157513;   % 858: 			andi 	a0, a0, 0x0001			# mascara bit 0 %
0000097e : fe050ce3;   % 859: 			beqz    a0, loopReadCharKDMMIO  	# testa se uma tecla foi pressionada %
0000097f : 0042a503;   % 860:    			lw 	a0, 4(t0)			# le o ascii da tecla pressionada %
00000980 : 0800006f;   % 861: 			j fimreadChar				# fim Read Char %
00000981 : ff2002b7;   % 867: readCharDE2:  	li      t0, 0xFF200100 			# Endereco buffer0 %
00000982 : 10028293;   % 867:  %
00000983 : 0002a303;   % 868:     		lw     	t1, 0(t0)				# conteudo inicial do buffer %
00000984 : 0002a383;   % 870: loopReadChar:  	lw     	t2, 0(t0)   				# le buffer teclado %
00000985 : 00639663;   % 871: 		bne     t2, t1, buffermodificadoChar    	# testa se o buffer foi modificado %
00000986 : 00700333;   % 873: atualizaBufferChar:  mv t1, t2			# atualiza o buffer com o novo valor %
00000987 : ff5ff06f;   % 874:     		j       loopReadChar		# loop de principal de leitura  %
00000988 : 0ff00f13;   % 876: buffermodificadoChar:	li t5, 0xFF %
00000989 : 008f1f13;   % 877: 	slli 	t5, t5, 8			# t5 = 0x0000FF00 %
0000098a : 01e3fe33;   % 878: 	and    	t3, t2, t5 			# mascara o 2o scancode %
0000098b : 0000f237;   % 879: 	li 	tp, 0x0000F000 %
0000098c : 00020213;   % 879:  %
0000098d : 024e0063;   % 880: 	beq     t3, tp, teclasoltaChar		# eh 0xF0 no 2o scancode? tecla foi solta %
0000098e : 0ff00213;   % 881: 	li	tp, 0x000000FF %
0000098f : 0043fe33;   % 882: 	and	t3, t2, tp			# mascara 1o scancode	(essa podemos fazer diretamente) %
00000990 : 01200213;   % 883: 	li	tp, 0x00000012 %
00000991 : fc4e1ae3;   % 884:     	bne 	t3, tp, atualizaBufferChar	# nao eh o SHIFT que esta pressionado ? volta a ler  %
00000992 : 0fc23417;   % 885: 	la      s0, LabelScanCodeShift		# se for SHIFT que esta pressionado atualiza o endereco da tabel %
00000993 : bde40413;   % 885:  %
00000994 : fc9ff06f;   % 886:     	j       atualizaBufferChar		# volta a ler %
00000995 : 0ff3fe13;   % 888: teclasoltaChar:		andi t3, t2, 0x00FF		# mascara o 1o scancode %
00000996 : 08000213;   % 889: 	li	tp, 0x00000080 %
00000997 : fbc24ee3;   % 890:   	bgt	t3, tp, atualizaBufferChar		# se o scancode for > 0x80 entao nao eh imprimivel! %
00000998 : 01200213;   % 891:   	li	tp, 0x00000012 %
00000999 : 004e1863;   % 892: 	bne 	t3, tp, naoehshiftChar			# nao foi o shift que foi solto? entao processa %
0000099a : 0fc23417;   % 893: 	la 	s0, LabelScanCode			# shift foi solto atualiza o endereco da tabela %
0000099b : b3840413;   % 893:  %
0000099c : fa9ff06f;   % 894: 	j 	atualizaBufferChar			# volta a ler %
0000099d : 01c40e33;   % 896: naoehshiftChar:	   	add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
0000099e : 000e0503;   % 897:     	lb      a0, 0(t3)				# le o ascii do caracter para a0 %
0000099f : f8050ee3;   % 898:     	beq     a0, zero, atualizaBufferChar		# se for caractere nao imprimivel volta a ler %
000009a0 : 00008067;   % 900: fimreadChar: 	ret			# retorna %
000009a1 : ff810113;   % 912: readString: 	addi 	sp, sp, -8			# reserva espaco na pilha %
000009a2 : 00812223;   % 913: 		sw 	s0, 4(sp)			# salva s0 %
000009a3 : 00112023;   % 914: 		sw 	ra, 0(sp)			# salva ra %
000009a4 : 00000693;   % 915: 		li 	a3, 0				# zera o contador de caracteres digitados %
000009a5 : 00a00933;   % 916: 		mv 	s2, a0				# salva o endereco inicial %
000009a6 : 0fc23417;   % 917:     		la      s0, LabelScanCode      		# Endereco da tabela de scancode inicial para readChar %
000009a7 : b0840413;   % 917:  %
000009a8 : 04d58c63;   % 919: loopreadString: beq 	a1, a3, fimreadString   	# buffer cheio fim %
000009a9 : ff810113;   % 921: 		addi 	sp, sp, -8 %
000009aa : 00112023;   % 922: 		sw 	ra, 0(sp)			# salva ra %
000009ab : 00a12223;   % 923: 		sw 	a0, 4(sp)			# salva a0 pois ele sera reescrito em readChar %
000009ac : f35ff0ef;   % 924: 		jal 	readChar			# le um caracter do teclado (retorno em a0) %
000009ad : 00a00fb3;   % 925: 		mv 	t6, a0				# t6 eh a letra lida em readChar %
000009ae : 00012083;   % 926: 		lw 	ra, 0(sp) %
000009af : 00412503;   % 927: 		lw 	a0, 4(sp) %
000009b0 : 00810113;   % 928: 		addi 	sp, sp, 8 %
000009b1 : 00800213;   % 930: 		li 	tp, 0x08			 %
000009b2 : 004f9c63;   % 931: 		bne	t6, tp, PulaBackSpace		# Se nao for BACKSPACE %
000009b3 : fcd00ae3;   % 932: 		beq	zero, a3, loopreadString	# Se não tem nenhum caractere no buffer apenas volta a ler %
000009b4 : fff68693;   % 933: 		addi	a3, a3, -1			# diminui contador %
000009b5 : fff50513;   % 934: 		addi 	a0, a0, -1			# diminui endereco do buffer %
000009b6 : 00050023;   % 935: 		sb 	zero, 0(a0)			# coloca zero no caractere anterior %
000009b7 : fc5ff06f;   % 936: 		j loopreadString %
000009b8 : 00a00213;   % 938: PulaBackSpace:	li	tp, 0x0A %
000009b9 : 004f8a63;   % 939: 		beq 	t6, tp, fimreadString		# se for tecla ENTER fim %
000009ba : 01f50023;   % 940: 		sb 	t6, 0(a0)			# grava no buffer %
000009bb : 00168693;   % 941: 		addi 	a3, a3, 1			# incrementa contador %
000009bc : 00150513;   % 942: 		addi 	a0, a0, 1			# incrementa endereco no buffer %
000009bd : fadff06f;   % 943: 		j loopreadString			# volta a ler outro caractere %
000009be : 00050023;   % 945: fimreadString: 	sb 	zero, 0(a0)			# grava NULL no buffer %
000009bf : fff50613;   % 946: 		addi 	a2, a0, -1			# Para que a2 tenha o endereco do ultimo caractere digitado %
000009c0 : 01200533;   % 947: 		mv	a0, s2				# a0 volta a ter o endereco inicial da string %
000009c1 : 00012083;   % 948: 		lw 	ra, 0(sp)			# recupera ra %
000009c2 : 00412403;   % 949: 		lw	s0, 4(sp)			# recupera s0 %
000009c3 : 00810113;   % 950: 		addi 	sp, sp, 8			# libera espaco %
000009c4 : 00008067;   % 951: 		ret					# retorna %
000009c5 : ffc10113;   % 960: readInt: 	addi 	sp,sp,-4		# reserva espaco na pilha %
000009c6 : 00112023;   % 961: 	sw 	ra, 0(sp)			# salva ra %
000009c7 : 0fc23517;   % 962: 	la 	a0, TempBuffer			# Endereco do buffer de string %
000009c8 : b9050513;   % 962:  %
000009c9 : 00a00593;   % 963: 	li 	a1, 10				# numero maximo de digitos %
000009ca : f5dff0ef;   % 964: 	jal 	readString			# le uma string de ate 10 digitos, a3 numero de digitos %
000009cb : 00c002b3;   % 965: 	mv 	t0, a2				# copia endereco do ultimo digito %
000009cc : 00a00393;   % 966: 	li 	t2, 10				# dez %
000009cd : 00100e13;   % 967: 	li 	t3, 1				# dezenas, centenas, etc %
000009ce : 00000533;   % 968: 	mv 	a0, zero			# zera o numero %
000009cf : 0c068e63;   % 970: loopReadInt: 	beq	a3,zero, fimReadInt	# Leu todos os digitos %
000009d0 : 00028303;   % 971: 	lb 	t1, (t0)			# le um digito %
000009d1 : 02d00213;   % 972: 	li	tp, 0x0000002D %
000009d2 : 0c430663;   % 973: 	beq 	t1, tp, ehnegReadInt		# = '-' %
000009d3 : 02b00213;   % 974: 	li	tp, 0x0000002B %
000009d4 : 0c430463;   % 975: 	beq 	t1, tp, ehposReadInt		# = '+' %
000009d5 : 03000213;   % 976: 	li	tp, 0x00000030 %
000009d6 : 0a434c63;   % 977: 	blt 	t1, tp, naoehReadInt		# <'0' %
000009d7 : 03900213;   % 978: 	li	tp, 0x00000039 %
000009d8 : 0a624863;   % 979: 	bgt 	t1, tp, naoehReadInt		# >'9' %
000009d9 : fd030313;   % 980: 	addi 	t1, t1, -48			# transforma ascii em numero %
000009da : 30102c73;   % 981: <29> csrr s8, misa %
000009db : 00cc5c13;   % 981: <30> srli s8, s8, 12 %
000009dc : 001c7c13;   % 981: <31> andi s8, s8, 0x001 %
000009dd : 020c1e63;   % 981: <32> bnez s8, readInt.mul1 %
000009de : ff410113;   % 982: <45> addi 	sp, sp, -12 %
000009df : 00a12023;   % 982: <46> sw	a0, 0(sp) %
000009e0 : 00b12223;   % 982: <47> sw	a1, 4(sp) %
000009e1 : 00112423;   % 982: <48> sw	ra, 8(sp) %
000009e2 : 00600533;   % 982: <50> mv 	a0, t1 %
000009e3 : 01c005b3;   % 982: <51> mv 	a1, t3 %
000009e4 : 2a9000ef;   % 982: <52> jal 	__mulsi3 %
000009e5 : 04051073;   % 982: <53> csrw	a0,uscratch %
000009e6 : 00012503;   % 982: <55> lw	a0, 0(sp) %
000009e7 : 00412583;   % 982: <56> lw	a1, 4(sp) %
000009e8 : 00812083;   % 982: <57> lw	ra, 8(sp) %
000009e9 : 00c10113;   % 982: <58> addi 	sp, sp, 12 %
000009ea : 04002373;   % 982: <59> csrr	t1,uscratch %
000009eb : 0080006f;   % 983: 	j readInt.mul1d %
000009ec : 03c30333;   % 984: readInt.mul1: 	mul 	t1, t1, t3			# multiplica por dezenas/centenas %
000009ed : 00650533;   % 985: readInt.mul1d:	add 	a0, a0, t1			# soma no numero %
000009ee : 30102c73;   % 986: <29> csrr s8, misa %
000009ef : 00cc5c13;   % 986: <30> srli s8, s8, 12 %
000009f0 : 001c7c13;   % 986: <31> andi s8, s8, 0x001 %
000009f1 : 020c1e63;   % 986: <32> bnez s8, readInt.mul2 %
000009f2 : ff410113;   % 987: <45> addi 	sp, sp, -12 %
000009f3 : 00a12023;   % 987: <46> sw	a0, 0(sp) %
000009f4 : 00b12223;   % 987: <47> sw	a1, 4(sp) %
000009f5 : 00112423;   % 987: <48> sw	ra, 8(sp) %
000009f6 : 01c00533;   % 987: <50> mv 	a0, t3 %
000009f7 : 007005b3;   % 987: <51> mv 	a1, t2 %
000009f8 : 259000ef;   % 987: <52> jal 	__mulsi3 %
000009f9 : 04051073;   % 987: <53> csrw	a0,uscratch %
000009fa : 00012503;   % 987: <55> lw	a0, 0(sp) %
000009fb : 00412583;   % 987: <56> lw	a1, 4(sp) %
000009fc : 00812083;   % 987: <57> lw	ra, 8(sp) %
000009fd : 00c10113;   % 987: <58> addi 	sp, sp, 12 %
000009fe : 04002e73;   % 987: <59> csrr	t3,uscratch %
000009ff : 0080006f;   % 988: 	j readInt.mul2d %
00000a00 : 027e0e33;   % 989: readInt.mul2: 	mul 	t3, t3, t2			# proxima dezena/centena %
00000a01 : fff28293;   % 990: readInt.mul2d:	addi 	t0, t0, -1			# busca o digito anterior %
00000a02 : fff68693;   % 991: 	addi	a3, a3, -1			# reduz o contador de digitos  %
00000a03 : f31ff06f;   % 992: 	j 	loopReadInt			# volta para buscar proximo digito %
00000a04 : 0080006f;   % 995: 		j fimReadInt			# como nao esta implmentado apenas retorna %
00000a05 : 40a00533;   % 997: ehnegReadInt:	sub a0,zero,a0			# se for negativo %
00000a06 : 00012083;   % 1001: fimReadInt:	lw 	ra, 0(sp)		# recupera ra %
00000a07 : 00410113;   % 1002: 		addi 	sp, sp, 4		# libera espaco %
00000a08 : 00008067;   % 1003: 		ret				# fim ReadInt %
00000a09 : 10008c37;   % 1023: <9> li s8, 0x10008000	# carrega tp %
00000a0a : 000c0c13;   % 1023:  %
00000a0b : 01819863;   % 1023: <10> bne gp, s8, midiOutDE2	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000a0c : 01f00893;   % 1025: 	li a7,31		# Chama o ecall normal %
00000a0d : 00000073;   % 1026: 	ecall %
00000a0e : 0600006f;   % 1027: 	j fimmidiOut %
00000a0f : ff2002b7;   % 1029: midiOutDE2:	li      t0, 0xFF200178 %
00000a10 : 17828293;   % 1029:  %
00000a11 : 00000333;   % 1030:     		add     t1, zero, zero %
00000a12 : 00f67393;   % 1035:    	 	andi    t2, a2, 0x0000000F %
00000a13 : 01b39393;   % 1036:     		slli    t2, t2, 27 %
00000a14 : 00736333;   % 1037:     		or      t1, t1, t2 %
00000a15 : 07f6f393;   % 1040:     		andi    t2, a3, 0x0000007F %
00000a16 : 01439393;   % 1041:     		slli    t2, t2, 20 %
00000a17 : 00736333;   % 1042:     		or      t1, t1, t2 %
00000a18 : 07f57393;   % 1045:     		andi    t2, a0, 0x0000007F %
00000a19 : 00d39393;   % 1046:     		slli    t2, t2, 13 %
00000a1a : 00736333;   % 1047:     		or      t1, t1, t2 %
00000a1b : 1ff00e93;   % 1050: 		li 	t4, 0x1FF %
00000a1c : 004e9e93;   % 1051: 		slli 	t4, t4, 4 %
00000a1d : 00fe8e93;   % 1052: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000a1e : 01d5f3b3;   % 1053:     		and    	t2, a1, t4 %
00000a1f : 00736333;   % 1054:     		or      t1, t1, t2 %
00000a20 : 0040006f;   % 1057:     		j       SintMidOut %
00000a21 : 0062a023;   % 1059: SintMidOut:	sw	t1, 0(t0) %
00000a22 : ff2003b7;   % 1062: 	    		li      t2, 0xFF20017C %
00000a23 : 17c38393;   % 1062:  %
00000a24 : 0003ae03;   % 1063: Check_AUD_DACLRCK:     	lw      t3, 0(t2) %
00000a25 : fe0e0ee3;   % 1064:     			beq     t3, zero, Check_AUD_DACLRCK %
00000a26 : 00008067;   % 1066: fimmidiOut:    		ret %
00000a27 : 10008c37;   % 1084: <9> li s8, 0x10008000	# carrega tp %
00000a28 : 000c0c13;   % 1084:  %
00000a29 : 01819863;   % 1084: <10> bne gp, s8, midiOutSyncDE2	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000a2a : 02100893;   % 1086: 	li a7,33		# Chama o ecall normal %
00000a2b : 00000073;   % 1087: 	ecall %
00000a2c : 0780006f;   % 1088: 	j fimmidiOutSync %
00000a2d : ff2002b7;   % 1090: midiOutSyncDE2:	li      t0, 0xFF200178 %
00000a2e : 17828293;   % 1090:  %
00000a2f : 00000333;   % 1091:     		add     t1, zero, zero %
00000a30 : 08000337;   % 1094:     		lui    	t1, 0x08000 %
00000a31 : 00431313;   % 1095: 		slli	t1,t1,4 %
00000a32 : 00f67393;   % 1098:     		andi    t2, a2, 0x00F %
00000a33 : 01b39393;   % 1099:     		slli    t2, t2, 27 %
00000a34 : 00736333;   % 1100:     		or      t1, t1, t2 %
00000a35 : 07f6f393;   % 1103:     		andi    t2, a3, 0x07F %
00000a36 : 01439393;   % 1104:     		slli    t2, t2, 20 %
00000a37 : 00736333;   % 1105:     		or      t1, t1, t2 %
00000a38 : 07f57393;   % 1108:     		andi    t2, a0, 0x07F %
00000a39 : 00d39393;   % 1109:     		slli    t2, t2, 13 %
00000a3a : 00736333;   % 1110:     		or      t1, t1, t2 %
00000a3b : 1ff00e93;   % 1113: 		li 	t4, 0x1FF %
00000a3c : 004e9e93;   % 1114: 		slli 	t4, t4, 4 %
00000a3d : 00fe8e93;   % 1115: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000a3e : 01d5f3b3;   % 1116:     		and    	t2, a1, t4 %
00000a3f : 00736333;   % 1117:     		or      t1, t1, t2 %
00000a40 : 0040006f;   % 1120:     		j       SintMidOutSync %
00000a41 : 0062a023;   % 1122: SintMidOutSync:	sw	t1, 0(t0) %
00000a42 : ff2003b7;   % 1125:     		li      t2, 0xFF20017C %
00000a43 : 17c38393;   % 1125:  %
00000a44 : ff200eb7;   % 1126:     		li      t4, 0xFF200180 %
00000a45 : 180e8e93;   % 1126:  %
00000a46 : 0003ae03;   % 1128: Check_AUD_DACLRCKSync:	lw      t3, 0(t2) %
00000a47 : fe0e0ee3;   % 1129:     			beq     t3, zero, Check_AUD_DACLRCKSync %
00000a48 : 000eaf03;   % 1131: Melody:     	lw      t5, 0(t4) %
00000a49 : fe0f1ee3;   % 1132:     		bne     t5, zero, Melody %
00000a4a : 00008067;   % 1134: fimmidiOutSync:	ret %
00000a4b : ffc10113;   % 1144: printFloat:	addi 	sp, sp, -4 %
00000a4c : 00112023;   % 1145: 		sw 	ra, 0(sp)				# salva ra %
00000a4d : 0fc23417;   % 1146: 		la 	s0, TempBuffer %
00000a4e : 97840413;   % 1146:  %
00000a4f : 02b00293;   % 1149: 		li 	t0, '+'			# define sinal '+' %
00000a50 : e00504d3;   % 1150: 		fmv.x.s s1, fa0			# recupera o numero float sem conversao %
00000a51 : 01f4d493;   % 1151: 		srli	s1, s1, 31		# bit 31(sinal) em bit 0, numero eh negativo s1=1 %
00000a52 : 00048463;   % 1152: 		beq 	s1, zero, ehposprintFloat	# eh positivo s1=0 %
00000a53 : 02d00293;   % 1153: 		li 	t0, '-'				# define sinal '-' %
00000a54 : 00540023;   % 1154: ehposprintFloat: sb 	t0, 0(s0)			# coloca sinal no buffer %
00000a55 : 00140413;   % 1155: 		addi 	s0, s0, 1			# incrementa o endereco do buffer %
00000a56 : e00502d3;   % 1158: 		 fmv.x.s t0, fa0			# recupera o numero float sem conversao %
00000a57 : 7f800337;   % 1159: 		 lui	t1, 0x7F800 %
00000a58 : 0062f2b3;   % 1160: 		 and 	t0, t0, t1   			# mascara com 0111 1111 1000 0000 0000 0000... %
00000a59 : 00129293;   % 1161: 		 slli 	t0, t0, 1			# tira o sinal do numero %
00000a5a : 0182d293;   % 1162: 		 srli 	t0, t0, 24			# recupera o expoente %
00000a5b : e0050353;   % 1165: 		fmv.x.s t1, fa0				# recupera o numero float sem conversao %
00000a5c : 008003b7;   % 1166: 		li 	t2, 0x007FFFFF			# t2 = 0x007FFFFF %
00000a5d : fff38393;   % 1166:  %
00000a5e : 00737333;   % 1167: 		and 	t1, t1, t2			# mascara com 0000 0000 0111 1111 1111... 		  %
00000a5f : 14028c63;   % 1169: 		beq 	t0, zero, ehExp0printFloat	# Expoente = 0 %
00000a60 : 0ff00213;   % 1170: 		li	tp, 0x000000FF			# TP = 255 %
00000a61 : 16428c63;   % 1171: 		beq 	t0, tp, ehExp255printFloat	# Expoente = 255 %
00000a62 : 20a52053;   % 1175: 		fabs.s 		ft0, fa0		# ft0 recebe o modulo  de x %
00000a63 : 00100213;   % 1176: 		li		tp, 1 %
00000a64 : d00270d3;   % 1177: 		fcvt.s.w 	ft1, tp			# ft1 recebe o numero 1.0 %
00000a65 : 00a00213;   % 1178: 		li		tp, 10 %
00000a66 : d0027353;   % 1179: 		fcvt.s.w 	ft6, tp			# ft6 recebe o numero 10.0 %
00000a67 : 00200213;   % 1180: 		li		tp, 2 %
00000a68 : d0027e53;   % 1181: 		fcvt.s.w 	ft8, tp %
00000a69 : 19c0f3d3;   % 1182: 		fdiv.s		ft7, ft1, ft8		# ft7 recebe o numero 0.5 %
00000a6a : a0101ed3;   % 1184: 		flt.s 	t4, ft0, ft1		# ft0 < 1.0 ? Se sim, E deve ser negativo %
00000a6b : 000e9663;   % 1185: 		bnez	t4, menor1printFloat	# se a comparacao deu true (1), pula %
00000a6c : 20630153;   % 1186: 		fmv.s 	ft2, ft6		# ft2  fator de multiplicacao = 10 %
00000a6d : 02c0006f;   % 1187: 		j 	cont2printFloat		# vai para expoente positivo %
00000a6e : 1860f153;   % 1188: menor1printFloat: fdiv.s ft2,ft1,ft6		# ft2 fator multiplicativo = 0.1 %
00000a6f : 20000253;   % 1191: cont1printFloat: 	fmv.s 	ft4, ft0			# inicia com o numero x  %
00000a70 : 201081d3;   % 1192: 		 	fmv.s 	ft3, ft1			# contador comeca em 1 %
00000a71 : 18227253;   % 1193: loop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000a72 : a0120e53;   % 1194: 		 	fle.s 	t3, ft4, ft1			# o numero eh > que 1? entao fim %
00000a73 : 000e0663;   % 1195: 		 	beq 	t3,zero, fimloop1printFloat %
00000a74 : 0011f1d3;   % 1196: 		 	fadd.s 	ft3, ft3, ft1			# incrementa o contador %
00000a75 : ff1ff06f;   % 1197: 		 	j 	loop1printFloat			# volta ao loop %
00000a76 : 18227253;   % 1199: fimloop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# ajusta o numero %
00000a77 : 0200006f;   % 1200: 		 	j 	intprintFloat			# vai para imprimir a parte inteira %
00000a78 : 20000253;   % 1203: cont2printFloat:	fmv.s 	 ft4, ft0			# inicia com o numero x  %
00000a79 : d00071d3;   % 1204: 		 	fcvt.s.w ft3, zero			# contador comeca em 0 %
00000a7a : a0621e53;   % 1205: loop2printFloat:  	flt.s 	 t3, ft4, ft6			# resultado eh < que 10? entao fim %
00000a7b : 18227253;   % 1206: 			fdiv.s 	 ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000a7c : 000e1663;   % 1207: 			bne 	 t3, zero, intprintFloat %
00000a7d : 0011f1d3;   % 1208: 		 	fadd.s 	 ft3, ft3, ft1			# incrementa o contador %
00000a7e : ff1ff06f;   % 1209: 		 	j 	 loop2printFloat %
00000a7f : 10227253;   % 1215: intprintFloat:		fmul.s 		ft4, ft4, ft2		# ajusta o numero %
00000a80 : 08727253;   % 1216: 			fsub.s		ft4, ft4, ft7		# tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
00000a81 : c00272d3;   % 1217: 		  	fcvt.w.s	t0, ft4			# coloca floor de ft4 em t0 %
00000a82 : 00727253;   % 1218: 			fadd.s		ft4, ft4, ft7		# readiciona 0.5 %
00000a83 : 00029463;   % 1219: 			bnez		t0, pulaeh1print	# para corrigir multiplos inteiros de 10! %
00000a84 : 00100293;   % 1220: 			li 		t0, 1 %
00000a85 : 03028293;   % 1221: pulaeh1print:		addi 		t0, t0, 48		# converte para ascii			 %
00000a86 : 00540023;   % 1222: 			sb 		t0, 0(s0)		# coloca no buffer %
00000a87 : 00140413;   % 1223: 		  	addi 		s0, s0, 1		# incrementta o buffer %
00000a88 : 02e00293;   % 1226: 		  	li 	t0, '.'				# carrega o '.' %
00000a89 : 00540023;   % 1227: 		  	sb 	t0, 0(s0)			# coloca no buffer %
00000a8a : 00140413;   % 1228: 		  	addi 	s0, s0, 1			# incrementa o buffer %
00000a8b : 00800313;   % 1231: 		  	li 		t1, 8				# contador de digitos  -  8 casas decimais %
00000a8c : 04030a63;   % 1232: loopfracprintFloat:  	beq 		t1, zero, fimfracprintFloat	# fim dos digitos? %
00000a8d : 08727253;   % 1233: 			fsub.s		ft4, ft4, ft7			# tira 0.5 %
00000a8e : c0027f53;   % 1234: 			fcvt.w.s 	t5, ft4				# floor de ft4 %
00000a8f : 00727253;   % 1235: 			fadd.s		ft4, ft4, ft7			# readiciona 0.5 %
00000a90 : d00f72d3;   % 1236: 			fcvt.s.w	ft5, t5				# reconverte em float so com a parte inteira %
00000a91 : 085272d3;   % 1237: 		  	fsub.s 		ft5, ft4, ft5			# parte fracionaria %
00000a92 : 1062f2d3;   % 1238: 		  	fmul.s 		ft5, ft5, ft6			# mult x 10 %
00000a93 : 0872f2d3;   % 1239: 			fsub.s		ft5, ft5, ft7			# tira 0.5 %
00000a94 : c002f2d3;   % 1240: 			fcvt.w.s	t0, ft5				# coloca floor de ft5 em 10 %
00000a95 : 03028293;   % 1241: 		  	addi 		t0, t0, 48			# converte para ascii %
00000a96 : 03000213;   % 1243: 			li 		tp, 48 %
00000a97 : 0042c663;   % 1244: 			blt		t0, tp, pulaprtFloat1	# testa se eh menor que '0' %
00000a98 : 03900213;   % 1245: 			li		tp, 57 %
00000a99 : 00525463;   % 1246: 			ble		t0, tp, pulaprtFloat2	# testa se eh menor ou igual que '9' %
00000a9a : 03000293;   % 1247: pulaprtFloat1:		li		t0, 48			# define como '0'		  			  	 %
00000a9b : 00540023;   % 1249: pulaprtFloat2:	  	sb 		t0, 0(s0)			# coloca no buffer %
00000a9c : 00140413;   % 1250: 		  	addi 		s0, s0, 1			# incrementa endereco %
00000a9d : fff30313;   % 1251: 		  	addi 		t1, t1, -1			# decrementa contador %
00000a9e : 0072f2d3;   % 1252: 			fadd.s		ft5, ft5, ft7			# reincrementa 0.5 %
00000a9f : 20528253;   % 1253: 		  	fmv.s 		ft4, ft5			# coloca o numero em ft4 %
00000aa0 : fb1ff06f;   % 1254: 		  	j 		loopfracprintFloat		# volta ao loop %
00000aa1 : 04500293;   % 1257: fimfracprintFloat: 	li 	t0,'E'			# carrega 'E' %
00000aa2 : 00540023;   % 1258: 			sb 	t0, 0(s0)		# coloca no buffer %
00000aa3 : 00140413;   % 1259: 			addi 	s0, s0, 1		# incrementa endereco %
00000aa4 : 02b00293;   % 1262: 		  	li 	t0, '+'				# carrega '+' %
00000aa5 : 000e8463;   % 1263: 		  	beqz 	t4, expposprintFloat		# nao eh negativo? %
00000aa6 : 02d00293;   % 1264: 		  	li 	t0, '-'				# carrega '-' %
00000aa7 : 00540023;   % 1265: expposprintFloat: 	sb 	t0, 0(s0)			# coloca no buffer %
00000aa8 : 00140413;   % 1266: 		  	addi 	s0, s0, 1			#incrementa endereco %
00000aa9 : 00a00313;   % 1269: 			li 	t1, 10				# carrega 10	 %
00000aaa : c001f253;   % 1270: 			fcvt.w.s  tp, ft3			# passa ft3 para t0 %
00000aab : 026242b3;   % 1271: 			div 	t0, tp, t1			# divide por 10 (dezena) %
00000aac : 026263b3;   % 1272: 			rem	t2, tp, t1			# t0 = quociente, t2 = resto %
00000aad : 03028293;   % 1273: 			addi 	t0, t0, 48			# converte para ascii %
00000aae : 00540023;   % 1274: 			sb 	t0, 0(s0)			# coloca no buffer %
00000aaf : 03038393;   % 1275: 			addi 	t2, t2, 48			# converte para ascii %
00000ab0 : 007400a3;   % 1276: 			sb 	t2, 1(s0)			# coloca no buffer %
00000ab1 : 00040123;   % 1277: 			sb 	zero, 2(s0)			# insere \NULL da string %
00000ab2 : 0fc22517;   % 1278: 			la 	a0, TempBuffer			# endereco do Buffer										 %
00000ab3 : 7e450513;   % 1278:  %
00000ab4 : 0500006f;   % 1279: 	  		j 	fimprintFloat			# imprime a string %
00000ab5 : 00030e63;   % 1281: ehExp0printFloat: 	beq 	t1, zero, eh0printFloat		# Verifica se eh zero %
00000ab6 : 0fc23517;   % 1283: ehDesnormprintFloat: 	la 	a0, NumDesnormP			# string numero desnormalizado positivo %
00000ab7 : 9e750513;   % 1283:  %
00000ab8 : 04048063;   % 1284: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
00000ab9 : 0fc23517;   % 1285: 		 	la 	a0, NumDesnormN			# string numero desnormalizado negativo %
00000aba : 9e450513;   % 1285:  %
00000abb : 0340006f;   % 1286: 			j 	fimprintFloat			# imprime a string %
00000abc : 0fc23517;   % 1288: eh0printFloat:		la 	a0, NumZero			# string do zero %
00000abd : 9e150513;   % 1288:  %
00000abe : 0280006f;   % 1289: 			j 	fimprintFloat 	 		# imprime a string %
00000abf : 00030863;   % 1291: ehExp255printFloat: 	beq 	t1, zero, ehInfprintFloat	# se mantissa eh zero entao eh Infinito %
00000ac0 : 0fc23517;   % 1293: ehNaNprintfFloat:	la 	a0, NumNaN			# string do NaN %
00000ac1 : 9f050513;   % 1293:  %
00000ac2 : 0180006f;   % 1294: 			j 	fimprintFloat			# imprime string %
00000ac3 : 0fc23517;   % 1296: ehInfprintFloat:	la 	a0, NumInfP			# string do infinito positivo %
00000ac4 : 9d050513;   % 1296:  %
00000ac5 : 00048663;   % 1297: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
00000ac6 : 0fc23517;   % 1298: 			la 	a0, NumInfN			# string do infinito negativo %
00000ac7 : 9ce50513;   % 1298:  %
00000ac8 : 941ff0ef;   % 1301: fimprintFloat:		jal 	printString			# imprime a string em a0 %
00000ac9 : 00012083;   % 1302: 			lw 	ra, 0(sp)			# recupera ra %
00000aca : 00410113;   % 1303: 			addi 	sp, sp, 4			# libera espaco %
00000acb : 00008067;   % 1304: 			ret					# retorna %
00000acc : 00008067;   % 1322: 			ret %
00000acd : 00008067;   % 1340: 			ret %
00000ace : ffc10113;   % 1351: readFloat: addi sp, sp, -4			# aloca espaco %
00000acf : 00112023;   % 1352: 	sw 	ra, 0(sp)			# salva ra %
00000ad0 : 0fc22517;   % 1353: 	la 	a0, TempBuffer			# endereco do FloatBuffer %
00000ad1 : 76c50513;   % 1353:  %
00000ad2 : 02000593;   % 1354: 	li 	a1, 32				# numero maximo de caracteres %
00000ad3 : b39ff0ef;   % 1355: 	jal	readString			# le string, retorna a2 ultimo endereco e a3 numero de caracteres %
00000ad4 : 00c00433;   % 1356: 	mv 	s0, a2				# ultimo endereco da string (antes do \0) %
00000ad5 : 00d004b3;   % 1357: 	mv 	s1, a3				# numero de caracteres digitados %
00000ad6 : 0fc22b97;   % 1358: 	la	s7, TempBuffer			# Endereco do primeiro caractere %
00000ad7 : 754b8b93;   % 1358:  %
00000ad8 : 017002b3;   % 1360: lePrimeiroreadFloat:	mv 	t0, s7		# Endereco de Inicio %
00000ad9 : 00028303;   % 1361: 	lb 	t1, 0(t0)				# le primeiro caractere %
00000ada : 06500213;   % 1362: 	li	tp, 'e'					# TP = 101 = 'e' %
00000adb : 02430863;   % 1363: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
00000adc : 04500213;   % 1364: 	li 	tp, 'E'					# TP = 69 = 'E' %
00000add : 02430463;   % 1365: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
00000ade : 02e00213;   % 1366: 	li	tp, '.'					# TP = 46 = '.' %
00000adf : 02430063;   % 1367: 	beq 	t1, tp, insere0AreadFloat		#  insere '0' antes %
00000ae0 : 02b00213;   % 1368: 	li	tp, '+'					# TP = 43 = '+' %
00000ae1 : 00430863;   % 1369: 	beq 	t1, tp, pulaPrimreadChar		# pula o primeiro caractere %
00000ae2 : 02d00213;   % 1370: 	li	tp, '-'					# TP = 45 = '-' %
00000ae3 : 00430463;   % 1371: 	beq 	t1, tp, pulaPrimreadChar %
00000ae4 : 03c0006f;   % 1372: 	j leUltimoreadFloat %
00000ae5 : 001b8b93;   % 1374: pulaPrimreadChar: addi s7,s7,1			# incrementa o endereco inicial %
00000ae6 : fc9ff06f;   % 1375: 		  j lePrimeiroreadFloat		# volta a testar o novo primeiro caractere %
00000ae7 : 008002b3;   % 1377: insere0AreadFloat: mv t0, s0			# endereco do ultimo caractere %
00000ae8 : 00140413;   % 1378: 		   addi s0, s0, 1		# desloca o ultimo endereco para o proximo %
00000ae9 : 00148493;   % 1379: 	   	   addi s1, s1, 1		# incrementa o num. caracteres %
00000aea : 000400a3;   % 1380: 	   	   sb 	zero, 1(s0)		# \NULL do final de string %
00000aeb : 01700f33;   % 1381: 	   	   mv t5, s7			# primeiro caractere %
00000aec : 01e28a63;   % 1382: insere0Aloop:	   beq 	t0, t5, saiinsere0AreadFloat	# chegou no inicio entao fim %
00000aed : 00028303;   % 1383: 		   lb 	t1, 0(t0)		# le caractere %
00000aee : 006280a3;   % 1384: 		   sb 	t1, 1(t0)		# escreve no proximo %
00000aef : fff28293;   % 1385: 		   addi t0, t0, -1		# decrementa endereco %
00000af0 : ff1ff06f;   % 1386: 		   j insere0Aloop		# volta ao loop %
00000af1 : 03000313;   % 1387: saiinsere0AreadFloat: li t1, '0'		# ascii '0' %
00000af2 : 00628023;   % 1388: 		   sb t1, 0(t0)			# escreve '0' no primeiro caractere %
00000af3 : 00040303;   % 1390: leUltimoreadFloat: lb  	t1, 0(s0)			# le ultimo caractere %
00000af4 : 06500213;   % 1391: 		li	tp, 'e'				# TP = 101 = 'e' %
00000af5 : 00430c63;   % 1392: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000af6 : 04500213;   % 1393: 		li 	tp, 'E'				# TP = 69 = 'E' %
00000af7 : 00430863;   % 1394: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000af8 : 02e00213;   % 1395: 		li	tp, '.'				# TP = 46 = '.' %
00000af9 : 00430463;   % 1396: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000afa : 0180006f;   % 1397: 		j 	inicioreadFloat %
00000afb : 00140413;   % 1399: insere0PreadFloat: addi	s0, s0, 1		# desloca o ultimo endereco para o proximo %
00000afc : 00148493;   % 1400: 	   	   addi	s1, s1, 1		# incrementa o num. caracteres %
00000afd : 03000313;   % 1401: 		   li 	t1,'0'			# ascii '0' %
00000afe : 00640023;   % 1402: 		   sb 	t1,0(s0)		# escreve '0' no ultimo %
00000aff : 000400a3;   % 1403: 		   sb 	zero,1(s0)		# \null do final de string %
00000b00 : d0007553;   % 1405: inicioreadFloat:  fcvt.s.w 	fa0, zero	# fa0 Resultado inicialmente zero %
00000b01 : 00a00293;   % 1406: 		li 	t0, 10			# inteiro 10	 %
00000b02 : d002f353;   % 1407: 		fcvt.s.w 	ft6, t0		# ft6 contem sempre o numero cte 10.0000 %
00000b03 : 00100293;   % 1408: 		li 	t0, 1			# inteiro 1 %
00000b04 : d002f0d3;   % 1409: 		fcvt.s.w 	ft1, t0		# ft1 contem sempre o numero cte 1.0000	 %
00000b05 : 00140993;   % 1412: procuraEreadFloat:	addi 	s3, s0, 1			# inicialmente nao tem 'e' ou 'E' na string (fora da string) %
00000b06 : 017002b3;   % 1413: 			mv 	t0, s7				# endereco inicial %
00000b07 : 02828263;   % 1414: loopEreadFloat: 	beq 	t0, s0, naotemEreadFloat	# sai se nao encontrou 'e' %
00000b08 : 00028303;   % 1415: 			lb 	t1, 0(t0)			# le o caractere %
00000b09 : 06500213;   % 1416: 			li	tp, 'e'				# TP = 101 = 'e' %
00000b0a : 00430a63;   % 1417: 			beq 	t1, tp, ehEreadFloat		# tem 'e' %
00000b0b : 04500213;   % 1418: 			li 	tp, 'E'				# TP = 69 = 'E' %
00000b0c : 00430663;   % 1419: 			beq	t1, tp, ehEreadFloat		# tem 'E' %
00000b0d : 00128293;   % 1420: 			addi 	t0, t0, 1			# incrementa endereco %
00000b0e : fe5ff06f;   % 1421: 			j 	loopEreadFloat			# volta ao loop %
00000b0f : 005009b3;   % 1422: ehEreadFloat: 		mv 	s3, t0				# endereco do 'e' ou 'E' na string %
00000b10 : 01300933;   % 1426: procuraPontoreadFloat:	mv 	s2, s3				# local inicial do ponto na string (='e' se existir) ou fora da string	 %
00000b11 : 017002b3;   % 1427: 			mv 	t0, s7				# endereco inicial %
00000b12 : 00828e63;   % 1428: loopPontoreadFloat: 	beq 	t0, s0, naotemPontoreadFloat	# sai se nao encontrou '.' %
00000b13 : 00028303;   % 1429: 			lb 	t1, 0(t0)			# le o caractere %
00000b14 : 02e00213;   % 1430: 			li	tp, '.'				# TP = 46 = '.' %
00000b15 : 00430663;   % 1431: 			beq 	t1, tp, ehPontoreadFloat	# tem '.' %
00000b16 : 00128293;   % 1432: 			addi 	t0, t0, 1			# incrementa endereco %
00000b17 : fedff06f;   % 1433: 			j 	loopPontoreadFloat		# volta ao loop %
00000b18 : 00500933;   % 1434: ehPontoreadFloat: 	mv 	s2, t0				# endereco do '.' na string %
00000b19 : d0007153;   % 1438: intreadFloat:		fcvt.s.w 	ft2, zero		# zera parte inteira %
00000b1a : fff90293;   % 1439: 			addi 	t0, s2, -1			# endereco do caractere antes do ponto %
00000b1b : 201081d3;   % 1440: 			fmv.s 	ft3, ft1			# ft3 contem unidade/dezenas/centenas		 %
00000b1c : 01700f33;   % 1441: 			mv 	t5, s7				# Primeiro Endereco %
00000b1d : 03e2ca63;   % 1442: loopintreadFloat: 	blt 	t0, t5, fimintreadFloat		# sai se o endereco for < inicio da string %
00000b1e : 00028303;   % 1443: 			lb 	t1, 0(t0)			# le o caracter %
00000b1f : 03000213;   % 1444: 			li	tp, '0'				# TP = 48 = '0' %
00000b20 : 10434863;   % 1445: 			blt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000b21 : 03900213;   % 1446: 			li	tp, '9'				# TP = 57 = '9' %
00000b22 : 10624463;   % 1447: 			bgt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000b23 : fd030313;   % 1448: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000b24 : d0037153;   % 1449: 			fcvt.s.w  ft2, t1			# digito lido em float %
00000b25 : 10317153;   % 1451: 			fmul.s 	ft2,ft2,ft3			# multiplica por un/dezena/centena %
00000b26 : 00257553;   % 1452: 			fadd.s 	fa0,fa0,ft2			# soma no resultado %
00000b27 : 1061f1d3;   % 1453: 			fmul.s 	ft3,ft3,ft6			# proxima dezena/centena %
00000b28 : fff28293;   % 1455: 			addi 	t0,t0,-1			# endereco anterior %
00000b29 : fd1ff06f;   % 1456: 			j 	loopintreadFloat		# volta ao loop %
00000b2a : d0007153;   % 1460: fracreadFloat:		fcvt.s.w 	ft2, zero		# zera parte fracionaria %
00000b2b : 00190293;   % 1461: 			addi 	t0, s2, 1			# endereco depois do ponto %
00000b2c : 1860f1d3;   % 1462: 			fdiv.s 	ft3, ft1, ft6			# ft3 inicial 0.1 %
00000b2d : 0332da63;   % 1464: loopfracreadFloat: 	bge 	t0, s3, fimfracreadFloat	# endereco eh 'e' 'E' ou >ultimo %
00000b2e : 00028303;   % 1465: 			lb 	t1, 0(t0)			# le o caracter %
00000b2f : 03000213;   % 1466: 			li	tp, '0'				# TP = 48 = '0' %
00000b30 : 0c434863;   % 1467: 			blt 	t1, tp, erroreadFloat		# nao eh valido %
00000b31 : 03900213;   % 1468: 			li	tp, '9'				# TP = 57 = '9' %
00000b32 : 0c624463;   % 1469: 			bgt 	t1, tp, erroreadFloat		# nao eh valido %
00000b33 : fd030313;   % 1470: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000b34 : d0037153;   % 1471: 			fcvt.s.w 	ft2, t1			# digito lido em float		 %
00000b35 : 10317153;   % 1473: 			fmul.s 	ft2, ft2, ft3			# multiplica por ezena/centena %
00000b36 : 00257553;   % 1474: 			fadd.s 	fa0, fa0, ft2			# soma no resultado %
00000b37 : 1861f1d3;   % 1475: 			fdiv.s 	ft3, ft3, ft6			# proxima frac un/dezena/centena %
00000b38 : 00128293;   % 1477: 			addi 	t0, t0, 1			# proximo endereco %
00000b39 : fd1ff06f;   % 1478: 			j 	loopfracreadFloat		# volta ao loop		 %
00000b3a : d0007153;   % 1483: potreadFloat:		fcvt.s.w 	ft2, zero		# zera potencia %
00000b3b : 00198293;   % 1484: 			addi 	t0, s3, 1			# endereco seguinte ao 'e' %
00000b3c : 00000a13;   % 1485: 			li 	s4, 0				# sinal do expoente positivo %
00000b3d : 00028303;   % 1486: 			lb 	t1, 0(t0)			# le o caractere seguinte ao 'e' %
00000b3e : 02d00213;   % 1487: 			li	tp, '-'				# TP = 45 = '-' %
00000b3f : 00430863;   % 1488: 			beq	t1, tp, potsinalnegreadFloat	# sinal do expoente esta escrito e eh positivo %
00000b40 : 02b00213;   % 1489: 			li	tp, '+'				# TP = 43 = '+' %
00000b41 : 00430663;   % 1490: 			beq 	t1, tp, potsinalposreadFloat	# sinal do expoente eh negativo %
00000b42 : 00c0006f;   % 1491: 			j 	pulapotsinalreadFloat		# nao esta escrito o sinal do expoente %
00000b43 : 00100a13;   % 1492: potsinalnegreadFloat:	li 	s4, 1				# s4=1 expoente negativo %
00000b44 : 00128293;   % 1493: potsinalposreadFloat:	addi 	t0, t0, 1			# se tiver '-' ou '+' avanca para o proximo endereco %
00000b45 : 00500ab3;   % 1494: pulapotsinalreadFloat:	mv 	s5, t0 				# Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente		 %
00000b46 : 201081d3;   % 1496: 			fmv.s 	ft3, ft1			# ft3 un/dez/cen = 1 %
00000b47 : 00000393;   % 1499: expreadFloat:		li 	t2, 0				# zera expoente %
00000b48 : 008002b3;   % 1500: 			mv 	t0, s0				# endereco do ultimo caractere da string %
00000b49 : 00a00e13;   % 1501: 			li 	t3, 10				# numero dez %
00000b4a : 00100e93;   % 1502: 			li 	t4, 1				# und/dez/cent %
00000b4b : 0352c063;   % 1504: loopexpreadFloat:	blt 	t0, s5, fimexpreadFloat		# ainda nao eh o endereco do primeiro digito? %
00000b4c : 00028303;   % 1505: 			lb 	t1, 0(t0)			# le o caracter %
00000b4d : fd030313;   % 1506: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000b4e : 03d30333;   % 1507: 			mul 	t1, t1, t4			# mul digito %
00000b4f : 006383b3;   % 1508: 			add 	t2, t2, t1			# soma ao exp %
00000b50 : 03ce8eb3;   % 1509: 			mul 	t4, t4, t3			# proxima casa decimal %
00000b51 : fff28293;   % 1510: 			addi 	t0, t0, -1			# endereco anterior %
00000b52 : fe5ff06f;   % 1511: 			j loopexpreadFloat			# volta ao loop %
00000b53 : 20108153;   % 1515: 			fmv.s 	ft2, ft1			# numero 10^exp  inicial=1 %
00000b54 : 206301d3;   % 1516: 			fmv.s 	ft3, ft6			# se o sinal for + ft3 eh 10 %
00000b55 : 00000213;   % 1517: 			li	tp, 0x00000000			# TP = ZERO %
00000b56 : 004a0463;   % 1518: 			beq 	s4, tp, sinalexpPosreadFloat	# se sinal exp positivo %
00000b57 : 1860f1d3;   % 1519: 			fdiv.s 	ft3, ft1, ft6			# se o final for - ft3 eh 0.1 %
00000b58 : 00000293;   % 1520: sinalexpPosreadFloat:	li 	t0, 0				# contador  %
00000b59 : 00728863;   % 1521: sinalexpreadFloat: 	beq 	t0, t2, fimsinalexpreadFloat	# se chegou ao fim %
00000b5a : 10317153;   % 1522: 			fmul.s 	ft2, ft2, ft3			# multiplica pelo fator 10 ou 0.1 %
00000b5b : 00128293;   % 1523: 			addi 	t0, t0, 1			# incrementa o contador %
00000b5c : ff5ff06f;   % 1524: 			j 	sinalexpreadFloat %
00000b5d : 10257553;   % 1527: 		fmul.s 	fa0, fa0, ft2		# multiplicacao final! %
00000b5e : 0fc22297;   % 1529: 		la 	t0, TempBuffer		# ajuste final do sinal do numero %
00000b5f : 53428293;   % 1529:  %
00000b60 : 00028303;   % 1530: 		lb 	t1, 0(t0)		# le primeiro caractere %
00000b61 : 02d00213;   % 1531: 		li	tp, '-'			# TP = 45 = '-' %
00000b62 : 00431463;   % 1532: 		bne 	t1, tp, fimreadFloat	# nao eh '-' entao fim %
00000b63 : 20a51553;   % 1533: 		fneg.s 	fa0, fa0		# nega o numero float %
00000b64 : 00012083;   % 1536: fimreadFloat: 	lw 	ra, 0(sp)		# recupera ra %
00000b65 : 00410113;   % 1537: 		addi 	sp, sp, 4		# libera espaco %
00000b66 : 00008067;   % 1538: 		ret				# retorna %
00000b67 : 10008c37;   % 1546: <9> li s8, 0x10008000	# carrega tp %
00000b68 : 000c0c13;   % 1546:  %
00000b69 : 01819863;   % 1546: <10> bne gp, s8, Time.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000b6a : 01e00893;   % 1547: 	li 	a7, 30				# Chama o ecall do Rars %
00000b6b : 00000073;   % 1548: 	ecall %
00000b6c : 00008067;   % 1549: 	ret					# saida %
00000b6d : c0102573;   % 1551: Time.DE1:	csrr a0, time			#  Le time LOW %
00000b6e : c81025f3;   % 1552: 		csrr a1, timeh 			#  Le time HIGH %
00000b6f : 00008067;   % 1553: 		ret %
00000b70 : 10008c37;   % 1560: <9> li s8, 0x10008000	# carrega tp %
00000b71 : 000c0c13;   % 1560:  %
00000b72 : 01819863;   % 1560: <10> bne gp, s8, Sleep.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000b73 : 02000893;   % 1561: 	li 	a7, 32				# Chama o ecall do Rars %
00000b74 : 00000073;   % 1562: 	ecall %
00000b75 : 00008067;   % 1563: 	ret					#Saida %
00000b76 : c01022f3;   % 1565: Sleep.DE1:	csrr 	t0, time		# Le o tempo do sistema %
00000b77 : 00a28333;   % 1566: 		add 	t1, t0, a0		# soma com o tempo solicitado %
00000b78 : c01022f3;   % 1567: Sleep.Loop:	csrr	t0, time		# Le o tempo do sistema %
00000b79 : fe62eee3;   % 1568: 		bltu	t0, t1, Sleep.Loop	# t0<t1 ? %
00000b7a : 00008067;   % 1569: 		ret %
00000b7b : 10008c37;   % 1577: <9> li s8, 0x10008000	# carrega tp %
00000b7c : 000c0c13;   % 1577:  %
00000b7d : 01819863;   % 1577: <10> bne gp, s8, Random.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000b7e : 02900893;   % 1578: 	li 	a7,41			# Chama o ecall do Rars %
00000b7f : 00000073;   % 1579: 	ecall	 %
00000b80 : 00008067;   % 1580: 	ret				# saida %
00000b81 : ff2002b7;   % 1582: Random.DE1: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
00000b82 : 51428293;   % 1582:  %
00000b83 : 0002a503;   % 1583: 		lw 	a0, 0(t0)	# le a word em a0 %
00000b84 : 00008067;   % 1584: 		ret			# retorna %
00000b85 : 10008c37;   % 1594: <9> li s8, 0x10008000	# carrega tp %
00000b86 : 000c0c13;   % 1594:  %
00000b87 : 01819863;   % 1594: <10> bne gp, s8, Random2.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000b88 : 02a00893;   % 1595: 		li 	a7,42			# Chama o ecall do Rars %
00000b89 : 00000073;   % 1596: 		ecall	 %
00000b8a : 00008067;   % 1597: 		ret				# saida %
00000b8b : ff2002b7;   % 1599: Random2.DE1: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
00000b8c : 51428293;   % 1599:  %
00000b8d : 0002a503;   % 1600: 		lw 	a0, 0(t0)	# le a word em a0 %
00000b8e : 4b0000ef;   % 1601: 		jal 	__umodsi3 %
00000b8f : 00008067;   % 1603: 		ret			# retorna %
00000b90 : 00058c63;   % 1614: clsCLS:	beq 	a1, zero, CLS.frame0 %
00000b91 : ff100337;   % 1615: 	li      t1, 0xFF100000              # Memoria VGA 1 %
00000b92 : 00030313;   % 1615:  %
00000b93 : ff1133b7;   % 1616:    	li      t2, 0xFF112C00 %
00000b94 : c0038393;   % 1616:  %
00000b95 : 0140006f;   % 1617:    	j 	CLS.pula %
00000b96 : ff000337;   % 1618: CLS.frame0: 	li      t1, 0xFF000000           # Memoria VGA 0 %
00000b97 : 00030313;   % 1618:  %
00000b98 : ff0133b7;   % 1619:    	    	li      t2, 0xFF012C00   	 %
00000b99 : c0038393;   % 1619:  %
00000b9a : 0ff57513;   % 1620: CLS.pula:	andi    a0, a0, 0x00FF %
00000b9b : 00a002b3;   % 1623:  		mv 	t0, a0 %
00000b9c : 00851513;   % 1624:  		slli 	a0, a0, 8 %
00000b9d : 00a2e2b3;   % 1625:  		or 	t0, t0, a0 %
00000b9e : 00851513;   % 1626:  		slli 	a0, a0, 8 %
00000b9f : 00a2e2b3;   % 1627:  		or 	t0, t0, a0 %
00000ba0 : 00851513;   % 1628:  		slli 	a0, a0, 8 %
00000ba1 : 00a2e2b3;   % 1629:  		or 	t0, t0, a0 %
00000ba2 : 00730863;   % 1631: CLS.for:	beq     t1, t2, CLS.fim %
00000ba3 : 00532023;   % 1632: 		sw      t0, 0(t1) %
00000ba4 : 00430313;   % 1633:     		addi    t1, t1, 4 %
00000ba5 : ff5ff06f;   % 1634:     		j       CLS.for %
00000ba6 : 00008067;   % 1635: CLS.fim:	ret %
00000ba7 : ff000837;   % 1644: BRESENHAM: 	li	a6, 0xFF000000           	# Memoria VGA 0 %
00000ba8 : 00080813;   % 1644:  %
00000ba9 : 00078663;   % 1645: 	   	beq	a5, zero, pulaBRES %
00000baa : ff100837;   % 1646: 	   	li 	a6, 0xFF100000              # Memoria VGA 1 %
00000bab : 00080813;   % 1646:  %
00000bac : 14000893;   % 1648: pulaBRES: 	li 	a7, 320 %
00000bad : 40b682b3;   % 1649: 	  	sub 	t0, a3, a1 %
00000bae : 0002d463;   % 1650: 	  	bge 	t0, zero, PULAABRES %
00000baf : 405002b3;   % 1651: 	  	sub 	t0, zero, t0 %
00000bb0 : 40a60333;   % 1652: PULAABRES:	sub 	t1, a2, a0 %
00000bb1 : 00035463;   % 1653: 	   	bge  	t1, zero, PULABBRES %
00000bb2 : 40600333;   % 1654: 	   	sub  	t1, zero, t1	 %
00000bb3 : 0262d263;   % 1655: PULABBRES: 	bge  	t0, t1, PULACBRES %
00000bb4 : 00a65e63;   % 1656: 	   	ble  	a0, a2, PULAC1BRES %
00000bb5 : 00a007b3;   % 1657: 	   	mv 	a5, a0 %
00000bb6 : 00c00533;   % 1658: 	   	mv 	a0, a2 %
00000bb7 : 00f00633;   % 1659: 	   	mv 	a2, a5 %
00000bb8 : 00b007b3;   % 1660: 	   	mv	a5, a1 %
00000bb9 : 00d005b3;   % 1661: 	   	mv 	a1, a3 %
00000bba : 00f006b3;   % 1662: 	   	mv 	a3, a5 %
00000bbb : 0240006f;   % 1663: PULAC1BRES:	j PLOTLOWBRES %
00000bbc : 00b6de63;   % 1665: PULACBRES: 	ble  	a1, a3, PULAC2BRES %
00000bbd : 00a007b3;   % 1666: 	   	mv 	a5, a0 %
00000bbe : 00c00533;   % 1667: 	   	mv 	a0, a2 %
00000bbf : 00f00633;   % 1668: 	   	mv 	a2, a5 %
00000bc0 : 00b007b3;   % 1669: 	   	mv 	a5, a1 %
00000bc1 : 00d005b3;   % 1670: 	   	mv 	a1, a3 %
00000bc2 : 00f006b3;   % 1671: 	   	mv 	a3, a5 %
00000bc3 : 0a80006f;   % 1672: PULAC2BRES:	j PLOTHIGHBRES %
00000bc4 : 40a602b3;   % 1674: PLOTLOWBRES:	sub 	t0, a2, a0		# dx=x1-x0 %
00000bc5 : 40b68333;   % 1675: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000bc6 : 00100393;   % 1676: 	 	li  	t2, 1			# yi=1 %
00000bc7 : 00035663;   % 1677: 	 	bge 	t1, zero, PULA1BRES	# dy>=0 PULA %
00000bc8 : fff00393;   % 1678: 	 	li  	t2, -1			# yi=-1 %
00000bc9 : 40600333;   % 1679: 	 	sub 	t1, zero, t1		# dy=-dy %
00000bca : 00131e13;   % 1680: PULA1BRES:	slli 	t3, t1, 1		# 2*dy %
00000bcb : 405e0e33;   % 1681: 		sub 	t3, t3, t0		# D=2*dy-dx %
00000bcc : 00b00eb3;   % 1682: 		mv 	t4, a1			# y=y0 %
00000bcd : 00a00f33;   % 1683: 		mv 	t5, a0			# x=x0 %
00000bce : 30102c73;   % 1685: <29> csrr s8, misa %
00000bcf : 00cc5c13;   % 1685: <30> srli s8, s8, 12 %
00000bd0 : 001c7c13;   % 1685: <31> andi s8, s8, 0x001 %
00000bd1 : 020c1e63;   % 1685: <32> bnez s8, BRESENHAM.mul1 %
00000bd2 : ff410113;   % 1686: <45> addi 	sp, sp, -12 %
00000bd3 : 00a12023;   % 1686: <46> sw	a0, 0(sp) %
00000bd4 : 00b12223;   % 1686: <47> sw	a1, 4(sp) %
00000bd5 : 00112423;   % 1686: <48> sw	ra, 8(sp) %
00000bd6 : 01d00533;   % 1686: <50> mv 	a0, t4 %
00000bd7 : 011005b3;   % 1686: <51> mv 	a1, a7 %
00000bd8 : 2d8000ef;   % 1686: <52> jal 	__mulsi3 %
00000bd9 : 04051073;   % 1686: <53> csrw	a0,uscratch %
00000bda : 00012503;   % 1686: <55> lw	a0, 0(sp) %
00000bdb : 00412583;   % 1686: <56> lw	a1, 4(sp) %
00000bdc : 00812083;   % 1686: <57> lw	ra, 8(sp) %
00000bdd : 00c10113;   % 1686: <58> addi 	sp, sp, 12 %
00000bde : 04002ff3;   % 1686: <59> csrr	t6,uscratch %
00000bdf : 0080006f;   % 1687: 		j BRESENHAM.mul1d %
00000be0 : 031e8fb3;   % 1688: BRESENHAM.mul1:	mul 	t6, t4, a7		# y*320 %
00000be1 : 01ef8fb3;   % 1689: BRESENHAM.mul1d:add 	t6, t6, t5		# y*320+x %
00000be2 : 010f8fb3;   % 1690: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000be3 : 00ef8023;   % 1691: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000be4 : 01c05863;   % 1693: 		ble 	t3, zero, PULA2BRES	# D<=0 %
00000be5 : 007e8eb3;   % 1694: 		add 	t4, t4, t2		# y=y+yi %
00000be6 : 00129f93;   % 1695: 		slli 	t6, t0, 1		# 2*dx %
00000be7 : 41fe0e33;   % 1696: 		sub 	t3, t3, t6		# D=D-2dx %
00000be8 : 00131f93;   % 1697: PULA2BRES:	slli 	t6, t1, 1		# 2*dy %
00000be9 : 01fe0e33;   % 1698: 		add 	t3, t3, t6		# D=D+2dx %
00000bea : 001f0f13;   % 1699: 		addi	t5, t5, 1 %
00000beb : f8cf16e3;   % 1700: 		bne 	t5, a2, LOOPx1BRES %
00000bec : 00008067;   % 1701: 		ret %
00000bed : 40a602b3;   % 1703: PLOTHIGHBRES: 	sub 	t0, a2, a0		# dx=x1-x0 %
00000bee : 40b68333;   % 1704: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000bef : 00100393;   % 1705: 	 	li 	t2, 1			# xi=1 %
00000bf0 : 0002d663;   % 1706: 	 	bge 	t0, zero, PULA3BRES	# dy>=0 PULA %
00000bf1 : fff00393;   % 1707: 	 	li 	t2, -1			# xi=-1 %
00000bf2 : 405002b3;   % 1708: 	 	sub 	t0, zero, t0		# dx=-dx %
00000bf3 : 00129e13;   % 1709: PULA3BRES:	slli 	t3, t0, 1		# 2*dx %
00000bf4 : 406e0e33;   % 1710: 		sub 	t3, t3, t1		# D=2*dx-d1 %
00000bf5 : 00a00eb3;   % 1711: 		mv 	t4, a0			# x=x0 %
00000bf6 : 00b00f33;   % 1712: 		mv 	t5, a1			# y=y0 %
00000bf7 : 30102c73;   % 1714: <29> csrr s8, misa %
00000bf8 : 00cc5c13;   % 1714: <30> srli s8, s8, 12 %
00000bf9 : 001c7c13;   % 1714: <31> andi s8, s8, 0x001 %
00000bfa : 020c1e63;   % 1714: <32> bnez s8, BRESENHAM.mul2 %
00000bfb : ff410113;   % 1715: <45> addi 	sp, sp, -12 %
00000bfc : 00a12023;   % 1715: <46> sw	a0, 0(sp) %
00000bfd : 00b12223;   % 1715: <47> sw	a1, 4(sp) %
00000bfe : 00112423;   % 1715: <48> sw	ra, 8(sp) %
00000bff : 01e00533;   % 1715: <50> mv 	a0, t5 %
00000c00 : 011005b3;   % 1715: <51> mv 	a1, a7 %
00000c01 : 234000ef;   % 1715: <52> jal 	__mulsi3 %
00000c02 : 04051073;   % 1715: <53> csrw	a0,uscratch %
00000c03 : 00012503;   % 1715: <55> lw	a0, 0(sp) %
00000c04 : 00412583;   % 1715: <56> lw	a1, 4(sp) %
00000c05 : 00812083;   % 1715: <57> lw	ra, 8(sp) %
00000c06 : 00c10113;   % 1715: <58> addi 	sp, sp, 12 %
00000c07 : 04002ff3;   % 1715: <59> csrr	t6,uscratch %
00000c08 : 0080006f;   % 1716: 		j BRESENHAM.mul2d %
00000c09 : 031f0fb3;   % 1717: BRESENHAM.mul2:	mul 	t6, t5, a7		# y*320 %
00000c0a : 01df8fb3;   % 1718: BRESENHAM.mul2d:add 	t6, t6, t4		# y*320+x %
00000c0b : 010f8fb3;   % 1719: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000c0c : 00ef8023;   % 1720: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000c0d : 01c05863;   % 1722: 		ble 	t3, zero, PULA4BRES	# D<=0 %
00000c0e : 007e8eb3;   % 1723: 		add 	t4, t4, t2		# x=x+xi %
00000c0f : 00131f93;   % 1724: 		slli 	t6, t1, 1		# 2*dy %
00000c10 : 41fe0e33;   % 1725: 		sub 	t3, t3, t6		# D=D-2dy %
00000c11 : 00129f93;   % 1726: PULA4BRES: 	slli 	t6, t0, 1		# 2*dy %
00000c12 : 01fe0e33;   % 1727: 		add 	t3, t3, t6		# D=D+2dx %
00000c13 : 001f0f13;   % 1728: 		addi 	t5, t5, 1 %
00000c14 : f8df16e3;   % 1729: 		bne 	t5, a3, LOOPx2BRES %
00000c15 : 00008067;   % 1730: 		ret		 %
00000c16 : ffc10113;   % 1745: printIntUnsigned:	addi 	sp, sp, -4		# Aloca espaco %
00000c17 : 00112023;   % 1746: 		sw 	ra, 0(sp)			# salva ra %
00000c18 : 0fc22297;   % 1747: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000c19 : 24c28293;   % 1747:  %
00000c1a : 00a00393;   % 1749: 		li 	t2, 10				# carrega numero 10 %
00000c1b : 00000313;   % 1750: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000c1c : 30102c73;   % 1752: <29> csrr s8, misa %
00000c1d : 00cc5c13;   % 1752: <30> srli s8, s8, 12 %
00000c1e : 001c7c13;   % 1752: <31> andi s8, s8, 0x001 %
00000c1f : 160c1463;   % 1752: <32> bnez s8, printIntUnsigned.pula1 %
00000c20 : ff010113;   % 1753: <65> addi 	sp, sp, -16 %
00000c21 : 00a12023;   % 1753: <66> sw	a0, 0(sp) %
00000c22 : 00e12223;   % 1753: <67> sw	a4, 4(sp) %
00000c23 : 00f12423;   % 1753: <68> sw	a5, 8(sp) %
00000c24 : 00112623;   % 1753: <69> sw	ra, 12(sp) %
00000c25 : 00a00533;   % 1753: <70> mv 	a0, a0 %
00000c26 : 00155713;   % 1753: <71> srli    a4,a0,1 %
00000c27 : 00255793;   % 1753: <72> srli    a5,a0,2 %
00000c28 : 00f707b3;   % 1753: <73> add     a5,a4,a5 %
00000c29 : 0047d713;   % 1753: <74> srli    a4,a5,4 %
00000c2a : 00f70733;   % 1753: <75> add     a4,a4,a5 %
00000c2b : 00875793;   % 1753: <76> srli    a5,a4,8 %
00000c2c : 00e78733;   % 1753: <77> add     a4,a5,a4 %
00000c2d : 01075793;   % 1753: <78> srli    a5,a4,16 %
00000c2e : 00e787b3;   % 1753: <79> add     a5,a5,a4 %
00000c2f : 0037d793;   % 1753: <80> srli    a5,a5,3 %
00000c30 : 00279713;   % 1753: <81> slli    a4,a5,2 %
00000c31 : 00f70733;   % 1753: <82> add     a4,a4,a5 %
00000c32 : 00171713;   % 1753: <83> slli    a4,a4,1 %
00000c33 : 40e50533;   % 1753: <84> sub     a0,a0,a4 %
00000c34 : 00a53513;   % 1753: <85> sltiu   a0,a0,10 %
00000c35 : 00154513;   % 1753: <86> xori    a0,a0,1 %
00000c36 : 00f50533;   % 1753: <87> add     a0,a0,a5 %
00000c37 : 04051073;   % 1753: <88> csrw	a0,uscratch %
00000c38 : 00012503;   % 1753: <89> lw	a0, 0(sp) %
00000c39 : 00412703;   % 1753: <90> lw	a4, 4(sp) %
00000c3a : 00812783;   % 1753: <91> lw	a5, 8(sp) %
00000c3b : 00c12083;   % 1753: <92> lw	ra, 12(sp) %
00000c3c : 01010113;   % 1753: <93> addi 	sp, sp, 16 %
00000c3d : 04002ef3;   % 1753: <94> csrr	t4,uscratch %
00000c3e : ff010113;   % 1754: <122> addi 	sp,sp,-16 %
00000c3f : 00a12023;   % 1754: <123> sw	a0,0(sp) %
00000c40 : 00b12223;   % 1754: <124> sw	a1,4(sp) %
00000c41 : 00c12423;   % 1754: <125> sw	a2,8(sp) %
00000c42 : 00d12623;   % 1754: <126> sw	a3,12(sp) %
00000c43 : 00a006b3;   % 1754: <128> mv 	a3,a0 %
00000c44 : 00a00613;   % 1754: <129> li 	a2,10 %
00000c45 : ff010113;   % 1754: <65> addi 	sp, sp, -16 %
00000c46 : 00a12023;   % 1754: <66> sw	a0, 0(sp) %
00000c47 : 00e12223;   % 1754: <67> sw	a4, 4(sp) %
00000c48 : 00f12423;   % 1754: <68> sw	a5, 8(sp) %
00000c49 : 00112623;   % 1754: <69> sw	ra, 12(sp) %
00000c4a : 00d00533;   % 1754: <70> mv 	a0, a3 %
00000c4b : 00155713;   % 1754: <71> srli    a4,a0,1 %
00000c4c : 00255793;   % 1754: <72> srli    a5,a0,2 %
00000c4d : 00f707b3;   % 1754: <73> add     a5,a4,a5 %
00000c4e : 0047d713;   % 1754: <74> srli    a4,a5,4 %
00000c4f : 00f70733;   % 1754: <75> add     a4,a4,a5 %
00000c50 : 00875793;   % 1754: <76> srli    a5,a4,8 %
00000c51 : 00e78733;   % 1754: <77> add     a4,a5,a4 %
00000c52 : 01075793;   % 1754: <78> srli    a5,a4,16 %
00000c53 : 00e787b3;   % 1754: <79> add     a5,a5,a4 %
00000c54 : 0037d793;   % 1754: <80> srli    a5,a5,3 %
00000c55 : 00279713;   % 1754: <81> slli    a4,a5,2 %
00000c56 : 00f70733;   % 1754: <82> add     a4,a4,a5 %
00000c57 : 00171713;   % 1754: <83> slli    a4,a4,1 %
00000c58 : 40e50533;   % 1754: <84> sub     a0,a0,a4 %
00000c59 : 00a53513;   % 1754: <85> sltiu   a0,a0,10 %
00000c5a : 00154513;   % 1754: <86> xori    a0,a0,1 %
00000c5b : 00f50533;   % 1754: <87> add     a0,a0,a5 %
00000c5c : 04051073;   % 1754: <88> csrw	a0,uscratch %
00000c5d : 00012503;   % 1754: <89> lw	a0, 0(sp) %
00000c5e : 00412703;   % 1754: <90> lw	a4, 4(sp) %
00000c5f : 00812783;   % 1754: <91> lw	a5, 8(sp) %
00000c60 : 00c12083;   % 1754: <92> lw	ra, 12(sp) %
00000c61 : 01010113;   % 1754: <93> addi 	sp, sp, 16 %
00000c62 : 04002573;   % 1754: <94> csrr	a0,uscratch %
00000c63 : ff410113;   % 1754: <45> addi 	sp, sp, -12 %
00000c64 : 00a12023;   % 1754: <46> sw	a0, 0(sp) %
00000c65 : 00b12223;   % 1754: <47> sw	a1, 4(sp) %
00000c66 : 00112423;   % 1754: <48> sw	ra, 8(sp) %
00000c67 : 00a00533;   % 1754: <50> mv 	a0, a0 %
00000c68 : 00c005b3;   % 1754: <51> mv 	a1, a2 %
00000c69 : 094000ef;   % 1754: <52> jal 	__mulsi3 %
00000c6a : 04051073;   % 1754: <53> csrw	a0,uscratch %
00000c6b : 00012503;   % 1754: <55> lw	a0, 0(sp) %
00000c6c : 00412583;   % 1754: <56> lw	a1, 4(sp) %
00000c6d : 00812083;   % 1754: <57> lw	ra, 8(sp) %
00000c6e : 00c10113;   % 1754: <58> addi 	sp, sp, 12 %
00000c6f : 040025f3;   % 1754: <59> csrr	a1,uscratch %
00000c70 : 40b68e33;   % 1754: <132> sub 	t3,a3,a1 %
00000c71 : 040e1073;   % 1754: <134> csrw	t3,uscratch %
00000c72 : 00012503;   % 1754: <135> lw	a0,0(sp) %
00000c73 : 00412583;   % 1754: <136> lw 	a1,4(sp) %
00000c74 : 00812603;   % 1754: <137> lw	a2,8(sp) %
00000c75 : 00c12683;   % 1754: <138> lw	a3,12(sp) %
00000c76 : 01010113;   % 1754: <139> addi 	sp,sp,16 %
00000c77 : 04002e73;   % 1754: <140> csrr	t3,uscratch %
00000c78 : 00c0006f;   % 1755: 			j	printIntUnsigned.pula1d %
00000c79 : 02755eb3;   % 1756: printIntUnsigned.pula1:	divu 	t4, a0, t2			# divide por 10 (quociente) %
00000c7a : 02757e33;   % 1757: 			remu 	t3, a0, t2			# resto %
00000c7b : ffc10113;   % 1758: printIntUnsigned.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
00000c7c : 01c12023;   % 1759: 		sw 	t3, 0(sp)			# coloca resto na pilha %
00000c7d : 01d00533;   % 1760: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000c7e : 00130313;   % 1761: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000c7f : e6051ae3;   % 1762: 		bne 	a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
00000c80 : 00012383;   % 1764: printIntUnsigned.loop2:	lw 	t2, 0(sp)		# le digito da pilha %
00000c81 : 00410113;   % 1765: 		addi 	sp, sp, 4			# libera espaco %
00000c82 : 03038393;   % 1766: 		addi 	t2, t2, 48			# converte o digito para ascii %
00000c83 : 00728023;   % 1767: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
00000c84 : 00128293;   % 1768: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000c85 : fff30313;   % 1769: 		addi 	t1, t1, -1			# decrementa contador de digitos %
00000c86 : fe0314e3;   % 1770: 		bne 	t1, zero, printIntUnsigned.loop2# eh o ultimo? %
00000c87 : 00028023;   % 1771: 		sb 	zero, 0(t0)			# insere \NULL na string %
00000c88 : 0fc22517;   % 1773: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
00000c89 : 08c50513;   % 1773:  %
00000c8a : a38ff0ef;   % 1774: 		jal 	printString			# chama o print string %
00000c8b : 00012083;   % 1776: 		lw 	ra, 0(sp)			# recupera a %
00000c8c : 00410113;   % 1777: 		addi 	sp, sp, 4			# libera espaco %
00000c8d : 00008067;   % 1778: printIntUnsigned.fim:	ret %
00000c8e : ff410113;   % 1790: __mulsi3:	addi 	sp,sp,-12 %
00000c8f : 00b12023;   % 1791: 		sw 	a1,0(sp) %
00000c90 : 00e12223;   % 1792: 		sw 	a4,4(sp) %
00000c91 : 00f12423;   % 1793: 		sw	a5,8(sp) %
00000c92 : 00a007b3;   % 1795: 	 	mv      a5,a0 %
00000c93 : 00000513;   % 1796:         	li      a0,0 %
00000c94 : 00078e63;   % 1797: mulsi3.L4: 	beqz    a5,mulsi3.L1 %
00000c95 : 0017f713;   % 1798:         	andi    a4,a5,1 %
00000c96 : 00070463;   % 1799:         	beqz    a4,mulsi3.L3 %
00000c97 : 00b50533;   % 1800:         	add     a0,a0,a1 %
00000c98 : 0017d793;   % 1801: mulsi3.L3: 	srli    a5,a5,1 %
00000c99 : 00159593;   % 1802:         	slli    a1,a1,1 %
00000c9a : fe9ff06f;   % 1803:         	j       mulsi3.L4 %
00000c9b : 00012583;   % 1805: mulsi3.L1: 	lw 	a1,0(sp) %
00000c9c : 00412703;   % 1806: 		lw	a4,4(sp) %
00000c9d : 00812783;   % 1807: 		lw	a5,8(sp) %
00000c9e : 00c10113;   % 1808: 		addi 	sp,sp,12 %
00000c9f : 00008067;   % 1809: 		ret %
00000ca0 : ff010113;   % 1813: __udivsi3:	addi 	sp,sp,-16 %
00000ca1 : 00b12023;   % 1814: 		sw 	a1,0(sp) %
00000ca2 : 00d12223;   % 1815: 		sw	a3,4(sp) %
00000ca3 : 00e12423;   % 1816: 		sw 	a4,8(sp) %
00000ca4 : 00f12623;   % 1817: 		sw	a5,12(sp) %
00000ca5 : 00a00733;   % 1819:  		mv      a4,a0 %
00000ca6 : 00155693;   % 1820:         	srli    a3,a0,1 %
00000ca7 : 00100793;   % 1821:         	li      a5,1 %
00000ca8 : 00b6e863;   % 1822: udivsi3.L3:    	bltu    a3,a1,udivsi3.L6 %
00000ca9 : 00179793;   % 1823:         	slli    a5,a5,1 %
00000caa : 00159593;   % 1824:         	slli    a1,a1,1 %
00000cab : ff5ff06f;   % 1825:         	j       udivsi3.L3 %
00000cac : 00000513;   % 1826: udivsi3.L6:    	li      a0,0 %
00000cad : 00078e63;   % 1827: udivsi3.L2:   	beqz    a5,udivsi3.L1 %
00000cae : 00b76663;   % 1828:         	bltu    a4,a1,udivsi3.L5 %
00000caf : 40b70733;   % 1829:         	sub     a4,a4,a1 %
00000cb0 : 00f50533;   % 1830:         	add     a0,a0,a5 %
00000cb1 : 0017d793;   % 1831: udivsi3.L5:    	srli    a5,a5,1 %
00000cb2 : 0015d593;   % 1832:         	srli    a1,a1,1 %
00000cb3 : fe9ff06f;   % 1833:         	j       udivsi3.L2 %
00000cb4 : 00012583;   % 1835: udivsi3.L1: 	lw 	a1,0(sp) %
00000cb5 : 00412683;   % 1836: 		lw	a3,4(sp) %
00000cb6 : 00812703;   % 1837: 		lw	a4,8(sp) %
00000cb7 : 00c12783;   % 1838: 		lw	a5,12(sp) %
00000cb8 : 01010113;   % 1839: 		addi 	sp,sp,16 %
00000cb9 : 00008067;   % 1840:     		ret %
00000cba : ff410113;   % 1843: __umodsi3:	addi	sp, sp, -12 %
00000cbb : 00512023;   % 1844: 		sw 	t0, 0(sp) %
00000cbc : 00612223;   % 1845: 		sw 	t1, 4(sp) %
00000cbd : 00112423;   % 1846: 		sw 	ra, 8(sp) %
00000cbe : 00a002b3;   % 1847: 	 	mv 	t0, a0		# dividendo %
00000cbf : 00b00333;   % 1848: 		mv 	t1, a1		# divisor %
00000cc0 : f81ff0ef;   % 1849: 		jal 	__udivsi3 %
00000cc1 : 006005b3;   % 1850: 		mv 	a1, t1		# quociente * divisor %
00000cc2 : f31ff0ef;   % 1851: 		jal 	__mulsi3 %
00000cc3 : 40a28533;   % 1852: 		sub 	a0, t0, a0	# dividendo-quociente*divisor %
00000cc4 : 00012283;   % 1853: 		lw 	t0, 0(sp) %
00000cc5 : 00412303;   % 1854: 		lw 	t1, 4(sp) %
00000cc6 : 00812083;   % 1855: 		lw 	ra, 8(sp) %
00000cc7 : 00c10113;   % 1856: 		addi 	sp, sp, 12 %
00000cc8 : 00008067;   % 1857: 		ret %
00000cc9 : ff010113;   % 1860: __divsi3:	addi	sp, sp, -16 %
00000cca : 00512023;   % 1861: 		sw 	t0, 0(sp) %
00000ccb : 00612223;   % 1862: 		sw 	t1, 4(sp) %
00000ccc : 00712423;   % 1863: 		sw 	t2, 8(sp) %
00000ccd : 00112623;   % 1864: 		sw 	ra, 12(sp) %
00000cce : 41f55293;   % 1865: 		srai	t0,a0,31	# indica se a0 é pos(0) ou neg (2^32-1) %
00000ccf : 41f5d313;   % 1866: 		srai 	t1,a1,31	# indica se a1 é pos(0) ou neg (2^32-1) %
00000cd0 : 0062c3b3;   % 1867: 		xor	t2,t0,t1	# indica se deve(!=0) ou não(==0) inverter o sinal do resultado %
00000cd1 : 00028463;   % 1868: 		beqz 	t0,divsi3.pula1 %
00000cd2 : 40a00533;   % 1869: 		neg	a0,a0		# nega %
00000cd3 : 00030463;   % 1870: divsi3.pula1:	beqz 	t1,divsi3.pula2 %
00000cd4 : 40b005b3;   % 1871: 		neg	a1,a1		# nega %
00000cd5 : f2dff0ef;   % 1872: divsi3.pula2:	jal 	__udivsi3	# divisão unsigned %
00000cd6 : 00038463;   % 1873: 		beqz	t2, divsi3.pula3	 %
00000cd7 : 40a00533;   % 1874: 		neg	a0,a0		# nega %
00000cd8 : 00012283;   % 1875: divsi3.pula3:	lw 	t0, 0(sp) %
00000cd9 : 00412303;   % 1876: 		lw 	t1, 4(sp) %
00000cda : 00812383;   % 1877: 		lw 	t2, 8(sp) %
00000cdb : 00c12083;   % 1878: 		lw 	ra, 12(sp) %
00000cdc : 01010113;   % 1879: 		addi 	sp, sp, 16 %
00000cdd : 00008067;   % 1880: 		ret %
00000cde : ff410113;   % 1883: __modsi3:	addi	sp, sp, -12 %
00000cdf : 00512023;   % 1884: 		sw 	t0, 0(sp) %
00000ce0 : 00612223;   % 1885: 		sw 	t1, 4(sp) %
00000ce1 : 00112423;   % 1886: 		sw 	ra, 8(sp) %
00000ce2 : 41f55293;   % 1887: 		srai	t0,a0,31	# indica se a0 é pos(0) ou neg (2^32-1) %
00000ce3 : 41f5d313;   % 1888: 		srai 	t1,a1,31	# indica se a1 é pos(0) ou neg (2^32-1) %
00000ce4 : 00028463;   % 1889: 		beqz 	t0,modsi3.pula1 %
00000ce5 : 40a00533;   % 1890: 		neg	a0,a0		# nega %
00000ce6 : 00030463;   % 1891: modsi3.pula1:	beqz 	t1,modsi3.pula2 %
00000ce7 : 40b005b3;   % 1892: 		neg	a1,a1		# nega %
00000ce8 : f49ff0ef;   % 1893: modsi3.pula2:	jal 	__umodsi3	# resto unsigned %
00000ce9 : 00028463;   % 1894: 		beqz	t0, modsi3.pula3	# sinal do dividendo	 %
00000cea : 40a00533;   % 1895: 		neg	a0,a0		# nega %
00000ceb : 00012283;   % 1896: modsi3.pula3:	lw 	t0, 0(sp) %
00000cec : 00412303;   % 1897: 		lw 	t1, 4(sp) %
00000ced : 00812083;   % 1898: 		lw 	ra, 8(sp) %
00000cee : 00c10113;   % 1899: 		addi 	sp, sp, 12 %
00000cef : 00008067;   % 1900: 		ret																				 %
END;
